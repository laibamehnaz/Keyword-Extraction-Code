{"\u00ef\u00bb\u00bfScalable Grid Service Discovery Based on UDDI*\n*\nAuthors are listed in alphabetical order.\nSujata Banerjee$\n, Sujoy Basu$\n, Shishir Garg , Sukesh Garg , Sung-Ju Lee$\n, Pramila Mullan , Puneet Sharma$\n$\nHP Labs\n1501 Page Mill Road\nPalo Alto, CA, 94304 USA\n+1-650-857-2137\n{sujata.banerjee,sujoy.basu,sungju.lee,puneet.sharma}@hp.com\nFrance Telecom R&D Division\n801 Gateway Blvd, # 500\nSouth San Francisco, CA, 94080 USA\n+1 650 -875-1500\n{shishir.garg,sukesh.garg,pramila.mullan}@francetelecom.com\nABSTRACT\nEfficient discovery of grid services is essential for the success of\ngrid computing. The standardization of grids based on web\nservices has resulted in the need for scalable web service\ndiscovery mechanisms to be deployed in grids Even though UDDI\nhas been the de facto industry standard for web-services\ndiscovery, imposed requirements of tight-replication among\nregistries and lack of autonomous control has severely hindered\nits widespread deployment and usage. With the advent of grid\ncomputing the scalability issue of UDDI will become a roadblock\nthat will prevent its deployment in grids. In this paper we present\nour distributed web-service discovery architecture, called DUDE\n(Distributed UDDI Deployment Engine). DUDE leverages DHT\n(Distributed Hash Tables) as a rendezvous mechanism between\nmultiple UDDI registries. DUDE enables consumers to query\nmultiple registries, still at the same time allowing organizations to\nhave autonomous control over their registries.. Based on\npreliminary prototype on PlanetLab, we believe that DUDE\narchitecture can support effective distribution of UDDI registries\nthereby making UDDI more robust and also addressing its scaling\nissues. Furthermore, The DUDE architecture for scalable\ndistribution can be applied beyond UDDI to any Grid Service\nDiscovery mechanism.\nCategories and Subject Descriptors\nC2.4 [Distributed Systems]\nGeneral Terms\nDesign, Experimentation, Standardization.\n1. INTRODUCTION\nEfficient discovery of grid services is essential for the success of\ngrid computing. The standardization of grids based on web\nservices has resulted in the need for scalable web service\nPermission to make digital or hard copies of all or part of this\nwork for personal or classroom use is granted without fee\nprovided that copies are not made or distributed for profit or\ncommercial advantage and that copies bear this notice and the\nfull citation on the first page. To copy otherwise,to republish,\nto post on servers or to redistribute to lists, requires prior\nspecific permission and/or a fee.\nMGC '05, November 28- December 2, 2005 Grenoble , France\ndiscovery mechanisms to be deployed in grids. Grid discovery\nservices provide the ability to monitor and discover resources and\nservices on grids. They provide the ability to query and subscribe\nto resource/service information. In addition, threshold traps might\nbe required to indicate specific change in existing conditions. The\nstate of the data needs to be maintained in a soft state so that the\nmost recent information is always available. The information\ngathered needs to be provided to variety of systems for the\npurpose of either utilizing the grid or proving summary\ninformation. However, the fundamental problem is the need to be\nscalable to handle huge amounts of data from multiple sources.\nThe web services community has addressed the need for service\ndiscovery, before grids were anticipated, via an industry standard\ncalled UDDI. However, even though UDDI has been the de facto\nindustry standard for web-services discovery, imposed\nrequirements of tight-replication among registries and lack of\nautonomous control, among other things has severely hindered its\nwidespread deployment and usage [7]. With the advent of grid\ncomputing the scalability issue with UDDI will become a\nroadblock that will prevent its deployment in grids.\nThis paper tackles the scalability issue and a way to find services\nacross multiple registries in UDDI by developing a distributed\nweb services discovery architecture. Distributing UDDI\nfunctionality can be achieved in multiple ways and perhaps using\ndifferent distributed computing infrastructure/platforms (e.g.,\nCORBA, DCE, etc.). In this paper we explore how Distributed\nHash Table (DHT) technology can be leveraged to develop a\nscalable distributed web services discovery architecture. A DHT is\na peer-to-peer (P2P) distributed system that forms a structured\noverlay allowing more efficient routing than the underlying\nnetwork. This crucial design choice is motivated by two factors.\nThe first motivating factor is the inherent simplicity of the put/get\nabstraction that DHTs provide, which makes it easy to rapidly\nbuild applications on top of DHTs. We recognize that having just\nthis abstraction may not suffice for all distributed applications, but\nfor the objective at hand, works very well as will become clear\nlater. Other distributed computing platforms/middleware while\nproviding more functionality have much higher overhead and\ncomplexity. The second motivating factor stems from the fact that\nDHTs are relatively new tool for building distributed applications\nand we would like to test its potential by applying it to the\nproblem of distributing UDDI.\nIn the next section, we provide a brief overview of grid\ninformation services, UDDI and its limitations, which is followed\nby an overview of DHTs in Section 3. Section 4 describes our\nproposed architecture with details on use cases. In Section 5, we\nArticle 2\ndescribe our current implementation, followed by our findings in\nSection 6. Section 7 discusses the related work in this area and\nSection 8 contains our concluding remarks.\n2. BACKGROUND\n2.1 Grid Service Discovery\nGrid computing is based on standards which use web services\ntechnology. In the architecture presented in [6], the service\ndiscovery function is assigned to a specialized Grid service called\nRegistry. The implementation of the web service version of the\nMonitoring and Discovery Service (WS MDS), also known as the\nMDS4 component of the Globus Toolkit version 4 (GT4),\nincludes such a registry in the form of the Index service Resource\nand service properties are collected and indexed by this service.\nIts basic function makes it similar to UDDI registry. To attain\nscalability, Index services from different Globus containers can\nregister with each other in a hierarchical fashion to aggregate data.\nThis approach for attaining scalability works best in hierarchical\nVirtual Organizations (VO), and expanding a search to find\nsufficient number of matches involves traversing the hierarchy.\nSpecifically, this approach is not a good match for systems that try\nto exploit the convergence of grid and peer-to-peer computing [5].\n2.2 UDDI\nBeyond grid computing, the problem of service discovery needs to\nbe addressed more generally in the web services community.\nAgain, scalability is a major concern since millions of buyers\nlooking for specific services need to find all the potential sellers\nof the service who can meet their needs. Although there are\ndifferent ways of doing this, the web services standards\ncommittees address this requirement through a specification\ncalled UDDI (Universal Description, Discovery, and Integration).\nA UDDI registry enables a business to enter three types of\ninformation in a UDDI registry - white pages, yellow pages and\ngreen pages. UDDI\"s intent is to function as a registry for services\njust as the yellow pages is a registry for businesses. Just like in\nYellow pages, companies register themselves and their services\nunder different categories. In UDDI, White Pages are a listing of\nthe business entities. Green pages represent the technical\ninformation that is necessary to invoke a given service. Thus, by\nbrowsing a UDDI registry, a developer should be able to locate a\nservice and a company and find out how to invoke the service.\nWhen UDDI was initially offered, it provided a lot of potential.\nHowever, today we find that UDDI has not been widely deployed\nin the Internet. In fact, the only known uses of UDDI are what are\nknown as private UDDI registries within an enterprise\"s\nboundaries. The readers can refer to [7] for a recent article that\ndiscusses the shortcomings of UDDI and the properties of an ideal\nservice registry. Improvement of the UDDI standard is continuing\nin full force and UDDI version 3 (V3) was recently approved as\nan OASIS Standard. However, UDDI today has issues that have\nnot been addressed, such as scalability and autonomy of\nindividual registries.\nUDDI V3 provides larger support for multi-registry environments\nbased on portability of keys By allowing keys to be re-registered\nin multiple registries, the ability to link registries in various\ntopologies is effectively enabled. However, no normative\ndescription of these topologies is provided in the UDDI\nspecification at this point. The improvements within UDDI V3\nthat allow support for multi-registry environments are significant\nand open the possibility for additional research around how \nmultiregistry environments may be deployed. A recommended\ndeployment scenario proposed by the UDDI V3.0.2 Specification\nis to use the UDDI Business Registries as root registries, and it is\npossible to enable this using our solution.\n2.3 Distributed Hash Tables\nA Distributed Hash Table (DHT) is a peer-to-peer (P2P)\ndistributed system that forms a structured overlay allowing more\nefficient routing than the underlying network. It maintains a\ncollection of key-value pairs on the nodes participating in this\ngraph structure. For our deployment, a key is the hash of a\nkeyword from a service name or description. There will be\nmultiple values for this key, one for each service containing the\nkeyword. Just like any other hash table data structure, it provides\na simple interface consisting of put() and get() operations. This\nhas to be done with robustness because of the transient nature of\nnodes in P2P systems. The value stored in the DHT can be any\nobject or a copy or reference to it. The DHT keys are obtained\nfrom a large identifier space. A hash function, such as MD5 or\nSHA-1, is applied to an object name to obtain its DHT key. Nodes\nin a DHT are also mapped into the same identifier space by\napplying the hash function to their identifier, such as IP address\nand port number, or public key. The identifier space is assigned\nto the nodes in a distributed and deterministic fashion, so that\nrouting and lookup can be performed efficiently. The nodes of a\nDHT maintain links to some of the other nodes in the DHT. The\npattern of these links is known as the DHT\"s geometry. For\nexample, in the Bamboo DHT [11], and in the Pastry DHT [8] on\nwhich Bamboo is based, nodes maintain links to neighboring\nnodes and to other distant nodes found in a routing table. The\nrouting table entry at row i and column j, denoted Ri[j], is another\nnode whose identifier matches its own in first i digits, and whose\n(i + 1)st digit is j. The routing table allows efficient overlay\nrouting. Bamboo, like all DHTs, specifies algorithms to be\nfollowed when a node joins the overlay network, or when a node\nfails or leaves the network The geometry must be maintained even\nwhen this rate is high. To attain consistent routing or lookup, a\nDHT key must be routed to the node with the numerically closest\nidentifier. For details of how the routing tables are constructed\nand maintained, the reader is referred to [8, 11].\n3. PROPOSED ARCHITECTURE OF DHT\nBASED UDDI REGISTRY HIERARCHIES\nAs mentioned earlier, we propose to build a distributed UDDI\nsystem on top of a DHT infrastructure. This choice is primarily\nmotivated by the simplicity of the put/get abstraction that DHTs\nprovide, which is powerful enough for the task at hand, especially\nsince we plan to validate our approach with an implementation\nrunning on PlanetLab [9]. A secondary motivation is to\nunderstand deployment issues with DHT based systems. Several\napplications have been built as overlays using DHTs, such as\ndistributed file storage, databases, publish-subscribe systems and\ncontent distribution networks. In our case, we are building a DHT\nbased overlay network of UDDI registries, where the DHT acts as\na rendezvous network that connects multiple registries. In the\ngrid computing scenario, an overlay network of multiple UDDI\nregistries seems to an interesting alternative to the UDDI public\nArticle 2\nregistries currently maintained by Microsoft, IBM, SAP and NTT.\nIn addition, our aim is to not change any of the UDDI interfaces\nfor clients as well as publishers.\nFigure 1 highlights the proposed architecture for the DHT based\nUDDI Registry framework. UDDI nodes are replicated in a UDDI\nregistry as per the current UDDI standard. However, each local\nregistry has a local proxy registry that mediates between the local\nUDDI registry and the DHT Service. The DHT service is the glue\nthat connects the Proxy Registries together and facilitates\nsearching across registries.\nFigure 1: DUDE Architecture\nService information can be dispersed to several UDDI registries to\npromote scalability. The proxy registry publishes, performs\nqueries and deletes information from the dispersed UDDI\nregistries. However, the scope of the queries is limited to relevant\nregistries. The DHT provides information about the relevant\nregistries. The core idea in the architecture is to populate DHT\nnodes with the necessary information from the proxies which\nenables easy and ubiquitous searching when queries are made.\nWhen a new service is added to a registry, all potential search\nterms are hashed by the proxy and used as DHT keys to publish\nthe service in the DHT. The value stored for this service uniquely\nidentifies the service, and includes the URL of a registry and the\nunique UDDI key of the service in that registry. Similarly when\nqueries arrive, they are parsed and a set of search terms are\nidentified. These search terms are hashed and the values stored\nwith those hash values are retrieved from the DHT. Note that a\nproxy does not need to know all DHT nodes; it needs to know just\none DHT node (this is done as part of the bootstrapping process)\nand as described in Section 2.3, this DHT node can route the\nquery as necessary to the other nodes on the DHT overlay. We\ndescribe three usage scenarios later that deal with adding a new\nlocal registry, inserting a new service, and querying for a service.\nFurthermore, the DHT optimizes the UDDI query mechanism.\nThis process becomes a lookup using a UDDI unique key rather\nthan a query using a set of search parameters. This key and the\nURL of the registry are obtained by searching initially in the\nDHT. The DHT query can return multiple values for matching\nservices, and in each of the matching registries, the proxy\nperforms lookup operations.\nThe service name is used as a hash for inserting the service\ninformation. The service information contains the query URL and\nunique UDDI key for the registry containing the service. There\ncould be multiple registries associated with a given service. The\nservice information conforms to the following schema.\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\nelementFormDefault=\"qualified\"\nattributeFormDefault=\"unqualified\">\n<xs:element name=\"registries\">\n<xs:annotation>\n<xs:documentation>Service Information</xs:documentation>\n</xs:annotation>\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"registry\" maxOccurs=\"unbounded\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"name\"/>\n<xs:element name=\"key\" maxOccurs=\"unbounded\"/>\n</xs:sequence>\n\u00e2\u20ac\u00a6\n</xs:schema>\nThere can be multiple proxy UDDI registries in this architecture.\nThe advantage of this is to introduce distributed interactions\nbetween the UDDI clients and registries. Organization can also\ndecide what information is available from the local registries by\nimplementing policies at the proxy registry.\n3.1 Sequence of Operations\nIn this section, we demonstrate what the sequence of operations\nshould be for three crucial scenarios - adding a new local registry,\ninserting a new service and querying a service. Other operations\nlike deleting a registry, deleting a service, etc. are similar and for\nthe sake of brevity are omitted here.\nFigure 2: Sequence Diagram- Add New Local Registry\nAdd a New Local UDDI Registry\nFigure 2 contains a sequence diagram illustrating how a new\nUDDI registry is added to the network of UDDI registries. The\nnew registry registers itself with its proxy registry. The proxy\nregistry in turn queries the new registry for all services that it has\nUDDI Local Registry UDDI Local Registry\nUDDI Local Registry\nProxy Registry\nDHT Based Distribution\nProxy Registry\nProxy Registry\nArticle 2\nstored in its databases and in turn registers each of those entries\nwith the DHT.\nFigure 3: Sequence Diagram - Add New Service\nAdd a New Service\nThe use case diagram depicted in Error! Reference source not\nfound. highlights how a client publishes a new service to the\nUDDI registry. In order to interact with the registry a client has to\nknow how to contact its local proxy registry. It then publishes a\nservice with the proxy registry which in turn publishes the service\nwith the local UDDI registry and receives the UDDI key of the\nregistry entry. Then new key-value pairs are published in the\nDHT, where each key is obtained by hashing a searchable\nkeyword of the service and the value consists of the query URL of\nthe registry and the UDDI key.\nFigure 4: Sequence Diagram - Query for a Service\nQuery a Service\nFigure 4 shows how a client queries the UDDI registry for a\nservice. Once again, the client needs to know how to contact its\nlocal proxy registry and invokes the query service request. The\nproxy registry in turn contacts one of the DHT nodes to determine\nDHT queries using the search terms.\nAs explained earlier in the context of Figure 1, multiple values\nmight be retrieved from the DHT. Each value includes the query\nURL of a registry, and the unique UDDI key of a matching\nservice in that registry. The proxy then contacts the matching\nregistries and waits for the response of lookup operations using\nthe corresponding UDDI keys. Upon receiving the responses, the\nproxy registry collates all responses and returns the aggregated set\nof services to the client.\nWe will now illustrate these operations using an example.\nConsider a client contacting its local proxy to publish a service\ncalled Computer Accessories. The proxy follows the steps in\nFigure 3 to add the service to UDDI 1 registry, and also publishes\ntwo entries in the DHT. The keys of these entries are obtained by\nhashing the words computer and accessories respectively.\nBoth entries have the same value consisting of the query URL of\nthis registry and the unique UDDI key returned by the registry for\nthis service. Next we consider another client publishing a service\ncalled Computer Repair through its proxy to UDDI 2 registry. A\nsimilar process results in 2 more entries being added to the DHT.\nRecall that our DHT deployment can have multiple entries with\nthe same key. If we follow the steps in Figure 4 for a client\nsending a query to its proxy using the word computer, we see\nthat the DHT is queried with the hash of the word computer as\nkey. This retrieves the query URL and respective UDDI keys of\nboth services mentioned before in this example. The proxy can\nthen do a simple lookup operation at both UDDI 1 and 2\nregistries. It is clear that as the number of UDDI registries and\nclients increases, this process of lookup at only relevant UDDI\nregistries is more scalable that doing a full search using the word\ncomputer at all UDDI registries.\n4. IMPLEMENTATION\nIn this section, we describe our implementation which is currently\ndeployed on PlanetLab [9]. PlanetLab is an open, globally\ndistributed platform for developing, deploying, and accessing\nnetwork services. It currently has 527 machines, hosted by 249\nsites, spanning over 25 countries. PlanetLab machines are hosted\nby research/academic institutions as well as industrial companies.\nFrance Telecom and HP are two of the major industry supporters\nfor PlanetLab. Every PlanetLab host machine is connected to the\nInternet and runs a common software package including a Linux\nbased operating system that supports server virtualization. Thus\nthe users can develop and experiment with new services under\nreal-world conditions. The advantage of using PlanetLab is that\nwe can test the DUDE architecture under real-world conditions\nwith a large scale geographically dispersed node base.\nDue to the availability of jUDDI, an open source UDDI V2\nregistry (http://www.juddi.org) and a lack of existing readily\navailable UDDI V3 registry, a decision to use UDDI V2 was\nmade. The standardization of UDDI V3 is recent and we intend to\nextend this work to support UDDI V3 and subsequent versions in\nthe future. The proxy registry is implemented by modifying the\njUDDI source to enable publishing, querying and deleting service\ninformation from a DHT. Furthermore, it also allows querying\nmultiple registries and collating the response using UDDI4j [13].\nFor the DHT implementation, we use the Bamboo DHT code\n[11]. The Bamboo DHT allows multiple proxy registries to\npublish and delete service information from their respective UDDI\nregistries, as well as to query for services from all the registries.\nThe proxy uses the service name as input to the DHT\"s hash\nArticle 2\nfunction to get the DHT key. The value that is stored in the DHT\nusing this key is the URI of the registry along with the UDDI key\nof the service. This ensures that when the proxy registry queries\nfor services with a certain name, it gets back the URI and UDDI\nkeys for matching entries. Using these returned results, the proxy\ncan do fast lookup operations at the respective UDDI registries.\nThe UDDI keys make it unnecessary to repeat the search at the\nUDDI registries with the service name.\nWe have so far described the process of exact match on service\nname. However there are additional types of search that must be\nsupported. Firstly, the search requested could be case-insensitive.\nTo support that, the proxy registry has to publish the same service\nonce using the name exactly as entered in the UDDI registry, and\nonce with the name converted to all lower-case letters. To do a\ncase-insensitive search, the proxy registry simply has to convert\nthe query string into lower-case letters. Secondly, the user could\nquery based on the prefix of a service name. Indeed, this is the\ndefault behavior of search in UDDI. In other words, a wildcard is\nimplicit at the end of the service name being searched. To support\nthis efficiently in the DHT, our proxy registries have to take\nprefixes of the service name of varying length and publish the\nURI and UDDI key multiple times, once using each prefix. For\nexample, the prefix sizes chosen in one deployment might be 5,\n10, 15 and 20 characters. If a search for the first 12 characters of a\nservice name is submitted, the proxy registry will query the DHT\nwith the first 10 characters of the search string, and then refine the\nsearch result to ensure that the match extends to the 12th\ncharacter.\nIf the search string has less than 5 characters, and the search is for\na prefix rather than an exact match, the DHT cannot be of any\nhelp, unless every service is published in the DHT with prefix of\nlength 0. Using this null prefix will send a copy of every\nadvertised service to the DHT node to which the hash of the null\nprefix maps. Since this can lead to load-imbalance, a better\nsolution might be to use the DHT only to get a list of all UDDI\nregistries, and send the search to all of them in the locations to be\nsearched. Thirdly, the service name being searched can be a\nregular expression, such as one with embedded wildcard\ncharacters. For example, a search for Garden%s should match\nboth Garden Supplies and Gardening Tools. This will be\ntreated similarly to the previous case as the DHT has to be queried\nwith the longest available prefix. The results returned have to be\nrefined to ensure that the regular expression matches.\nFigure 5 shows the network diagram for our implementation.\nThere are two proxy UDDI and juddi registry pairs. Consider a\nclient which contacts the UDDI proxy on grouse.hpl.hp.com. The\nproxy does a lookup of the DHT using the query string or a prefix.\nThis involves contacting one of the DHT nodes, such as \npli1-br3.hpl.hp.com, which serves as the gateway to the DHT for\ngrouse.hpl.hp.com, based on the latter\"s configuration file. The\nDHT node may then route the query to one of the other DHT\nnodes which is responsible for the DHT key that the query string\nmaps to. The results of the DHT lookup return to \npli1-br3.hpl.hp.com, which forwards them to grouse.hpl.hp.com. The\nresults may include a few services from each of the juddi\nregistries. So the proxy registry performs the lookup operations at\nboth planetlab1 and planetlab2.rdfrancetelecom.com for their\nrespective entries listed in the search results. The responses to\nthese lookups are collated by the proxy registry and returned to\nthe client.\nFigure 5 Network Diagram\n5. RELATED WORK\nA framework for QoS-based service discovery in grids has been\nproposed in [18]. UDDIe, an extended UDDI registry for\npublishing and discovering services based on QoS parameters, is\nproposed in [19]. Our work is complementary since we focus on\nhow to federate the UDDI registries and address the scalability\nissue with UDDI. The DUDE proxy can publish the service\nproperties supported by UDDIe in the DHT and support range\nqueries using techniques proposed for such queries on DHTs.\nThen we can deliver the scalability benefits of our current solution\nto both UDDI and UDDIe registries. Discovering services meeting\nQoS and price requirements has been studied in the context of a\ngrid economy, so that grid schedulers can use various market\nmodels such as commodity markets and auctions. The Grid\nMarket Directory [20] was proposed for this purpose.\nIn [12], the authors present an ontology-based matchmaker.\nResource and request descriptions are expressed in RDF Schema,\na semantic markup language. Matchmaking rules are expressed in\nTRIPLE, a language based on Horn Logic. Although our current\nimplementation focuses on UDDI version 2, in future we will\nconsider semantic extensions to UDDI, WS-Discovery [16] and\nother Grid computing standards such as Monitoring and\nDiscovery Service (MDS) [10]. So the simplest extension of our\nwork could involve using the DHT to do an initial syntax-based\nsearch to identify the local registries that need to be contacted.\nThen the Proxy Registry can contact these registries, which do\nsemantic matchmaking to identify their matches, which are then\nmerged at the Proxy Registry and returned to the client.\nThe convergence of grid and P2P computing has been explored in\n[5]. GridVine [2] builds a logical semantic overlay on top of a\nphysical layer consisting of P-Grid [1], a structured overlay based\non distributed search tree that uses prefix-based routing and\nchanges the overlay paths as part of the network maintenance\nprotocol to adapt to load in different parts of the keyspace. A\nfederated UDDI service [4] has been built on top of the PlanetP\n[3] publish-subscribe system for unstructured P2P communities.\nThe focus of this work has been on the manageability of the\nfederated service. The UDDI service is treated as an application\nArticle 2\nservice to be managed in their framework. So they do not address\nthe issue of scalability in UDDI, and instead use simple\nreplication. In [21], the authors describe a UDDI extension (UX)\nsystem that launches a federated query only if locally found\nresults are not adequate. While the UX Server is positioned as an\nintermediary similarly to the UDDI Proxy described in our DUDE\nframework, it focuses more on the QoS framework and does not\nattempt to implement a seamless federation mechanism such as\nour DHT based approach. In [22] D2HT describes a discovery\nframework built on top of DHT. However, we have chosen to use\nUDDI on top of DHT. D2HT have used (Agent Management\nSystem) AMS/ (Directory Facilitator) DF on top of DHT.\n6. CONCLUSIONS AND FUTURE WORK\nIn this paper, we have described a distributed architecture to\nsupport large scale discovery of web-services. Our architecture\nwill enable organizations to maintain autonomous control over\ntheir UDDI registries and at the same time allowing clients to\nquery multiple registries simultaneously. The clients are oblivious\nto the transparent proxy approach we have adopted and get richer\nand more complete response to their queries. Based on initial\nprototype testing, we believe that DUDE architecture can support\neffective distribution of UDDI registries thereby making UDDI\nmore robust and also addressing its scaling issues. The paper has\nsolved the scalability issues with UDDI but does not preclude the\napplication of this approach to other service discovery\nmechanisms. An example of another service discovery mechanism\nthat could benefit from such an approach is Globus Toolkit\"s\nMDS. Furthermore, we plan to investigate other aspects of grid\nservice discovery that extend this work. Some of these aspects\ninclude the ability to subscribe to resource/service information,\nthe ability to maintain soft states and the ability to provide a\nvariety of views for various different purposes. In addition, we\nplan to revisit the service APIs for a Grid Service Discovery\nsolution leveraging the available solutions and specifications as\nwell as the work presented in this paper.\n7. REFERENCES\n[1] P-grid: A self-organizing structured p2p system. K.\nAberer, P. Cudr_e-Mauroux, A. Datta, Z. Despotovic, M.\nHauswirth, M. Punceva, and R. Schmidt. ACM SIGMOD\nRecord, 32(3), 2003.\n[2] GridVine: Building Internet-Scale Semantic Overlay\nNetworks Karl Aberer, Philippe Cudre-Mauroux, Manfred\nHauswirth, and Tim van Pelt. Proceedings, 3rd ISWC 2004,\nHiroshima, Japan.\n[3] \"PlanetP: Using Gossiping to Build Content Addressable\nPeer-to-Peer Information Sharing Communities\". F. M.\nCuenca-Acuna, C. Peery, R. P. Martin, and T. D. Nguyen. In\nProceedings of 12th Intl Symposium on HPDC, June 2003.\n[4] Self-Managing Federated Services. Francisco Matias\nCuenca-Acuna and Thu D. Nguyen. In Proceedings of 23rd\nIEEE International SRDS, 2004, Florianpolis, BRAZIL.\n[5] On Death, Taxes, and the Convergence of P2P and Grid\nComputing. Ian Foster and Adriana Iamnitchi. In\nProceedings of the 2nd IPTPS 2003.\n[6] The Physiology of the Grid: An Open Grid Services\nArchitecture for Distributed Systems Integration, I. Foster,\nC. Kesselman, J. M. Nick and S. Tuecke. Presented to OGSI\nWG, Global Grid Forum, June 22, 2002. Available at\nhttp://www.globus.org/alliance/publications/papers.php\n[7] Was the Universal Service Registry a Dream?, Fred\nHartman and Harris Reynolds, In the Web Services Journal,\nDec 2, 2004.\n[8] Pastry: Scalable, distributed object location and routing for\nlarge scale peer-to-peer systems. A. Rowstron and P.\nDruschel. In Proc. of IFIP/ACM Middleware, Nov. 2001\n[9] http://www.planet-lab.org\n[10] Grid information services for distributed resource sharing.\nK. Czajkowski, S. Fitzgerald, I. Foster, and C. Kesselman.\nProceedings of the IEEE HPDC-10, 2001.\n[11] Handling churn in a DHT. S. Rhea, D. Geels, T. Roscoe,\nand J. Kubiatowicz. Proceedings of the USENIX Annual\nTechnical Conference, June 2004.\n[12] Ontology-based Resource Matching in the Grid - The Grid\nMeets the Semantic Web, Hongsuda Tangmunarunkit,\nStefan Decker, Carl Kesselman. In Proceedings of the\nSecond ISWC (2003), Miami, Florida.\n[13] UDDI4j Java Class Library: \nhttp://www124.ibm.com/developerworks/oss/uddi4j/\n[14] UDDI V2 specification: Available at http://uddi.org/\n[15] UDDI V3.0.2 specification: http://uddi.org/\n[16] Web Services Dynamic Discovery (WS-Discovery)\nSpecification, February 2004.\nhttp://msdn.microsoft.com/ws/2004/02/discovery\n[17] Information Services (MDS): Key Concepts.\nhttp://www.globus.org/toolkit/docs/4.0/info/key/\n[18] G- QoSM: Grid Service Discovery using QoS Properties,\nR J. Al-Ali, O.F. Rana, D.W. Walker, S. Jha and S. Sohail.\nJournal of Computing and Informatics (Special issue on Grid\nComputing), Ed: Domenico LaForenza, Vol. 21, No. 4, pp.\n363-382, 2002.\n[19] UDDIe: An Extended Registry for Web Services, A.\nShaikhAli, O.F. Rana, R. Al-Ali and D.W. Walker,\nWorkshop on Service Oriented Computing: Models,\nArchitectures and Applications at SAINT Conference,\nFlorida, US, January 2003. IEEE Computer Society Press.\n[20] A Market-Oriented Grid Directory Service for Publication\nand Discovery of Grid Service Providers and their Services,\nJ. Yu, S. Venugopal and R. Buyya, Journal of\nSupercomputing, Kluwer Academic Publishers, USA, 2005.\n[21] Chen Zhou, Liang-Tien Chia, Bilhanan Silverajan, Bu-Sung\nLee: UX - An Architecture Providing Qo\"S-Aware and\nFederated Support for UDDI. ICWS 2003: 171-176.\n[22] Kee-Hyun Choi, Ho-Jin Shin, Dong-Ryeol Shin, Service\nDiscovery Supporting Open Scalability Using \nFIPACompliant Agent Platform for Ubiquitous Networks, Lecture\nNotes in Computer Science, Volume 3482, Jan 2005.\nArticle 2\n": ["grid service discovery", "uddi", "distributed web-service discovery architecture", "dht based uddi registry hierarchy", "deployment issue", "bamboo dht code", "case-insensitive search", "query", "longest available prefix", "qos-based service discovery", "autonomous control", "uddi registry", "scalability issue", "soft state", "dht", "web service", "grid computing", "md", "discovery", ""]}