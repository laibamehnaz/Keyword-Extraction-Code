{"Rewards-Based Negotiation for Providing Context\nInformation\nBing Shi\nState Key Laboratory for Novel\nSoftware Technology\nNanJing University\nNanJing, China\nshibing@ics.nju.edu.cn\nXianping Tao\nState Key Laboratory for Novel\nSoftware Technology\nNanJing University\nNanJing, China\ntxp@ics.nju.edu.cn\nJian Lu\nState Key Laboratory for Novel\nSoftware Technology\nNanJing University\nNanJing, China\nlj@nju.edu.cn\nABSTRACT\nHow to provide appropriate context information is a \nchallenging problem in context-aware computing. Most existing\napproaches use a centralized selection mechanism to decide\nwhich context information is appropriate. In this paper, we\npropose a novel approach based on negotiation with rewards\nto solving such problem. Distributed context providers \nnegotiate with each other to decide who can provide context\nand how they allocate proceeds. In order to support our\napproach, we have designed a concrete negotiation model\nwith rewards. We also evaluate our approach and show that\nit indeed can choose an appropriate context provider and\nallocate the proceeds fairly.\nCategories and Subject Descriptors\nC.2.4 [Distributed Systems]: Distributed \napplicationsproviding context information\nGeneral Terms\nContext\n1. INTRODUCTION\nContext-awareness is a key concept in pervasive \ncomputing. Context informs both recognition and mapping by \nproviding a structured, unified view of the world in which the\nsystem operates [1]. Context-aware applications exploit \ncontext information, such as location, preferences of users and\nso on, to adapt their behaviors in response to changing \nrequirements of users and pervasive environments. However,\none specific kind of context can often be provided by \ndifferent context providers (sensors or other data sources of \ncontext information) with different quality levels. For example,\nin a smart home, thermometer A\"s measurement precision\nis 0.1 \u00e2\u2014\u00a6\nC, and thermometer B\"s measurement precision is\n0.5 \u00e2\u2014\u00a6\nC. Thus A could provide more precise context \ninformation about temperature than B. Moreover, sometimes\ndifferent context providers may provide conflictive context\ninformation. For example, different sensors report that the\nsame person is in different places at the same time. \nBecause context-aware applications utilize context information\nto adapt their behaviors, inappropriate context information\nmay lead to inappropriate behavior. Thus we should design\na mechanism to provide appropriate context information for\ncurrent context-aware applications.\nIn pervasive environments, context providers considered\nas relatively independent entities, have their own interests.\nThey hope to get proceeds when they provide context \ninformation. However, most existing approaches consider context\nproviders as entities without any personal interests, and use\na centralized arbitrator provided by the middleware to \ndecide who can provide appropriate context. Thus the burden\nof the middleware is very heavy, and its decision may be\nunfair and harm some providers\" interests. Moreover, when\nsuch arbitrator is broken down, it will cause serious \nconsequences for context-aware applications. In this paper, we\nlet distributed context providers themselves decide who \nprovide context information. Since high reputation could help\nproviders get more opportunities to provide context and get\nmore proceeds in the future, providers try to get the right\nto provide good context to enhance their reputation. In\norder to get such right, context providers may agree to share\nsome portion of the proceeds with its opponents. Thus \ncontext providers negotiate with each other to reach agreement\non the issues who can provide context and how they allocate\nthe proceeds. Our approach has some specific advantages:\n1. We do not need an arbitrator provided by the \nmiddleware of pervasive computing to decide who provides\ncontext. Thus it will reduce the burden of the \nmiddleware.\n2. It is more reasonable that distributed context providers\ndecide who provide context, because it can avoid the\nserious consequences caused by a breakdown of a \ncentralized arbitrator.\n3. It can guarantee providers\" interests and provide fair\nproceeds allocation when providers negotiate with each\nother to reach agreement on their concerned problems.\n4. This approach can choose an appropriate provider \nautomatically. It does not need any applications and\nusers\" intervention.\nThe negotiation model we have designed to support our \napproach is also a novel model in negotiation domain. This\nmodel can help negotiators reach agreement in the present\nnegotiation process by providing some guarantees over the\noutcome of next negotiation process (i.e. rewards). \nNegotiator may find current offer and reward worth more than\ncounter-offer which will delay the agreement, and accepts\ncurrent offer and reward. Without the reward, it may find\ncurrent offer worth less than the counter-offer, and proposes\nits counter-offer. It will cost more time to reach agreement.\nIt also expands the negotiation space considered in present\nnegotiation process, and therefore provides more \npossibilities to find better agreement.\nThe remainder of this paper is organized as follows. \nSection 2 presents some assumptions. Section 3 describes our\napproach based on negotiation detailedly, including \nutility functions, negotiation protocol and context providers\"\nstrategies. Section 4 evaluates our approach. In section 5\nwe introduce some related work and conclude in section 6.\n2. SOME ASSUMPTIONS\nBefore introducing our approach, we would like to give\nsome assumptions:\n1. All context providers are well-meaning and honest.\nDuring the negotiation process, they exchange \ninformation honestly. Rewards confirmed in this \nnegotiation process will be fulfilled in the next negotiation\nprocess.\n2. All providers must guarantee the system\"s interests.\nThey should provide appropriate context information\nfor current applications. After guaranteeing the \nsystem\"s interest, they can try to maximize their own \npersonal interests. The assumption is reasonable, because\nwhen an inappropriate context provider gets the right\nto provide bad context, as a punishment, its \nreputation will decrease, and the proceeds is also very small.\n3. As context providers are independent, factors which\ninfluence their negotiation stance and behavior are \nprivate and not available to their opponents. Their utility\nfunctions are also private.\n4. Since the negotiation takes place in pervasive \nenvironments, time is a critical factors. The current \napplication often hopes to get context information as quickly\nas possible, so the time cost to reach agreement should\nbe as short as possible. Context providers often have\nstrict deadline by when the negotiation must be \ncompleted.\nAfter presenting these assumptions, we will propose our \napproach based on negotiation with rewards in the next \nsection.\n3. OUR APPROACH\nIn the beginning, we introduce the concepts of reputation\nand Quality of Context (QoC) attributes. Both will be used\nin our approach. Reputation of an agent is a perception \nregarding its behavior norms, which is held by other agents,\nbased on experiences and observation of its past actions [7].\nHere agent means context provider. Each provider\"s \nreputation indicates its historical ability to provide appropriate\ncontext information. Quality of Context (QoC) attributes\ncharacterize the quality of context information. When \napplications require context information, they should specify\ntheir QoC requirements which express constraints of QoC\nattributes. Context providers can specify QoC attributes\nfor the context information they deliver. Although we can\ndecide who provides appropriate context according to QoC\nrequirements and context providers\" QoC information, \napplications\" QoC requirements might not reflect the actual\nquality requirements. Thus, in addition to QoC, reputation\ninformation of context providers is another factor affecting\nthe decision who can provide context information.\nNegotiation is a process by which a joint decision is made\nby two or more parties. The parties first verbalize \ncontradictory demands and then move towards agreement by a \nprocess of concession making or search for new alternatives [2].\nIn pervasive environments, all available context providers\nnegotiate with each other to decide who can provide \ncontext information. This process will be repeated because a\nkind of context is needed more than one time. \nNegotiation using persuasive arguments (such as threats, promises\nof future rewards, and appeals) allows negotiation parties\nto influence each others\" preferences to reach better deals\neffectively and efficiently [9]. This pervasive negotiation is\neffective in repeated interaction because arguments can be\nconstructed to directly impact future encounters. In this\npaper, for simplicity, we let negotiation take place between\ntwo providers. We extend Raiffa\"s basic model for bilateral\nnegotiation [8], and allow negotiators to negotiate with each\nother by exchanging arguments in the form of promises of \nfuture rewards or requests for future rewards. Rewards mean\nsome extra proceeds in the next negotiation process. They\ncan influence outcomes of current and future negotiation.\nIn our approach, as described by Figure 1, the current\napplication requires Context Manager to provide a specific\ntype of context information satisfying QoC requirements.\nContext Manager finds that provider A and B can provide\nsuch kind of context with different quality levels. Then the\nmanager tells A and B to negotiate to reach agreement on\nwho can provide the context information and how they will\nallocate the proceeds. Both providers get reputation \ninformation from the database Reputation of Context Providers\nand QoC requirements, and then negotiate with each other\naccording to our negotiation model. When negotiation is\ncompleted, the chosen provider will provide the context \ninformation to Context Manager, and then Context Manager\ndelivers such information to the application and also stores\nit in Context Knowledge Base where current and historical\ncontext information is stored. The current application gives\nthe feedback information about the provided context, and\nthen Context Manager will update the chosen provider\"s \nreputation information according to the feedback information.\nContext Manager also provides the proceeds to providers\naccording to the feedback information and the time cost\non negotiation. In the following parts of this section, we\ndescribe our negotiation model in detail, including context\nproviders\" utility functions to evaluate offers and rewards,\nnegotiation protocol, and strategies to generate offers and\nrewards.\nContext\nKnowledge Base\nReputation of\nContext Providers\nContext\nprovider A\nContext\nManager\nNegotiate\nApplication\"s\nQoC requirements\nand feedback\nProvide QoC requirements and\nproceeds\nManage Context\nProvide Context\nGetreputation\nGetreputation\nUpdate reputation information\naccording to feedback\nContext\nprovider B\nFigure 1: Negotiate to provide appropriate context\ninformation.\n3.1 Utility function\nDuring the negotiation process, one provider proposes an\noffer and a reward to the other provider. An offer is noted\nas o = (c, p): c indicates the chosen context provider and its\ndomain is Dc (i.e. the two context providers participating\nin the negotiation); p means the proposer\"s portion of the\nproceeds, and its domain is Dp = [0,1]. Its opponent\"s \nportion of the proceeds is 1\u00e2\u02c6\u2019p. The reward ep\"s domain is Dep\n= [-1,1], and |ep| means the extra portion of proceeds the\nproposer promises to provide or requests in the next \nnegotiation process. ep < 0 means the proposer promises to provide\nreward, ep > 0 means the proposer requests reward and ep\n=0 means no reward. The opponent evaluates the offer and\nreward to decide to accept them or propose a counter-offer\nand a reward. Thus context providers should have utility\nfunctions to evaluate offers and rewards.\nTime is a critical factor, and only at times in the set\nT = {0, 1, 2, . . . tdeadline}, context providers can propose\ntheir offers. The set O include all available offers. \nContext provider A\"s utility function of the offer and reward at\ntime t UA\n: O \u00c3\u2014 Dep \u00c3\u2014 T \u00e2\u2020\u2019 [\u00e2\u02c6\u20191, 1] is defined as:\nUA(o,ep,t)=(wA\n1 \u00c2\u00b7UA\nc (c)+wA\n2 \u00c2\u00b7UA\np (p)+wA\n3 \u00c2\u00b7UA\nep(ep))\u00c2\u00b7\u00ce\u00b4A(t) (1)\nSimilarly, the utility function of A\"s opponent (i.e. B) can\nbe defined as:\nUB(o,ep,t)=(wB\n1 \u00c2\u00b7UB\nc (c)+wB\n2 \u00c2\u00b7UB\np (1\u00e2\u02c6\u2019p)+wB\n3 \u00c2\u00b7UB\nep(\u00e2\u02c6\u2019ep))\u00c2\u00b7\u00ce\u00b4B(t)\nIn (1), wA\n1 , wA\n2 and wA\n3 are weights given to c, p and ep\nrespectively, and wA\n1 + wA\n2 + wA\n3 =1. Usually, the context\nprovider pays the most attention to the system\"s interests,\npays the least attention to the reward, thus wA\n1 > wA\n2 > wA\n3 .\nUA\nc : Dc \u00e2\u2020\u2019 [\u00e2\u02c6\u20191, 1] is the utility function of the issue who\nprovides context. This function is determined by two \nfactors: the distance between c\"s QoC and current application\"s\nQoC requirements, and c\"s reputation. The two \nnegotiators acquire c\"s QoC information from c, and we use the\napproach proposed in [4] to calculate the distance between\nc\"s QoC and the application\"s Qoc requirements. The \nrequired context has n QoC attributes and let the \napplication\"s wishes for this context be a = (a1, a2 . . . an) (where\nai = means the application\"s indifference to the i-th QoC\nattribute), c\"s QoC attributes cp = (cp1, cp2 . . . cpn) (where\ncpi = means c\"s inability to provide a quantitative value\nfor the i-th QoC attribute). Because numerical distance \nvalues of different properties are combined, e.g. location \nprecision in metres with refresh rate in Hz, thus a standard scale\nfor all dimension is needed. The scaling factors for the QoC\nattributes are s = (s1, s2 . . . sn). In addition, different QoC\nattributes may have different weights: w = (w1, w2 . . . wn).\nThen d = (d1, d2 . . . dn)\ndi = (cpi \u00e2\u02c6\u2019 ai) \u00c2\u00b7 si \u00c2\u00b7 wi\nwhere cpi\u00e2\u02c6\u2019ai = 0 for ai = and cpi\u00e2\u02c6\u2019ai = o(ai) for cpi =\n( o(.) determines the application\"s satisfaction or \ndissatisfaction when c is unable to provide an estimate of a QoC \nattribute, given the value wished for by the application). The\ndistance can be linear distance (1-norm), Euclidean distance\n(2-norm), or the maximum distance (max-norm):\n|d| = |d1| + |d2| + . . . + |dn| (1 \u00e2\u02c6\u2019 norm)\n||d||2 = |d1|2 + |d2|2 + . . . + |dn|2 (2 \u00e2\u02c6\u2019 norm)\n||d||\u00e2\u02c6\u017e = max{|d1|, |d2| . . . |dn|} (max \u00e2\u02c6\u2019 norm)\nThe detail description of this calculation can be found in [4].\nReputation of c can be acquired from the database \nReputation of Context Providers. UA\nc (c) : R \u00c3\u2014 Drep \u00e2\u2020\u2019 [\u00e2\u02c6\u20191, 1] can\nbe defined as:\nUA\nc (c) = wA\nc1 \u00c2\u00b7 UA\nd (d) + wA\nc2 \u00c2\u00b7 UA\nrep(rep)\nwA\nc1 and wA\nc2 are weights given to the distance and \nreputation respectively, and wA\nc1 + wA\nc2 = 1. Drep is the domain\nof reputation information. UA\nd : R \u00e2\u2020\u2019 [0, 1] is a \nmonotonedecreasing function and UA\nrep : Drep \u00e2\u2020\u2019 [\u00e2\u02c6\u20191, 1] is a \nmonotoneincreasing function. UA\np : Dp \u00e2\u2020\u2019 [0, 1] is the utility function\nof the portion of proceeds A will receive and it is also a\nmonotone-increasing function. A\"s utility function of reward\nep UA\nep : Dep \u00e2\u2020\u2019 [\u00e2\u02c6\u20191, 1] is also a monotone-increasing \nfunction and UA\nep(0) = 0. \u00ce\u00b4A : T \u00e2\u2020\u2019 [0, 1] is the time discount\nfunction. It is also a monotone-decreasing function. When\ntime t cost on negotiation increases, \u00ce\u00b4A(t) will decrease, and\nthe utility will also decrease. Thus both negotiators want\nto reach agreement as quickly as possible to avoid loss of\nutility.\n3.2 Negotiation protocol\nWhen provider A and B have got QoC requirements and\nreputation information, they begin to negotiate. They first\nset their reserved (the lowest acceptable) utility which can\nguarantee the system\"s interests and their personal \ninterests. When the context provider finds the utility of an offer\nand a reward is lower than its reserved utility, it will reject\nthis proposal and terminate the negotiation process. The\nprovider who starts the negotiation is chosen randomly. We\nassume A starts the negotiation, and it proposes offer o and\nreward ep to B according to its strategy (see subsection 3.3).\nWhen B receives the proposal from A, it uses its utility \nfunction to evaluate it. If it is lower than its reserved utility, the\nprovider terminates the negotiation. Otherwise, if\nUB(o, ep, t) \u00e2\u2030\u00a5 UB(o , ep , t + 1)\ni.e. the utility of o and ep proposed by A at time t is greater\nthan the utility of offer o\" and reward ep\" which B will \npropose to A at time t + 1, B will accept this offer and reward.\nThe negotiation is completed. However, if\nUB(o, ep, t) < UB(o , ep , t + 1)\nthen B will reject A\"s proposal, and propose its counter-offer\nand reward to A. When A receives B\"s counter-offer and \nreward, A evaluates them using its utility function, and \ncompares the utility with the utility of offer and reward it wants\nto propose to B at time t+2, decides to accept it or give its\ncounter-offer and reward. This negotiation process continues\nand in each negotiation round, context providers concede in\norder to reach agreement. The negotiation will be \nsuccessfully finished when agreement is reached, or be terminated\nforcibly due to deadline or the utility lower than reserved\nutility. When negotiation is forced to be terminated, \nContext manager will ask A and B to calculate UA\nc (A), UA\nc (B),\nUB\nc (A) and UB\nc (B) respectively. If\nUA\nc (A) + UB\nc (A) > UA\nc (B) + UB\nc (B)\nContext Manager let A provide context. If\nUA\nc (A) + UB\nc (A) < UA\nc (B) + UB\nc (B)\nthen B will get the right to provide context information.\nWhen\nUA\nc (A) + UB\nc (A) = UA\nc (B) + UB\nc (B)\nContext Manager will select a provider from A and B \nrandomly. In addition, Context Manager allocates the \nproceeds between the two providers. Although we can select\none provider when negotiation is terminated forcibly, \nhowever, this may lead to the unfair allocation of the proceeds.\nMoreover, more time negotiators cost on negotiation, less\nproceeds will be given. Thus negotiators will try to reach\nagreement as soon as possible in order to avoid unnecessary\nloss.\nWhen the negotiation is finished, the chosen provider \nprovides the context information to Context Manager which\nwill deliver the information to current application. \nAccording to the application\"s feedback information about this \ncontext, Context Manager updates the provider\"s reputation\nstored in Reputation of Context Providers. The provider\"s\nreputation may be enhanced or decreased. In addition,\naccording to the feedback and the negotiation time, \nContext Manager will give proceeds to the provider. Then the\nprovider will share the proceeds with its opponent according\nto the negotiation outcome and the reward confirmed in the\nlast negotiation process. For example, in the last \nnegotiation process A promised to give reward ep (0 \u00e2\u2030\u00a4 ep < 1) to\nB, and A\"s portion of the proceeds is p in current \nnegotiation. Then A\"s actual portion of the proceeds is p \u00c2\u00b7 (1 \u00e2\u02c6\u2019 ep),\nand its opponent B\"s portion of the proceeds is 1\u00e2\u02c6\u2019p+p\u00c2\u00b7ep.\n3.3 Negotiation strategy\nThe context provider might want to pursue the right to\nprovide context information blindly in order to enhance its\nreputation. However when it finally provides bad context\ninformation, its reputation will be decreased and the \nproceeds is also very small. Thus the context provider should\ntake action according to its strategy. The aim of provider\"s\nnegotiation strategy is to determine the best course of action\nwhich will result in a negotiation outcome maximizing its\nutility function (i.e how to generate an offer and a reward).\nIn our negotiation model, the context provider generates its\noffer and reward according to its pervious offer and reward\nand the last one sent by its opponent.\nAt the beginning of the negotiation, context providers \ninitialize their offers and rewards according to their beliefs and\ntheir reserved utility. If context provider A considers that\nit can provide good context and wants to enhance \nreputation, then it will propose that A provides the context \ninformation, shares some proceeds with its opponent B, and\neven promises to give reward. However, if A considers that\nit may provide bad context, A will propose that its \nopponent B provide the context, and require B to share some\nproceeds and provide reward.\nDuring the negotiation process, we assume that at time t\nA proposes offer ot and reward ept to B, at time t + 1, B\nproposes counter-offer ot+1 and reward ept+1 to A. Then at\ntime t + 2, when the utility of B\"s proposal is greater than\nA\"s reserved utility, A gives its response. Now we calculate\nthe expected utility to be conceded at time t +2, we use Cu\nto express the conceded utility.\nCu = (UA(ot, ept, t) \u00e2\u02c6\u2019 UA(ot+1, ept+1, t + 1)) \u00c2\u00b7 cA(t + 2)\n(UA(ot, ept, t) > UA(ot+1, ept+1, t + 1), otherwise, A will \naccept B\"s proposal) where cA : T \u00e2\u2020\u2019 [0, 1] is a \nmonotoneincreasing function. cA(t) indicates A\"s utility concession\nrate1\n. A concedes a little in the beginning before conceding\nsignificantly towards the deadline. Then A generates its \noffer ot+2 = (ct+2, pt+2) and reward ept+2 at time t + 2. The\nexpected utility of A at time t + 2 is:\nUA(ot+2, ept+2, t + 2) = UA(ot, ept, t + 2) \u00e2\u02c6\u2019 Cu\nIf\nUA(ot+2, ept+2, t + 2) \u00e2\u2030\u00a4 UA(ot+1, ept+1, t + 1)\nthen A will accept B\"s proposal (i.e. ot+1 and ept+1). \nOtherwise, A will propose its counter-offer and reward based on\nCu. We assume that Cu is distributed evenly on c, p and\nep (i.e. the utility to be conceded on c, p and ep is 1\n3\nCu\nrespectively). If\n|UA\nc (ct)\u00e2\u02c6\u2019(UA\nc (ct)\u00e2\u02c6\u2019\n1\n3\nCu\n\u00ce\u00b4A(t+2)\n)| \u00e2\u2030\u00a4 |UA\nc (ct+1)\u00e2\u02c6\u2019(UA\nc (ct)\u00e2\u02c6\u2019\n1\n3\nCu\n\u00ce\u00b4A(t+2)\n)|\ni.e. the expected utility of c at time t+2 is UA\nc (ct)\u00e2\u02c6\u2019\n1\n3\nCu\n\u00ce\u00b4A(t+2)\nand it is closer to the utility of A\"s proposal ct at time t,\nthen at time t + 2, ct+2 = ct, else the utility is closer to\nB\"proposal ct+1 and ct+2 = ct+1. When ct+2 is equal to ct,\nthe actual conceded utility of c is 0, and the total concession\nof p and ep is Cu. We divide the total concession of p and ep\nevenly, and get the conceded utility of p and ep respectively.\nWe calculate pt+2 and ept+2 as follows:\npt+2 = (UA\np )\u00e2\u02c6\u20191\n(UA\np (pt) \u00e2\u02c6\u2019\n1\n2\nCu\n\u00ce\u00b4A(t + 2)\n)\nept+2 = (UA\nep)\u00e2\u02c6\u20191\n(UA\nep(ept) \u00e2\u02c6\u2019\n1\n2\nCu\n\u00ce\u00b4A(t + 2)\n)\nWhen ct+2 is equal to ct+1, the actual conceded utility of c\nis |UA\nc (ct+2) \u00e2\u02c6\u2019 UA\nc (ct)|, the total concession of p and ep is\nCu\n\u00ce\u00b4A(t+2)\n\u00e2\u02c6\u2019 |UA\nc (ct+2) \u00e2\u02c6\u2019 UA\nc (ct)|, then:\npt+2 = (UA\np )\u00e2\u02c6\u20191\n(UA\np (pt)\u00e2\u02c6\u2019\n1\n2\n(\nCu\n\u00ce\u00b4A(t + 2)\n\u00e2\u02c6\u2019|UA\nc (ct+2)\u00e2\u02c6\u2019UA\nc (ct)|))\nept+2 = (UA\nep)\u00e2\u02c6\u20191\n(UA\nep(ept)\u00e2\u02c6\u20191\n2\n( Cu\n\u00ce\u00b4A(t+2)\n\u00e2\u02c6\u2019|UA\nc (ct+2)\u00e2\u02c6\u2019UA\nc (ct)|))\nNow, we have generated the offer and reward A will propose\nat time t + 2. Similarly, B also can generate its offer and\nreward.\n1\nFor example, cA(t) = ( t\ntdeadline\n)\n1\n\u00ce\u00b2 (0 < \u00ce\u00b2 < 1)\nUtility function and weight of c, p and ep\nUc, w1 Up, w2 Uep, w3\nA 0.5(1 \u00e2\u02c6\u2019 dA\n500\n) + 0.5repA\n1000\n, 0.6 0.9p, 0.3 0.9ep, 0.1\nB 0.52(1 \u00e2\u02c6\u2019 dB\n500\n) + 0.48repB\n1000\n, 0.5 0.9p, 0.45 0.8ep, 0.05\nTable 1: Utility functions and weights of c, p and ep\nfor each provider\n4. EVALUATION\nIn this section, we evaluate the effectiveness of our \napproach by simulated experiments. Context providers A and\nB negotiate to reach agreement. They get QoC requirements\nand calculate the distance between Qoc requirements and\ntheir QoC. For simplicity, in our experiments, we assume\nthat the distance has been calculated, and dA represents\ndistance between QoC requirements and A\"s QoC, dB \nrepresents distance between QoC requirements and B\"s QoC.\nThe domain of dA and dB is [0,500]. We assume \nreputation value is a real number and its domain is [-1000, 1000],\nrepA represents A\"s reputation value and repB represents\nB\"s reputation value. We assume that both providers pay\nthe most attention to the system\"s interests, and pay the\nleast attention to the reward, thus w1 > w2 > w3, and the\nweight of Ud approximates the weight of Urep. A and B\"s\nutility functions and weights of c, p and ep are defined in\nTable 1. We set deadline tdeadline = 100, and define time\ndiscount function \u00ce\u00b4(t) and concession rate function c(t) of A\nand B as follows:\n\u00ce\u00b4A(t) = 0.9t\n\u00ce\u00b4B(t) = 0.88t\ncA(t) = (\nt\ntdeadline\n)\n1\n0.8\ncB(t) = (\nt\ntdeadline\n)\n1\n0.6\nGiven different values of dA, dB, repA and repB, A and\nB negotiate to reach agreement. The provider that starts\nthe negotiation is chosen at random. We hope that when\ndA dB and repA repB, A will get the right to \nprovide context and get a major portion of the proceeds, and\nwhen \u00e2\u02c6\u2020d = dA \u00e2\u02c6\u2019 dB is in a small range (e.g. [-50,50]) and\n\u00e2\u02c6\u2020rep = repA \u00e2\u02c6\u2019 repB is in a small range (e.g. [-50,50]), A\nand B will get approximately equal opportunities to provide\ncontext, and allocate the proceeds evenly. When dA\u00e2\u02c6\u2019dB\n500\n\napproximates to dA\u00e2\u02c6\u2019dB\n1000\n(i.e. the two providers\" abilities to\nprovide context information are approximately equal), we\nalso hope that A and B get equal opportunities to provide\ncontext and allocate the proceeds evenly.\nAccording to the three situations above, we make three\nexperiments as follows:\nExperiment 1 : In this experiment, A and B negotiate\nwith each other for 50 times, and at each time, we assign \ndifferent values to dA, dB, repA, repB (satisfying dA dB and\nrepA repB) and the reserved utilities of A and B. When\nthe experiment is completed, we find 3 negotiation games\nare terminated due to the utility lower than the reserved\nutility. A gets the right to provide context for 47 times.\nThe average portion of proceeds A get is about 0.683, and\nB\"s average portion of proceeds is 0.317. The average time\ncost to reach agreement is 8.4. We also find that when B\nasks A to provide context in its first offer, B can require and\nget more portion of the proceeds because of its goodwill.\nExperiment 2 : A and B also negotiate with each other\nfor 50 times in this experiment given different values of dA,\ndB, repA, repB (satisfying \u00e2\u02c6\u201950 \u00e2\u2030\u00a4 \u00e2\u02c6\u2020d = dA \u00e2\u02c6\u2019 dB \u00e2\u2030\u00a4 50 and\n\u00e2\u02c6\u201950 \u00e2\u2030\u00a4 \u00e2\u02c6\u2020rep = drep \u00e2\u02c6\u2019drep \u00e2\u2030\u00a4 50) and the reserved utilities of\nA and B. After the experiment, we find that there are 8 \nnegotiation games terminated due to the utility lower than the\nreserved utility. A and B get the right to provide context\nfor 20 times and 22 times respectively. The average portion\nof proceeds A get is 0.528 and B\"s average portion of the\nproceeds is 0.472. The average time cost on negotiation is\n10.5.\nExperiment 3 : In this experiment, A and B also \nnegotiate with each other for 50 times given dA, dB, repA, repB\n(satisfying \u00e2\u02c6\u20190.2 \u00e2\u2030\u00a4 dA\u00e2\u02c6\u2019dB\n500\n\u00e2\u02c6\u2019 dA\u00e2\u02c6\u2019dB\n1000\n\u00e2\u2030\u00a4 0.2) and the reserved\nutilities of A and B. There are 6 negotiation games \nterminated forcibly. A and B get the right to provide context\nfor 21 times and 23 times respectively. The average portion\nof proceeds A get is 0.481 and B\"s average portion of the\nproceeds is 0.519. The average time cost on negotiation is\n9.2.\nOne thing should be mentioned is that except for d, rep,\np and ep, other factors (e.g. weights, time discount \nfunction \u00ce\u00b4(t) and concession rate function c(t)) could also affect\nthe negotiation outcome. These factors should be adjusted\naccording to providers\" beliefs at the beginning of each \nnegotiation process. In our experiments, for similarity, we assign\nvalues to them without any particularity in advance. These\nexperiments\" results prove that our approach can choose an\nappropriate context provider and can provide a relatively\nfair proceeds allocation. When one provider is obviously\nmore appropriate than the other provider, the provider will\nget the right to provide context and get a major portion of\nthe proceeds. When both providers have the approximately\nsame abilities to provide context, their opportunities to \nprovide context are equal and they can get about a half portion\nof the proceeds respectively.\n5. RELATED WORK\nIn [4], Huebscher and McCann have proposed an adaptive\nmiddleware design for context-aware applications. Their\nadaptive middleware uses utility functions to choose the best\ncontext provider (given the QoC requirements of \napplications and the QoC of alternative means of context \nacquisition). In our negotiation model, the calculation of utility\nfunction Uc was inspired by this approach. Henricksen and\nIndulska propose an approach to modelling and using \nimperfect information in [3]. They characterize various types and\nsources of imperfect context information and present a set of\nnovel context modelling constructs. They also outline a \nsoftware infrastructure that supports the management and use\nof imperfect context information. Judd and Steenkiste in [5]\ndescribe a generic interface to query context services \nallowing clients to specify their quality requirements as bounds\non accuracy, confidence, update time and sample interval.\nIn [6], Lei et al. present a context service which accepts\nfreshness and confidence meta-data from context sources,\nand passes this along to clients so that they can adjust their\nlevel of trust accordingly. [10] presents a framework for \nrealizing dynamic context consistency management. The \nframework supports inconsistency detection based on a semantic\nmatching and inconsistency triggering model, and \ninconsistency resolution with proactive actions to context sources.\nMost approaches to provide appropriate context utilize a\ncentralized arbitrator. In our approach, we let distributed\ncontext providers themselves decide who can provide \nappropriate context information. Our approach can reduce the\nburden of the middleware, because we do not need the \nmiddleware to provide a context selection mechanism. It can\navoid the serious consequences caused by a breakdown of\nthe arbitrator. Also, it can guarantee context providers\"\ninterests.\n6. CONCLUSION AND FUTURE WORK\nHow to provide the appropriate context information is a\nchallenging problem in pervasive computing. In this paper,\nwe have presented a novel approach based on negotiation\nwith rewards to attempt to solve such problem. Distributed\ncontext providers negotiate with each other to reach \nagreement on the issues who can provide the appropriate \ncontext and how they allocate the proceeds. The results of\nour experiments have showed that our approach can choose\nan appropriate context provider, and also can guarantee\nproviders\" interests by a relatively fair proceeds allocation.\nIn this paper, we only consider how to choose an \nappropriate context provider from two providers. In the future\nwork, this negotiation model will be extended, and more\nthan two context providers can negotiate with each other to\ndecide who is the most appropriate context provider. In the\nextended negotiation model, how to design efficient \nnegotiation strategies will be a challenging problem. We assume\nthat the context provider will fulfill its promise of reward in\nthe next negotiation process. In fact, the context provider\nmight deceive its opponent and provide illusive promise. We\nshould solve this problem in the future. We also should deal\nwith interactions which are interrupted by failing \ncommunication links in the future work.\n7. ACKNOWLEDGEMENT\nThe work is funded by 973 Project of China(2002CB312002,\n2006CB303000), NSFC(60403014) and NSFJ(BK2006712).\n8. REFERENCES\n[1] J. Coutaz, J. L. Crowley, S. Dobson, and D. Garlan.\nContext is key. Commun. ACM, 48(3):49 - 53, March\n2005.\n[2] D.G.Pruitt. Negotiation behavior. Academic Press,\n1981.\n[3] K. Henricksen and J. Indulska. Modelling and using\nimperfect context information. In Proceedings of the\nSecond IEEE Annual Conference on Pervasive\nComputing and Communications Workshops, pages\n33-37, 2004.\n[4] M. C. Huebscher and J. A. McCann. Adaptive\nmiddleware for context-aware applications in\nsmart-homes. In Proceedings of the 2nd workshop on\nMiddleware for pervasive and ad-hoc computing\nMPAC \"04, pages 111-116, October 2004.\n[5] G. Judd and P. Steenkiste. Providing contextual\ninformation to pervasive computing applications. In\nProceedings of the First IEEE International\nConference on Pervasive Computing and\nCommunications, pages 133-142, 2003.\n[6] H. Lei, D. M. Sow, J. S. Davis, G. Banavar, and M. R.\nEbling. The design and applications of a context\nservice. ACM SIGMOBILE Mobile Computing and\nCommunications Review, 6(4):45-55, 2002.\n[7] J. Liu and V. Issarny. Enhanced reputation mechanism\nfor mobile ad-hoc networks. In Trust Management:\nSecond International Conference, iTrust, 2004.\n[8] H. Raiffa. The Art and Science of Negotiation.\nHarvard University Press, 1982.\n[9] S. D. Ramchurn, N. R. Jennings, and C. Sierra.\nPersuasive negotiation for autonomous agents: A\nrhetorical approach. In C. Reed, editor, Workshop on\nthe Computational Models of Natural Argument,\nIJCAI, pages 9-18, 2003.\n[10] C. Xu and S. C. Cheung. Inconsistency detection and\nresolution for context-aware middleware support. In\nProceedings of the 10th European software engineering\nconference, pages 336-345, 2005.\n": ["context-awareness", "context provider", "negotiation", "context-aware computing", "concrete negotiation model", "distributed application", "pervasive computing", "reputation", "quality of context", "context quality", "persuasive argument", ""]}