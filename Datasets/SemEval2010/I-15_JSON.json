{"Information Searching and Sharing in Large-Scale\nDynamic Networks\nGeorge A. Vouros\nDepartment of Information & Communication Systems Engineering\nUniversity of the Aegean, Samos, Greece\ngeorgev@aegean.gr\nABSTRACT\nFinding the right agents in a large and dynamic network to\nprovide the needed resources in a timely fashion, is a long\nstanding problem. This paper presents a method for information\nsearching and sharing that combines routing indices with \ntokenbased methods. The proposed method enables agents to search\neffectively by acquiring their neighbors\" interests, advertising\ntheir information provision abilities and maintaining indices for\nrouting queries, in an integrated way. Specifically, the paper\ndemonstrates through performance experiments how static and\ndynamic networks of agents can be \u00e2\u20ac\u02dctuned\" to answer queries\neffectively as they gather evidence for the interests and\ninformation provision abilities of others, without altering the\ntopology or imposing an overlay structure to the network of\nacquaintances.\nCategories and Subject Descriptors\nI.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence\n\n1. INTRODUCTION\nConsidering to be a decentralized control problem, information\nsearching and sharing in large-scale systems of cooperative agents\nis a hard problem in the general case: The computation of an\noptimal policy, when each agent possesses an approximate partial\nview of the state of the environment and when agents\"\nobservations and activities are interdependent (i.e. one agent\"s\nactions affect the observations and the state of an other) [3], is\nhard. This fact, has resulted to efforts that either require agents to\nhave a global view of the system [15], to heuristics [4], to \nprecomputation of agents\" information needs and information\nprovision capabilities for proactive communication [17], to\nlocalized reasoning processes built on incoming information\n[12,13,14], and to mathematical frameworks for coordination\nwhose optimal policies can be approximated [11] for small (sub-)\nnetworks of associated agents.\nOn the other hand, there is a lot of research on semantic peer to\npeer search networks and social networks [1,5,6,8,9,10,16,18,19]\nmany of which deal with tuning a network of peers for effective\ninformation searching and sharing. They do it mostly by imposing\nlogical and semantic overlay structures. However, as far as we\nknow there is no work that demonstrates the effectiveness of a\ngradual tuning process in large-scale dynamic networks that\nstudies the impact of the information gathered by agents as more\nand more queries are issued and served in concurrent sessions in\nthe network.\nThe main issue in this paper concerns \u00e2\u20ac\u02dctuning\" a network of\nagents, each with a specific expertise, for efficient and effective\ninformation searching and sharing, without altering the topology\nor imposing an overlay structure via clustering, introduction of\nshortcut indices, or re-wiring. \u00e2\u20ac\u02dc \" is the task of sharing and\ngathering the knowledge for agents to propagate\nrequests to the acquaintances, minimizing the searching\neffort, increasing the efficiency and the benefit of the system.\nSpecifically, this paper proposes a method for information\nsearching and sharing in dynamic and large scale networks, which\ncombines routing indices with token-based methods for\ninformation sharing in large-scale multi-agent systems.\nThis paper is structured as follows: Section 2 presents related\nwork and motivates the proposed method. Section 3 states the\nproblem and section 4 presents in detail the individual techniques\nand the overall proposed method. Section 5 presents the\nexperimental setup and results, and section 6 concludes the paper,\nsketching future work.\n2. RELATED WORK\nInformation provision and sharing can be considered to be a\ndecentralized partially-observable Markov decision process\n[3,4,11,14]. In the general case, decentralized control of \nlargescale dynamic systems of cooperative agents is a hard problem.\nOptimal solutions can only be approximated by means of\nheuristics, by relaxations of the original problem or by centralized\nsolutions. The computation of an optimal control policy is simple\ngiven that global states can be factored, that the probability of\ntransitions and observations are independent, the observations\ncombined determine the global state of the system and the reward\nfunction can be easily defined as the sum of local reward\nfunctions [3].\nHowever, in a large-scale dynamic system with decentralized\ncontrol it is very hard for agents to possess accurate partial views\nof the environment, and it is even more hard for agents to possess\na global view of the environment. Furthermore, agents\"\nobservations can not be assumed independent, as one agent\"s\nactions can affect the observations of others: For instance, when\none agent joins/leaves the system, then this may affect other\nagents\" assessment of neighbours\" information provision abilities.\nFurthermore, the probabilities of transitions can be dependent too;\nsomething that increases the complexity of the problem: For\nexample, when an agent sends a query to another agent, then this\nmay affect the state of the latter, as far as the assessed interests of\nthe former are concerned.\nConsidering independent activities and observations, authors in\n[4] propose a decision-theoretic solution treating standard action\nand information exchange as explicit choices that the decision\nmaker must make. They approximate the solution using a myopic\nalgorithm. Their work differs in the one reported here in the\nfollowing aspects: First, it aims at optimizing communication,\nwhile the goal here is to tune the network for effective\ninformation sharing, reducing communication and increasing\nsystem\"s benefit. Second, the solution is approximated using a\nmyopic algorithm, but authors do not demonstrate how \nsuboptimal are the solutions computed (something we neither do),\ngiven their interest to the optimal solution. Third, they consider\nthat transitions and observations made by agents are independent,\nwhich, as already discussed, is not true in the general case. Last,\nin contrast to their approach where agents broadcast messages,\nhere agents decide not only when to communicate, but to whom\nto send a message too.\nToken based approaches are promising for scaling coordination\nand therefore information provision and sharing to large-scale\nsystems effectively. In [11] authors provide a mathematical\nframework for routing tokens, providing also an approximation to\nsolving the original problem in case of independent agents\"\nactivities. The proposed method requires a high volume of\ncomputations that authors aim to reduce by restricting its\napplication to static logical teams of associated agents. In\naccordance to this approach, in [12,13,14], information sharing is\nconsidered only for static networks and self-tuning of networks is\nnot demonstrated. As it will be shown in section 5, our\nexperiments show that although these approaches can handle\ninformation sharing in dynamic networks, they require a larger\namount of messages in comparison to the approach proposed here\nand can not tune the network for efficient information sharing.\nProactive communication has been proposed in [17] as a result of\na dynamic decision theoretic determination of communication\nstrategies. This approach is based on the specification of agents as\nproviders and needers: This is done by a plan-based \nprecomputation of information needs and provision abilities of\nagents. However, this approach can not scale to large and\ndynamic networks, as it would be highly inefficient for each agent\nto compute and determine its potential needs and information\nprovision abilities given its potential interaction with 100s of\nother agents.\nViewing information retrieval in peer-to-peer systems from a\nmulti-agent system perspective, the approach proposed in [18] is\nbased on a language model of agents\" documents collection.\nExploiting the models of other agents in the network, agents\nconstruct their view of the network which is being used for\nforming routing decisions. Initially, agents build their views using\nthe models of their neighbours. Then, the system reorganizes by\nforming clusters of agents with similar content. Clusters are being\nexploited during information retrieval using a kNN approach and\na gradient search scheme. Although this work aims at tuning a\nnetwork for efficient information provision (through \nreorganization), it does not demonstrate the effectiveness of the\napproach with respect to this issue. Moreover, although during \nreorganization and retrieval they measure the similarity of content\nbetween agents, a more fine grained approach is needed that\nwould allow agents to measure similarities of information items\nor sub-collections of information items. However, it is expected\nthat this will complicate re-organization. Based on their work on\npeer-to-peer systems, H.Zhand and V.Lesser in [19] study\nconcurrent search sessions. Dealing with static networks, they\nfocus on minimizing processing and communication bottlenecks:\nAlthough we deal with concurrent search sessions, their work is\northogonal to ours, which may be further extended towards\nincorporating such features in the future.\nConsidering research in semantic peer-to-peer systems1\n, most of\nthe approaches exploit what can be loosely stated a routing\nindex. A major question concerning information searching is\nwhat information has to be shared between peers, when, and\nwhat adjustments have to be made so as queries to be routed to\ntrustworthy information sources in the most effective and efficient\nway.\nREMINDIN\" [10] peers gather information concerning the queries\nthat have been answered successfully by other peers, so as to\nsubsequently select peers to forward requests to: This is a lazy\nlearning approach that does not involve advertisement of peer\ninformation provision abilities. This results in a tuning process\nwhere the overall recall increases over time, while the number of\nmessages per query remains about the same. Here, agents actively\nadvertise their information provision abilities based on the\nassessed interests of their peers: This results in a much lower\nnumber of messages per query than those reported in\nREMINDIN\".\nIn [5,6] peers, using a common ontology, advertise their expertise,\nwhich is being exploited for the formation of a semantic overlay\nnetwork: Queries are propagated in this network depending on\ntheir similarity with peers\" expertise. It is on the receiver\"s side to\ndecide whether it shall accept or not an advertisement, based on\nthe similarity between expertise descriptions. According to our\napproach, agents advertise selectively their information provision\nabilities about specific topics to their neighbours with similar\ninformation interests (and only to these). However, this is done as\ntime passes and while agents\" receive requests from their peers.\nThe gradual creation of overlay networks via re-wiring, shortcuts\ncreation [1,8,16] or clustering of peers [17,9] are tuning\napproaches that differ fundamentally from the one proposed here:\nThrough local interactions, we aim at tuning the network for\nefficient information provision by gathering routing information\ngradually, as queries are being propagated in the network and\n1\nGeneral research in peer-to-peer systems concentrates either on\nnetwork topologies or on distribution of documents:\nApproaches do not aim to optimize advertising, and search\nmostly requires common keys for nodes and their contents.\nThey generate a substantial overhead in highly dynamic\nsettings, where nodes join/leave the system.\n248 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nagents advertise their information provision abilities given the\ninterests of their neighbours. Given the success of this method, we\nshall study how the addition of logical paths and gradual\nevolution of the network topology can further increase the\neffectiveness of the proposed method.\n3. PROBLEM STATEMENT\nLet { } be the set of agents in the system. The\nnetwork of agents is modelled as a graph =( , ), where is the\nset of agents and is a set of bidirectional edges denoted as \nnonordered pairs ( , ). The neighbourhood of an agent includes\nall the one-hop away agents (i.e. its acquaintance agents) such\nthat ( ) The set of acquaintances of is denoted by\nEach agent maintains (a) an ontology that represents categories of\ninformation, (b) indices of information pieces available to its local\ndatabase and to other agents, and (c) a profile model for some of\nits acquaintances. Indices and profile models are described in\ndetail in section 4.\nOntology concepts represent categories that classify the\ninformation pieces available. It is assumed that agents in the\nnetwork share the same ontology, but each agent has a set of\ninformation items in its local repository, which are classified\nunder the concepts of its expertise. The set of concepts is denoted\nby It is assumed that the sets of items in agents\" local\nrepositories are non-overlapping.\nFinally, it is assumed that there is a set of queries .\nEach query is represented by a tuple where is\nthe unique identity of the query is a non-negative integer\nrepresenting the maximum number of information pieces\nrequested, is the specific category to which these pieces must\nbelong, is a path in the network of agents through which the\nquery has been propagated (initially it contains the originator of\nthe query and each agent appends its id in the before\npropagating the query), and is a positive integer that specifies\nthe maximum number of hops that the query can reach. In case\nthis limit is exceeded and the corresponding number of\ninformation pieces have not been found, then the query is\nconsidered unfulfilled However, even in this case, a (possibly\nhigh) percentage of the requested pieces of information may have\nbeen found.\nThe problem that this article deals with is as follows: Given a\nnetwork of agents and a set of queries , agents must\nretrieve the pieces of information requested by queries, in\nconcurrent search sessions, and further \u00e2\u20ac\u02dctune\" the network so as to\nanswer future similar queries in the more effective and efficient\nway, increasing the benefit of the system and reducing the\ncommunication messages required. The of the system is\nthe ratio of information pieces retrieved to the number of\ninformation pieces requested. The of the system is\nmeasured by the number of messages needed for searching and\nupdating the indexes and profiles maintained.\n\u00e2\u20ac\u02dcTuning\" the network requires agents to acquire the necessary\ninformation about acquaintances\" interests and information\nprovision abilities (i.e. the routing and profiling tuples detailed in\nsection 4), so as to route queries and further share information in\nthe most efficient way. This must be done seamlessly to\nsearching: I.e. agents in the network must share/acquire the\nnecessary information while searching, increasing the benefit and\nefficiency gradually, as more queries are posed.\n4. INFORMATION SEARCHING AND\nSHARING\n4.1 Overall Method\nGiven a network =( , ) of agents and a set of queries , each\nagent maintains indices for routing queries to the right agents,\nas well as acquaintances\" profiles for advertising its information\nprovision abilities to those interested.\nTo capture information about pieces of information accessible by\nthe agents, each agent maintains a routing index that is realized\nas a set of tuples of the form < , , >. Each such tuple specifies\nthe number of information items in category that can be\nreached by , such that ( ) { }. This specifies\nthe of to with respect to the\ninformation category . As it can be noticed, each tuple\ncorresponds either to the agent itself (specifying the pieces of\ninformation classified in available to its local repository) or to\nan acquaintance of the agent (recording the pieces of information\nin category available to the acquaintance agent and to agents\nthat can be reached through this acquaintance). The routing index\nis exploited for the propagation of queries to the right agents:\nThose that are either more likely to provide answers or that know\nsomeone that can provide the requested pieces of information.\nConsidering an agent , the profile model of some of its\nacquaintances , denoted by is a set of tuples < , >,\nmaintained by . Such a tuple specifies the probability that the\nacquaintance is interested to pieces of information in category\nsubsequently, such a probability is also denoted by ).\nFormally, the profile model of an acquaintance of is\n{ , >| ( ) and }. Profile models are\nexploited by the agents to decide where to \u00e2\u20ac\u02dcadvertise\" their\ninformation provision abilities.\nGiven two acquaintances and in , the information\nsearching and sharing process proceeds as it is depicted in Figure\n1: Initially, each agent has no knowledge about the information\nprovision abilities of its acquaintances and also, it possesses no\ninformation about their interests. When that the query\nis sent to from the agent , then has to\nupdate the profile of concerning the category increasing the\nprobability that is interested to information in When this\nprobability is greater than a threshold value (due to the queries\nabout that has sent to ), then assesses that it is highly\nFigure 1. Typical pattern for information sharing between\ntwo acquaintances (numbers show the sequence of tasks)\nAj Ai\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 249\nprobable for to be interested about information in category .\nThis leads to inform about its information provision abilities\nas far as the category is concerned. This information is being\nused by to update its index about . This index is being\nexploited by to further propagate queries, and it is further\npropagated to those interested in . Moreover, the profile of\nmaintained by guides to propagate changes concerning its\ninformation provision abilities to .\nThe above method has the following features: (a) It combines\nrouting indices and token-based information sharing techniques\nfor efficient information searching and sharing, without imposing\nan overlay network structure. (b) It can be used by agents to adapt\nsafely and effectively to dynamic networks. (c) It supports the\nacquisition and exploitation of different types of locally available\ninformation for the \u00e2\u20ac\u02dctuning\" process. (d) It extends the \ntokenbased method for information sharing (as it was originally\nproposed in [12,13]) in two respects: First, to deal with categories\nof information represented by means of ontology concepts and not\nwith specific pieces of information, and second, to guide agents to\nadvertise information that is semantically similar to the\ninformation requested, by using a semantic similarity measure\nbetween information categories. Therefore, it paves the way for\nthe use of token-based methods for semantic peer-to-peer\nsystems. This is further described in section 4.3. (d) It provides a\nmore sophisticated way for agents to update routing indices than\nthat originally proposed in [2]. This is done by gathering and\nexploiting acquaintances\" profiles for effective information\nsharing, avoiding unnecessary and cyclic updates that may result\nto misleading information about agents\" information provision\nabilities. This is further described in the next sub-section.\n4.2 Routing Indices\nAs already specified, given a network of agents and the\nset of agent\"s acquaintances, the routing index (RI) of\n(denoted by ) is a collection of at most | |\nindexing tuples < , >. The key idea is that given such an index\nand a request concerning , will forward this request to if the\nresources available (i.e. the information abilities of to )\ncan best serve this request. To compute the information abilities\nof to , all tuples < , > concerning all agents in ( )-{ }\nmust be aggregated. Crespo and Garcia-Molina [2] examine\nvarious types of aggregations. In this paper, given some tuples\n< >,< , \u00e2\u20ac\u00a6> maintained by the agent , their\naggregation is the tuple < , >. This gives\ninformation concerning the pieces of information that can be\nprovided through , but it does not distinguish what each of \"s\nacquaintances can provide: This is an inherent feature of routing\nindices. Without considering the interests of its acquaintances,\nmay compute aggregations concerning agents in ( ) { }-{ }\nand advertise/share its information provision abilities to each\nagent in ( ).\nFor instance, given the network configuration depicted in Figure 2\nand a category , agent sends the aggregation of the tuples\nconcerning agents in ( ) { }-{ } (denoted as\n( , )) to agent , which records the tuple\n< >. Similarly the aggregation of the tuples concerning the\nagents in ( ) { }-{ } (denoted as ( )) is\nsent to the agent , which also records the tuple < >. It must\nbe noticed that and record the information provision\nabilities of each from its own point of view. Every time the\ntuple that models the information provision abilities of an agent\nchanges, the aggregation has to re-compute and send the new\naggregation to the appropriate neighbors in the way described\nabove. Then, its neighbors have to propagate these updates to\ntheir acquaintances, and so on.\nFigure 2.Aggregating and sharing information provision\nindices.\nRouting indices may be misleading and lead to inefficiency in\narbitrary graphs containing cycles. The exploitation of\nacquaintances\" profiles can provide solutions to these\ndeficiencies. Each agent propagates its information provision\nabilities concerning a category only to these acquaintances that\nhave high interest in this category. As it has been mentioned, an\nagent expresses its interest in a category by propagating queries\nabout it. Therefore, indices concerning a category are\npropagated in the inverse direction in the paths to which queries\nabout are propagated. Indices are propagated as long as agents\nin the path have a high interest in . Queries can not be\npropagated in a cyclic fashion since an agent serves and\npropagates queries that have not been served by it in a previous\ntime point. Therefore, due to their relation to queries, indices are\nnot propagated in a cyclic fashion, as well. However, there is still\na specific case where cycles can not be avoided. Such a case is\nshown in Figure 3:\nFigure 3. Cyclic pattern for the sharing of indices.\nWhile the propagation of the query causes the propagation of\ninformation provision abilities of agents in a non cyclic way\n(since the agent A recognizes that has been served), the query\ncauses the propagation of information abilities of A to other\nagents in the network, causing, in conjunction to the propagation\nof indices due to a cyclic update of indices.\n4.3 Profiles\nThe key assumption behind the exploitation of acquaintances\"\nprofiles, as it was originally proposed in [12,13], is that for an\nagent to pass a specific information item, this agent has a high\ninterest on it or to related information. As already said, in our\ncase, acquaintances\" profiles are created based on received\nqueries and specify the interests of acquaintances to specific\ninformation categories. Given the query sent\nfrom to , has to record not only the interest of to , but\nAk\nA2\nA\nNotation\nAcquaintance relation\nFlow of query\nFlow of indices due to\nFlow of query\nFlow of indices due to\n250 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nthe interest of to all the related classes, given their semantic\nsimilarity to\nTo measure the similarity between two ontology classes we use\nthe similarity function [0,1] [7]:\n=\notherwise\ncc\n01.0\n1\ncofsubconceptaiscif\nji\nji\nwhere is the length of the shortest path between and in the\ngraph spanned by the sub concept relation and the minimal level\nin the hierarchy of either or . and are parameters scaling\nthe contribution of shortest path length and , respectively.\nBased on previous works we choose =0.2 and =0.6 as optimal\nvalues. It must be noticed that we measure similarity between\nsub-concepts, assigning a very low similarity value between\nconcepts that are not related by the sub-concept relation. This is\ndue to that, each query about information in category can be\nanswered by information in any sub-category of close enough\nto Given a threshold value 0.3, 0.3 indicates that an\nagent interested in is also interested in , while <0.3\nindicates that an agent interested in is unlikely to be interested\nin . This threshold value was chosen after some empirical\nexperiments with ontologies.\nThe update of \"s assessment on pc\nbased on an incoming query\nfrom is computed by leveraging Bayes Rule\nas follows [12,13]:\n, and ( )\nIf is the last in the\n||\n1\n||\n2\n),(\nIf is not the last in the\nThen probabilities must be normalized to ensure that\n, 1\n)(\n,\nAccording to the first case of the equation, the probability that the\nagent that has propagated a query about to be interested about\ninformation in , is updated based on the similarity between\nand . The second case updates the interests of agents other than\nthe requesting one, in a way that ensures that normalization\nworks. It must be noticed that in contrast to [12,13], the\ncomputation has been changed in favour to the agent that passed\nthe query.\nThe profiles of acquaintances enable an agent to decide where and\nwhich advertisements to be sent. Specifically, for each\nand for which is greater than a threshold value (currently\nset to 0.5), the agent aggregates the vectors ( ) of each\nagent ( ) { }-{ }and sends the tuple ( , ) to . Also,\ngiven a high , when a change to an index concerning occurs\n(e.g. due to a change in \"s local repository, or due to that the set\nof its acquaintances changed), sends the updated aggregated\nindex entry to . Doing so, the agent which is highly interested\nto pieces of information in category updates its index so as to\nbecome aware of the information provision abilities of as far as\nthe category is concerned.\n4.4 Tuning\nTuning is performed seamlessly to searching: As agents propagate\nqueries to be served, their profiles are getting updated by their\nacquaintances. As their profiles are getting updated, agents\nreceive the aggregated indices of their acquaintances, becoming\naware of their information provision abilities on information\ncategories to which they are probably interested. Given these\nindices, agents further propagate queries to acquaintances that are\nmore likely to serve queries, and so on. Concerning the routing\nindex and the profiles maintained by an agent , it must be\npointed that does not need to record all possible tuples, i.e.\n| | | { }|: It records only those that are of particular interest\nfor searching and sharing information, depending on the expertise\nand interests of its own and its acquaintances.\nInitially, agents do not possess profiles of their acquaintances. For\nindices there are two alternatives: Either agents do not initially\npossess any information about acquaintances\" local repositories\n(this is the   case), or they do (this is\nthe   case). Given a query, agents\npropagate this query to those acquaintances that have the highest\ninformation provision abilities. In the no initialization of indices\ncase where an agent does not initially possess information about\nits acquaintances\" abilities, it may initially propagate a query to\nall of them, resulting to a pure flooding approach; or it may\npropagate the query randomly to a percentage of them. In the\ninitialization of indices case, where an agent initially possesses\ninformation about its acquaintances\" local repository, it can\npropagate queries to all or to a percentage of those that can best\nserve the request. We considered both cases in our experiments.\nGiven a static setting where agents do not shift their expertise,\nand the distribution of information pieces does not change, the\nnetwork will eventually reach a state where no information\nconcerning agents\" information abilities will need to be\npropagated and no agents\" profiles will need to be updated:\nQueries shall be propagated only to those agents that will lead to a\nnear-to-the-maximum benefit of the system in a very efficient\nway. In a dynamic setting, agents may shift their expertise, their\ninterests, they may leave the network at will, or welcome new\nagents that join the network and bring new information provision\nabilities, new interests and new types of queries. In this paper we\nstudy settings where agents may leave or join the network. This\nrequires agents to adapt safely and effectively. Towards this goal,\nin case an agent does not receive a reply from one of its\nacquaintances within a time interval, then it retracts all the indices\nand the profile concerning the missing acquaintance and \nrepropagates the queries that have been sent to the missing agent\nsince the last successful handshake, to other agents. In case a new\nagent joins the network, then its acquaintances that are getting\naware of its presence propagate all the queries that have processed\nby them in the last time points (currently is set to 6) to the\nnewcomer. This is done so as to inform the newcomer about their\ninterests and initiate information sharing.\n5. EXPERIMENTAL SETUP\nTo validate the proposed approach we have built a prototype that\nsimulates large networks. To test the scalability of our approach\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 251\nwe have run several experiments with various types of networks.\nHere we present results from 3 network types with | |=100,\n| |=500 and | |=1000 that provide representative cases. Networks\nare constructed by distributing randomly | | agents in an area,\neach with a visibility ratio equal to The acquaintances of an\nagent are those that are visible to the agent and those from\nwhich the agent is visible (since edges in the network are \nbidirectional). Details about networks are given in Table 1. The\ncolumn avg(|N(A)|) shows the average number of acquaintances\nper agent in the network and the column |T| shows the number of\nqueries per network type. It must be noticed that the TypeA\nnetwork is more dense than the others, which are much larger\nthan this.\nEach experiment ran 40 times. In each run the network is\nprovided with a new set of randomly generated queries that are\noriginated from randomly chosen agents. The agents search and\ngather knowledge that they further use and enrich, tuning the\nnetwork gradually, run by run. Each run lasts a number of rounds\nthat depends on the of queries and on the parameters that\ndetermine the dynamics of the network: To end a run, all queries\nmust have either been served (i.e. 100% of the information\nitems requested must have been found), or they must have been\nunfulfilled (i.e. have exceeded their ). It must be noticed that\nin case of a dynamic setting, this ending criterion causes some of\nthe queries to be lost. This is the case when some queries are\nthe only active remained and the agents to whom they have\nbeen propagated left the network without their acquaintances to\nbe aware of it.\nTable1: Network types\n|N| R N avg(|N(A)|) |T|\nTypeA 100 10 25 50 363\nTypeB 500 10 125 20 1690\nTypeC 1000 10 250 10 3330\nInformation used in the experiments is synthetic and is being\nclassified in 15 distinct categories: Each agent\"s expertise\ncomprises a unique information category. For the category in its\nexpertise each agent holds at most 1000 information pieces, the\nexact number of which is determined randomly.\nAt each run a constant number of queries are being generated,\ndepending on the type of network used (last column in Table 1).\nAt each run, each query is randomly assigned to an originator\nagent and is set to request a random number of information items,\nclassified in a sub-category of the query-originator agent\"s\nexpertise. This sub-category is chosen in a random way and the\nrequested items are less than 6000. The for any query is set to\nbe equal to 6. In such a setting, the demand for information items\nis much higher than the agents\" information provision abilities,\ngiven the of queries: The maximum benefit in any\nexperimental case is much less than 60% (this has been done so as\nto challenge the \u00e2\u20ac\u02dctuning\" task in settings where queries can not be\nserved in the first hop or after 2-3 hops).\nGiven that agents are initially not aware of acquaintances\" local\nrepository (  case), we have run\nseveral evaluation experiments for each network type depending\non the percentage of acquaintances to which a query can be\npropagated by an agent. These types of experiments are denoted\nby TypeX-Y, where X denotes the type of network and Y the\npercentage of acquaintances: Here we present results for Y equal\nto 10, 20 or 50. For instance, TypeA-10 denotes a setting with a\n0\n50\n100\n150\n200\n250\n300\nTypeA-10\nType B-20 (no initialization)\nTypeB-20 (initialization)\nType C-50\n4000\n14000\n24000\n34000\n44000\n54000\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n0\n0.0005\n0.001\n0.0015\n0.002\n0.0025\n0.003\n0.0035\n0.004\n0.0045\nTypeA-10 TypeB-20 (no initialization)\nType B-20 (initialization) TypeC-50\nTypeB-20 without RIs\nFigure 4. Results for static networks as agents gather\ninformation about acquaintances\" abilities and interests\nnetwork of TypeA where each query is being propagated to at\nmost 10% of an agent\"s acquaintances. The exact number of\nacquaintances is randomly chosen per agent and queries are being\npropagated only to those acquaintances that are likely to best\ni-messages per run\nq-messages per run\nbenefit per run\nmessage gain per run\n252 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nserve the request. Figures 4 and 5 show experiments for static and\ndynamic networks of TypeA-10 (dense network with a low\npercentage of acquaintances), TypeB-20 (quite dense network\nwith a low percentage of acquaintances), with initialization and\nwithout initialization, and TypeC-50 (not a so dense network with\na quite high percentage of acquaintances). To demonstrate the\nadvantages of our method we have considered networks without\n0\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n0\n10000\n20000\n30000\n40000\n50000\n60000\n70000\n80000\n42\n43\n44\n45\n46\n47\n48\n49\n50\n0\n0.0005\n0.001\n0.0015\n0.002\n0.0025\n0.003\n0.0035\nTypeB-20 TypeB-20 without RIs TypeC-50\nTypeC-50 without RIs TypeC-50 (static)\nFigure 5. Results for dynamic networks as agents gather\ninformation about acquaintances\" abilities and interests\nrouting indices for TypeC-50 and TypeB-20 networks: Agents in\nthese networks, similarly to [12,13], share information concerning\ntheir local repository based on their assessments on\nacquaintances\" interests.\nResults computed in each experiment show the number of \nquerypropagation messages ( ), the number of messages for\nthe update of indices ( ), the of the system, i.e.\nthe average ratio of information pieces provided to the number of\npieces requested per query, and the i.e. the ratio of\nbenefit to the total number of messages. The horizontal axis in\neach diagram corresponds to the runs.\nAs it is shown in Figure 4, as agents search and share information\nfrom run 1 to run 40, they manage to increase the benefit of the\nsystem, by drastically reducing the number of messages. Also (not\nshown here due to space reasons) the number of unfulfilled\nqueries decrease, while the served queries increase gradually.\nExperiments show: (a) An effective tuning of the networks as\ntime passes and more queries are posed to the network, even if\nagents maintain the models of a small percentage of their\nacquaintances. (b) That \u00e2\u20ac\u02dctuning\" can greatly facilitate the\nscalability of the information searching and sharing tasks in\nnetworks.\nTo show whether initial knowledge about acquaintances local\nrepository (the   case) affects the\neffective tuning of the network, we provide representative results\nfrom the TypeB-20 network. As it is shown in Figure 4, the\ntuning task in this case does not manage to achieve the benefit of\nthe system reported for the   case. On\nthe contrary, while the tuning affects the drastically;\nthe are not affected in the same way: The\nin the  case are less than those in the\nTypeB-20 with   case. This is further\nshown in a more clear way in the message gain of both\napproaches: The message gain of the TypeB-20 with\n  case is higher than the message gain for\nthe TypeB-20 experiment with  .\nTherefore, initial knowledge concerning local information of\nacquaintances can be used for guiding searching and tuning at the\ninitial stages of the tuning task, only if we need to gain efficiency\n(i.e. decrease the number of required messages) to the cost of\nloosing effectiveness (i.e. have lower benefit): This is due to the\nfact that, as agents posses information about acquaintances\" local\nrepositories, the tuning process enables the further exchange of\nmessages concerning agents\" information provision abilities\nin cases where agents\" profiles provide evidence for such a need.\nHowever, initial information about acquaintances\" local\nrepositories may mislead the searching process, resulting in low\nbenefit. In case we need to gain effectiveness to the cost of\nreducing efficiency, this type of local knowledge does not suffice.\nConsidering also the information sharing method without routing\nindices ( cases), we can see that for static networks\nit requires more without managing to tune the\nsystem, while the benefit is nearly the same to the one reported by\nour method. This is shown clearly in the message gain diagrams\nin Figure 4.\nFigure 5 provides results for dynamic networks. These are results\nfrom a particular representative case of our experiments where\nmore than 25% of (randomly chosen) nodes leave the network in\neach run during the experiment. After a random number of\ni-messages per run\nq-messages per run\nbenefit per run\nmessage gain per run\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 253\nrounds, a new node may replace the one left. This newcomer has\nno information about the network. Approximately 25% of the\nnodes that leave the network are not replaced for 50% of the\nexperiment, and approximately 50% are not replaced for more\nthan 35% of the experiment. In such a highly dynamic setting\nwith very scarce information resources distributed in the network,\nas Figure 5 shows, the tuning approach has managed to keep the\nbenefit to acceptable levels, while still reducing drastically the\nnumber of i-messages. However, as it can be expected, this\nreduction is not so drastic as it was in the corresponding static\ncases. Figure 5 shows that the message gain for the dynamic case\nis comparable to the message gain for the corresponding \n(TypeC50) static case, which proves the value of this approach for\ndynamic settings. The comparison to the case where no routing\nindices are exploited reveals the same results as in the static case,\nto the cost of a large number of messages.\nFinally it must be pointed that the maximum number of messages\nper query required by the proposed method is nearly 12, which is\nless than that that reported by other efforts.\n6. CONCLUSIONS\nThis paper presents a method for semantic query processing in\nlarge networks of agents that combines routing indices with\ninformation sharing methods. The presented method enables\nagents to keep records of acquaintances\" interests, to advertise\ntheir information provision abilities to those that have a high\ninterest on them, and to maintain indices for routing queries to\nthose agents that have the requested information provision\nabilities. Specifically, the paper demonstrates through extensive\nperformance experiments: (a) How networks of agents can be\n\u00e2\u20ac\u02dctuned\" so as to provide requested information effectively,\nincreasing the benefit and the efficiency of the system. (b) How\ndifferent types of local knowledge (number, local information\nrepositories, percentage, interests and information provision\nabilities of acquaintances) can guide agents to effectively answer\nqueries, balancing between efficiency and efficacy. (c) That the\nproposed tuning task manages to increase the efficiency of\ninformation searching and sharing in highly dynamic and large\nnetworks. (d) That the information gathered and maintained by\nagents supports efficient and effective information searching and\nsharing: Initial information about acquaintances information\nprovision abilities is not necessary and a small percentage of\nacquaintances suffices.\nFurther work concerns experimenting with real data and\nontologies, differences in ontologies between agents, shifts in\nexpertise and the parallel construction of overlay structure.\n7. REFERENCES\n[1] Cooper, B.F., Garcia-Molina, H. ad-hoc, self-supervising\npeer-to-peer search networks.\n, Volume 23 ,Issue 2\n(April 2005) ,169 - 200\n[2] Crespo, A., Garcia-Molina, H. Routing indices for \npeer-topeer systems, in\n, July 2002.\",\n[3] Goldman, C., and Zilberstein, S. Decentralized Control of\nCooperative Systems: Categorization and Complexity\nAnalysis. 22\n(2004), 143-174.\n[4] Goldman, C., and Zilberstein, S. Optimizing Information\nExchange in Cooperative Multi-agent Systems. In\n, July 2003.\n[5] Haase, P., Siebes, R., van Harmelen, F. Peer Selection in\nPeer-to-Peer Networks with Semantic Topologies. In\nLecture Notes in Computer\nScience, Springer, Volume 3226/2004, 108-125.\n[6] Haase, P., Broekstra, J., Ehrig, M., Menken, M., Mika, P.,\nPlechawski, M., Pyszlak, P., Schnizler, B., Siebes, R., Staab,\nS., Tempich, T. Bibster-A Semantics-Based Bibliographic\nPeer-to-Peer System, In , 122-136.\n[7] Li, Y., Bandar, Z., and McLean, D.. An approach for\nmeasuring semantic similarity between words using semantic\nmultiple information sources.\nvol. 15, No 4, 2003, 871-882.\n[8] Loser, A., Staab, S., Tempich, C. Semantic Social Overlay\nNetworks.\n. To appear 2006/2007\n[9] Nejdl, W., Wolpers M., Siberski, W., Schmitz, C., Schlosser,\nM., Brunkhorst, I., Loser, Super-Peer-Based Routing and\nClustering Strategies for RDF-Based Peer-to-Peer\nNetworks. 536-543.\n[10] Tempich, C., Staab, S., Wranik, A. REMINDIN': Semantic\nQuery Routing in Peer-to-Peer Networks Based on Social\nMetaphors. In 640-649.\n[11] Xu, Y., Scerri, P., Yu, B., Lewis, M., and Sycara, K. A\nPOMDP Approach to Token-Based Team Coordination. In\n, (July 25-29, Utrecht) ACM Press.\n[12] Xu, Y., Lewis, M., Sycara, K., and Scerri, P. Information\nSharing in Large Scale Teams. In\n, 2004.\n[13] Xu, Y., Liao, E., Scerri, P., Yu, B., Lewis, M., and Sycara,\nK. Towards Flexible Coordination of Large Scale \nMultiAgent Systems.\nSpringer, 2005.\n[14] Xu, Y., Scerri, P., Yu, B., Okamoto, S., Lewis, M., and\nSycara, K. An Integrated Token Based Algorithm for\nScalable Coordination. In 407-414\n[15] Xuan, P., Lesser, V., Zilberstein, S. Communication\nDecisions in Multi-agent Cooperation: Model and\nExperiments. In 2001, 616-623.\n[16] Yu, B., and Singh M. Searching Social Networks, In\n.\n[17] Zhang, Y., Volz, R., Ioeger, T.R., Yen, J. A Decision\nTheoretic Approach for Designing Proactive Communication\nin Multi-Agent Teamwork. In 2004, 64-71.\n[18] Zhang, H., Croft, W.B., Levine, B., Lesser, V. A \nMultiAgent Approach for Peer-to-Peer-based Information\nRetrieval Systems. In In 04, 456-464.\n[19] Zhang, H., Lesser, V. Multi-Agent Based Peer-to-Peer\nInformation Retrieval Systems with Concurrent Search\nSessions. In 06, 305-31.\n254 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\n": ["information searching and sharing", "social network", "cooperative agent", "peer to peer search network", "peer-to-peer system", "dynamic and large scale network", "decentralized partially-observable markov decision process", "decentralized control", "myopic algorithm", "knn approach", "gradient search scheme", "artificial social system", "performance", "scalability", "robustness", "dependability", ""]}