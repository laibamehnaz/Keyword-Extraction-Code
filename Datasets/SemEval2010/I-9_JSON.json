{"Temporal Linear Logic as a Basis for Flexible Agent\nInteractions\nDuc Q. Pham, James Harland\nSchool of CS&IT\nRMIT University\nGPO Box 2476V\nMelbourne, 3001, Australia\n{qupham,jah}@cs.rmit.edu.au\nABSTRACT\nInteractions between agents in an open system such as the\nInternet require a significant degree of flexibility. A crucial\naspect of the development of such methods is the notion of\ncommitments, which provides a mechanism for \ncoordinating interactive behaviors among agents. In this paper, we\ninvestigate an approach to model commitments with tight\nintegration with protocol actions. This means that there\nis no need to have an explicit mapping from protocols \nactions to operations on commitments and an external \nmechanism to process and enforce commitments. We show how\nagents can reason about commitments and protocol actions\nto achieve the end results of protocols using a reasoning \nsystem based on temporal linear logic, which incorporates both\ntemporal and resource-sensitive reasoning. We also discuss\nthe application of this framework to scenarios such as online\ncommerce.\nCategories and Subject Descriptors\nI.2.11 [Distributed Artificial Intelligence]: Intelligent\nAgents; D.3.2 [Programming Languages]: Language \nClassifications\nGeneral Terms\nTheory, Design\n1. INTRODUCTION AND MOTIVATION\nRecently, software development has evolved toward the\ndevelopment of intelligent, interconnected systems working\nin a distributed manner. The agent paradigm has become\nwell suited as a design metaphor to deal with complex \nsystems comprising many components each having their own\nthread of control and purposes and involved in dynamic and\ncomplex interactions.\nIn multi-agent environments, agents often need to interact\nwith each other to fulfill their goals. Protocols are used to\nregulate interactions. In traditional approaches to protocol\nspecification, like those using Finite State Machines or Petri\nNets, protocols are often predetermined legal sequences of\ninteractive behaviors. In frequently changing environments\nsuch as the Internet, such fixed sequences can quickly \nbecome outdated and are prone to failure. Therefore, agents\nare required to adapt their interactive behaviors to succeed\nand interactions among agents should not be constructed\nrigidly.\nTo achieve flexibility, as characterized by Yolum and Singh\nin [11], interaction protocols should ensure that agents have\nautonomy over their interactive behaviors, and be free from\nany unnecessary constraints. Also, agents should be allowed\nto adjust their interactive actions to take advantages of \nopportunities or handle exceptions that arise during \ninteraction.\nFor example, consider the scenario below for online sales.\nA merchant Mer has 200 cricket bats available for sale with\na unit price of 10 dollars. A customer Cus has $50. Cus\nhas a goal of obtaining from Mer a cricket bat at some time.\nThere are two options for Cus to pay. If Cus uses credit\npayment, Mer needs a bank Ebank to check Cus\"s credit. If\nCus\"s credit is approved, Ebank will arrange the credit \npayment. Otherwise, Cus may then take the option to pay via\nPayPal. The interaction ends when goods are delivered and\npayment is arranged.\nA flexible approach to this example should include several\nfeatures. Firstly, the payment method used by Cus should\nbe at Cus\"s own choice and have the property that if Cus\"s\ncredit check results in a disapproval, this exception should\nalso be handled automatically by Cus\"s switching to PayPal.\nSecondly, there should be no unnecessary constraint on the\norder in which actions are performed, such as which of \nmaking payments and sending the cricket bat should come first.\nThirdly, choosing a sequence of interactive actions should be\nbased on reasoning about the intrinsic meanings of \nprotocol actions, which are based on the notion of commitment,\ni.e. which refers to a strong promise to other agent(s) to\nundertake some courses of action.\nCurrent approaches [11, 12, 10, 1] to achieve flexibilities\nusing the notion of commitment make use of an abstract\nlayer of commitments. However, in these approaches, a \nmapping from protocol actions onto operations on commitments\n124\n978-81-904262-7-5 (RPS) c 2007 IFAAMAS\nas well as handling and enforcement mechanisms of \ncommitments must be externally provided. Execution of protocol\nactions also requires concurrent execution of operations on\nrelated commitments. As a result, the overhead of \nprocessing the commitment layer makes specification and execution\nof protocols more complicated and error prone. There is also\na lack of a logic to naturally express aspects of resources, \ninternal and external choices as well as time of protocols.\nRather than creating another layer of commitment outside\nprotocol actions, we try to achieve a modeling of \ncommitments that is integrated with protocol actions. Both \ncommitments and protocol actions can then be reasoned about\nin one consistent system. In order to achieve that, we specify\nprotocols in a declarative manner, i.e. what is to be achieved\nrather then how agents should interact. A key to this is using\nlogic. Temporal logic, in particular, is suitable for \ndescribing and reasoning about temporal constraints while linear\nlogic [3] is quite suitable for modeling resources. We suggest\nusing a combination of linear logic and temporal logic to\nconstruct a commitment based interaction framework which\nallows both temporal and resource-related reasoning for \ninteraction protocols. This provides a natural manipulation\nand reasoning mechanism as well as internal enforcement\nmechanisms for commitments based on proof search.\nThis paper is organized as follows. Section 2 discusses the\nbackground material of linear logic, temporal linear logic\nand commitments. Section 3 introduces our modeling \nframework and specification of protocols. Section 4 discusses how\nour framework can be used for an example of online sale\ninteractions between a merchant, a bank and a customer.\nWe then discuss the advantages and limitations of using our\nframework to model interaction protocols and achieve \nflexibility in Section 5. Section 6 presents our conclusions and\nitems of further work.\n2. BACKGROUND\nIn order to increase the agents\" autonomy over their \ninteractive behaviors, protocols should be specified in terms of\nwhat is to be achieved rather than how the agents should act.\nIn other words, protocols should be specified in a declarative\nmanner. Using logic is central to this specification process.\n2.1 Linear Logic\nLogic has been used as formalism to model and reason\nabout agent systems. Linear logic [3] is well-known for \nmodeling resources as well as updating processes. It has been\nconsidered in agent systems to support agent negotiation\nand planning by means of proof search [5, 8].\nIn real life, resources are consumed and new resources are\ncreated. In such logic as classical or temporal logic, however,\na direct mapping of resources onto formulas is troublesome.\nIf we model resources like A as one dollar and B as a\nchocolate bar, then A \u00e2\u2021\u2019 B in classical logic is read as\nfrom one dollar we can get a chocolate bar. This causes\nproblems as the implication allows to get a chocolate bar (B\nis true) while retaining one dollar (A remains true).\nIn order to resolve such resource - formula mapping issues,\nGirard proposed the constraints on which formulas will be\nused exactly once and can no longer be freely added or \nremoved in derivations and hence treating linear logic formulas\nas resources. In linear logic, a linear implication A B,\nhowever, allows A to be removed after deriving B, which\nmeans the dollar is gone after using one dollar to buy a\nchocolate bar.\nClassical conjunction (and) and disjunction (or) are recast\nover different uses of contexts - multiplicative as combining\nand additive as sharing to come up with four connectives.\nA \u00e2\u0160\u2014 (multiplicative conjunction) A, means that one has two\nAs at the same time, which is different from A \u00e2\u02c6\u00a7 A = A.\nHence, \u00e2\u0160\u2014 allows a natural expression of proportion. A \u00e2\u201e\u02dc\n(multiplicative disjunction) B, means that if not A then B\nor vice versa but not both A and B.\nThe ability to specify choices via the additive connectives\nis a particularly useful feature of linear logic. A (additive\nconjunction) B, stands for one own choice, either of A or\nB but not both. A \u00e2\u0160\u2022 (additive disjunction) B, stands for\nthe possibility of either A or B, but we don\"t know which.\nAs remarked in [5], and \u00e2\u0160\u2022 allow choices to be made clear\nbetween internal choices (one\"s own), and external choices\n(others\" choice). For instance, to specify that the choice of\nplaces A or B for goods\" delivery is ours as the supplier, we\nuse A B, or is the client\"s, we use A \u00e2\u0160\u2022 B.\nIn agent systems, this duality between inner and outer\nchoices is manifested by one agent having the power to\nchoose between alternatives and the other having to react\nto whatever choice is made.\nMoreover, during interaction, the ability to match \nconsumption and supply of resources among agents can \nsimplify the specification of resource allocations. Linear logic is\na natural mechanism to provide this ability [5]. In addition,\nit is emphasized in [8] that linear logic is used to model agent\nstates as sets of consumable resources and particularly, \nlinear implication is used to model transitions among states\nand capabilities of agents.\n2.2 Temporal Linear Logic\nWhile linear logic provides advantages to modeling and\nreasoning about resources, it does not deal naturally with\ntime constraints. Temporal logic, on the other hand, is a\nformal system which addresses the description and reasoning\nabout the changes of truth values of logic expressions over\ntime [2]. Temporal logic can be used for specification and\nverification of concurrent and reactive programs [2].\nTemporal Linear Logic (TLL) [6] is the result of \nintroducing temporal logic into linear logic and hence is \nresourceconscious as well as deals with time. The temporal \noperators used are (next), (anytime), and (sometime) [6].\nFormulas with no temporal operators can be considered as\nbeing available only at present. Adding to a formula A,\ni.e. A, means that A can be used only at the next time\nand exactly once. Similarly, A means that A can be used\nat any time and exactly once. A means that A can be used\nonce at some time.\nThough both and refer to a point in time, the choice\nof which time is different. Regarding , the choice is an\ninternal choice, as appropriate to one\"s own capability. With\n, the choice is externally decided by others.\n2.3 Commitment\nThe concept of social commitment has been recognized\nas fundamental to agent interaction. Indeed, social \ncommitment provides intrinsic meanings of protocol actions and\nstates [11]. In particular, persistence in commitments \nintroduces into agents\" consideration a certain level of \npredictability of other agents\" actions, which is important when agents\ndeal with issues of inter-dependencies, global constraints or\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 125\nresources sharing [7].\nCommitment based approaches associate protocols actions\nwith operations on commitments and protocol states with\nthe set of effective commitments [11]. Completing the \nprotocol is done via means-end reasoning on commitment \noperations to bring the current state to final states where all \ncommitments are resolved. From then, the corresponding legal\nsequences of interactive actions are determined. Hence, the\napproaches systematically enhance a variety of legal \ncomputations [11].\nCommitments can be reduced to a more fundamental form\nknown as pre-commitments. A pre-commitment here refers\nto a potential commitment that specifies what the owner\nagent is willing to commit [4], like performing some actions\nor achieving a particular state. Agents can negotiate about\npre-commitments by sending proposals of them to others.\nThe others can respond by agreeing or disagreeing with the\nproposal or proposing another pre-commitment. Once a \nprecommitment is agreed, it then becomes a commitment and\nthe process moves from negotiation phase to commitment\nphase, in which the agents act to fulfill their commitments.\n3. MODELING AGENT INTERACTIONS\nProtocols are normally viewed external to agents and are\nessentially a set of commitments externally imposed on \nparticipating agents. We take an internal view of protocols,\ni.e. from the view of participating agents by putting the\nspecification of commitments locally at the respective agents\naccording to their roles.\nSuch an approach enables agents to manage their own\nprotocol commitments. Indeed, agents no longer accept and\nfollow a given set of commitments but can reason about\nwhich commitments of theirs to offer and which \ncommitments of others to take, while considering the current needs\nand the environment. Protocols arise as commitments are\nthen linked together via agents\" reasoning based on proof\nsearch during the interaction. Also, ongoing changes in the\nenvironment are taken as input into the generation of \nprotocols by agent reasoning. This is the reverse of other \napproaches which try to make the specification flexible to \naccommodate changes in the environment. Hence, it is a step\ncloser to enabling emergent protocols, which makes \nprotocols more dynamic and flexible to the context.\nIn a nutshell, services are what agents are capable of \nproviding to other agents. Commitments can then be seen to\narise from combinations of services, i.e. an agent\"s \ncapabiliA unit of consumable resources is modeled as a \nproposition in linear logic. Numeric figures can be used to \nabbreviate a multiplicative conjunction of the same instances. For\nexample, 2 dollar = dollar \u00e2\u0160\u2014 dollar. Moreover, such 3\nA\nis a shorthand for A.\nIn order to address the dynamic manipulation of resources,\nwe also include information about the location and \nownership in the encoding of resources to address the relocation\nand changes in possession of resources during agent \ninteraction. That resource A is located at agent \u00ce\u00b1 and owned\nby agent \u00ce\u00b2 is expressed via a shorthand notation as A@\u00ce\u00b1\u00ce\u00b2 ,\nwhich is treated as a logic proposition in our framework.\nThis notation can be later extended to a more complex logic\nconstruct to reason about changes in location and \nownership.\nIn our running example, a cricket bat cricket b being \nlocated at and owned by agent Mer is denoted as cricket b@M .M\nAfter a successful sale to the agent customer Cus, the cricket\nbat will be relocated to and owned by agent Cus. The \nformula cricket b@CC will replace the formula cricket b@MM\nto reflect the changes.\nOur treatment of unlimited resources is to model it as a\nnumber \u00cf\u0192 of copies of the resource\"s formula such that the\nnumber \u00cf\u0192 is chosen to be extremely large, relative to the\ncontext. For instance, to indicate that the merchant Mer\ncan issue an unlimited number of sale quotes at any time,\nwe use \u00cf\u0192 sale quote@M .M\nDeclaration of actions is also modeled in a similar manner\nas of resources.\nThe capabilities of agents refer to producing, consuming,\nrelocating and changing ownership of resources. Capabilities\nare represented by describing the state before and after \nperforming them. The general representation form is \u00ce\u201c \u00ce\u201d, in\nwhich \u00ce\u201c describes the conditions before and \u00ce\u201d describes the\nconditions after. The linear implication in linear logic \nindeed ensures that the conditions before will be transformed\ninto the conditions after. Moreover, some capabilities can\nbe applied at any number of times in the interaction context\nand their formulas are also preceded by the number \u00cf\u0192.\nTo take an example, we consider the capability of agent\nMer of selling a cricket bat for 10 dollars. The conditions\nbefore are 10 dollars and a payment method from agent\nCus: 10$@CC \u00e2\u0160\u2014 pay m@C . Given these, by applying theC\ncapability, Mer will gain 10 dollars (10$@MM ) and \ncom\u00e2\u0160\u00a5\n) so that CusM\nmit to providing a cricket bat (cricket b@M\nwill get a cricket bat (cricket b@CC ). Together, the \ncapability is encoded as 10$@C \u00e2\u0160\u2014 pay m@C 10$@MC C\n\u00e2\u0160\u2014 cricket b@C\nM \u00e2\u0160\u2014\nties. Hence, our approach shifts specifying a set of protocol\ncommitments to specifying sets of pre-commitments as \ncapabilities for each agent. Commitments are then can be\n\u00e2\u0160\u00a5\nM\ncricket b@M .C\n3.2 Modeling commitmentsreasoned about and manipulated by the same logic \nmechanism as is used for the agents\" actions, resources and goals,\nwhich greatly simplifies the system.\nOur framework uses TLL as a means of specifying \ninteraction protocols. We encode various concepts such as resource,\ncapability and commitment in TLL. The symmetry between\na formula and its negation in TLL is explored as a way to\nmodel resources and commitments. We then discuss the \ncentral role of pre-commitments, and how they are specified at\neach participating agent. It then remains for agents to \nreason about pre-commitments to form protocol commitments,\nWe discuss the modeling of various types of commitments,\ntheir fulfillments and enforcement mechanisms.\nDue to duality in linear logic, positive formulas can be\nregarded as formulas in supply and negative formulas can\nbe regarded as formulas in demand. Hence, we take an \napproach of modeling non-conditional or base commitments as\nnegative formulas. In particular, by turning a formula into\nits negative form, a base commitment to derive the resources\nor carry out the actions associated with the formula is \ncreated. In the above example, a commitment of agent Mer to\n\u00e2\u0160\u00a5\nM\n.which are subsequently discharged. provide a cricket bat (cricket b@MM ) is cricket b@M\nA base commitment is fulfilled (discharged) whenever the\n3.1 Modeling resources and capabilities committing agent successfully brings about the respective\n126 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nresources or carries out the actions as required by the \ncommitment. In TLL modeling, this means that the \ncorresponding positive formula is derived. Resolution of \ncommitments can then be naturally carried out by inference in\nTLL. For example, cricket b@M will fulfil the commit-M\nment cricket b@M\u00e2\u0160\u00a5\nand both formulas are automaticallyM\nremoved as cricket b@MM \u00e2\u0160\u2014 cricket b@M\u00e2\u0160\u00a5\n.M\n\u00e2\u0160\u00a5\nUnder a further assumption that agents are expected to\nresolve all formulas in demand (removing negative \nformulas), this creates a driving pressure on agents to resolve base\ncommitments. This pressure then becomes a natural and \ninternal enforcement mechanism for base commitments.\nA commitment with conditions (or conditional \ncommitment) can be modeled by connecting the conditions to base\ncommitments via a linear implication. A general form is\n\u00ce\u201c \u00ce\u201d where \u00ce\u201c is the condition part and \u00ce\u201d includes base\ncommitments. If the condition \u00ce\u201c is derived, by consuming\n\u00ce\u201c, the linear implication will ensure that \u00ce\u201d results, which\nmeans the base commitments in \u00ce\u201d become effective. If the\nconditions can not be achieved, the linear implication can\nnot be applied and hence commitment part in the \nconditional commitment is still inactive.\nIn our approach, conditional commitments are specified\nin their potential form as pre-commitments of participating\nagents. Pre-commitments are negotiated among agents via\nproposals and upon being accepted, will form conditional\ncommitments among the engaged agents. Conditional \ncommitments are interpreted as that the condition \u00ce\u201c is required\nof the proposed agent and the commitment part \u00ce\u201d is the\nresponsibility of the owner (proposing) agent. Indeed, such\ninterpretation and the encoding of realize the notion of\na conditional commitment that owner agent is willing to\ncommit to deriving \u00ce\u201d given the proposed agent satisfies the\nconditions \u00ce\u201c.\nConditional commitments, pre-commitments and \ncapabilities all have similar encodings. However, their differences lie\nin the phases of commitment that they are in. Capabilities\nare used internally by the owner agent and do not involve\nany commitment. Pre-commitments can be regarded as\ncapabilities intended for forming conditional commitments.\nUpon being accepted, pre-commitments will turn into \nconditional commitments and bring the two engaged agents into a\ncommitment phase. As an example, consider that Mer has a\ncapability of selling cricket bats: (10$@CC \u00e2\u0160\u2014pay m@CC )\n(10$@M \u00e2\u0160\u2014 cricket b@M\u00e2\u0160\u00a5\n\u00e2\u0160\u2014 cricket b@CC ). When MerM M\nproposes its capability to Cus, the capability acts as a \nprecommitment. When the proposal gets accepted, that \nprecommitment will turn into a conditional commitment in\nwhich Mer commits to fulfilling the base commitment\ncricket b@M\u00e2\u0160\u00a5\n(which leads to having cricket b@CC ) uponM\nthe condition that Cus derives 10$@CC \u00e2\u0160\u2014pay m@C (whichC\nleads to having 10$@MM ).\nBreakable commitments which are in place to provide agents\nwith the desired flexibility to remove itself from its \ncommitments (cancel commitments) are also modeled naturally in\nour framework. A base commitment Com\u00e2\u0160\u00a5\nis turned into\na breakable base commitment (cond \u00e2\u0160\u2022 Com)\u00e2\u0160\u00a5\n. The extra\ntoken cond reflects the agent\"s internal deliberation about\nwhen the commitment to derive Com is broken. Once cond\nis produced, due to the logic deduction cond \u00e2\u0160\u2014 (cond \u00e2\u0160\u2022\nCom)\u00e2\u0160\u00a5\n\u00e2\u0160\u00a5, the commitment (cond \u00e2\u0160\u2022 Com)\u00e2\u0160\u00a5\nis removed,\nand hence breaking the commitment of deriving Com. \nMoreover, a breakable conditional commitment is modeled as\nA (1 B), instead of A B. When the condition A\nis provided, the linear implication brings about (1 B) and\nit is now up to the owner agent\"s internal choice whether 1\nor B is resulted. If the agent chooses 1, which practically\nmeans nothing is derived, then the conditional commitment\nis deliberately broken.\n3.3 Protocol Construction\nGiven the modeling of various interaction concepts like \nresource, action, capability, and commitment, we will discuss\nhow protocols can be specified.\nIn our framework, each agent is encoded with the \nresources, actions, capabilities, pre-commitments, any \npending commitments that it has. Pre-commitments, which stem\nfrom services the agents are capable of providing, are \ndesignated to be fair exchanges. In a pre-commitment, all the\nrequirements of the other party are put in the condition part\nand all the effects to be provided by the owner agent are put\non the commitment part to make up a trade-off. Such a \ndesign allows agents to freely propose pre-commitments to any\ninterested parties.\nAn example of pre-commitments is that of an agent \nMerchant regarding a sale of a cricket bat: [10$@CC \u00e2\u0160\u2014pay m@C\n10 $@MM \u00e2\u0160\u2014 cricket b@CC \u00e2\u0160\u2014cricket b@M\u00e2\u0160\u00a5\nM\n]. The \ncondition is the requirement that the customer agent provides\n10 dollars, which is assumed to be the price of a cricket\nbat, via a payment method. The exchange is the cricket bat\nfor the customer ( cricket b@CC ) and hence is fair to the\nmerchant.\nProtocols are specified in terms of sets of pre-commitments\nat participating agents. Given some initial interaction \ncommitments, a protocol emerges as agents are reasoning about\nwhich pre-commitments to offer and accept in order to fulfill\nthese commitments.\nGiven a such a protocol specification, we then discuss how\ninteraction might take place. An interaction can start with a\nrequest or a proposal. When an agent can not achieve some\ncommitments by itself, it can make a request of them or \npropose a relevant pre-commitment to an appropriate agent to\nfulfill them. The choice of which pre-commitments depends\non if such pre-commitments can produce the formulas to\nfulfill the agent\"s pending commitments.\nWhen an agent receives a request, it searches for \nprecommitments that can together produce the required \nformulas of the requests. Those pre-commitments found will\nbe used as proposals to the requesting agents. Otherwise, a\nfailure notice will be returned.\nWhen a proposal is received, the recipient agent also \nperforms a search with the inclusion of the proposal for a proof\nof those formulas that can resolve its commitments. If the\nsearch result is positive, the proposal is accepted and \nbecomes a commitment. The recipient then attempts to fulfill\nconditions of the commitments. Otherwise, the proposal is\nrefused and no commitment is formed.\nThroughout the interaction, proof search has played a\nvital role in protocol construction. Proof search reveals\nthat some commitments can not be resolved locally or some\npre-commitments can be used to resolve pending \ncommitments, which prompts the agent to make a request or \nproposal respectively. Proof search also determines which \nprecommitments are relevant to fulfillment of a request, which\nhelps agents to decide which pre-commitments to propose to\nanswer the request. Moreover, whether a received proposal\nC\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 127\nis relevant to any pending commitments or not is also \ndetermined by a search for proof of these commitments with\nan inclusion of the proposal. Conditions of proposals can\nbe resolved by proof search as it links them with the agents\"\ncurrent resources and capabilities as well as any relevant \nprecommitments. Therefore, it can be seen that proof search\nperformed by participating agents can link up their \nrespective pre-commitments and turn them into commitments as\nappropriate, which give rise to protocol formation. We will\ndemonstrate this via our running example in section 4.\n3.4 Interactive Messages\nAgents interact by sending messages. We address agent\ninteraction in a simple model which contains messages of\ntype requests, proposals, acceptance, refusal and failure \nnotice.\nWe denote Source to Destination: prior to each message\nto indicate the source and destination of the message. For\nexample Cust to Mer: denotes that the message is sent\nfrom agent Cust to agent Mer.\nRequest messages start with the key word REQUEST:\nREQUEST + formula. Formulas in request messages\nare of commitments.\nProposal messages are preceded with PROPOSE. \nFormulas are of capabilities. For example, \u00ce\u00b1 to \u00ce\u00b2: PROPOSE\n\u00ce\u201c \u00ce\u201d is a proposal from agent \u00ce\u00b1 to agent \u00ce\u00b2.\nThere are messages that agents use to response to a \nproposal. Agents can indicate an acceptance: ACCEPT, or\na refusal: REFUSE. To notice a failure in fulfilling a \nrequest or proposal, agents reply with that request or proposal\nmessage appended with FAIL.\n3.5 Generating Interactions\nAs we have seen, temporal linear logic provides an elegant\nmeans for encoding the various concepts of agent \ninteraction in a commitment based specification framework. \nAppropriate interaction is generated as agents negotiate their\nspecified pre-commitments to fulfill their goals. The \nassociation among pre-commitments at participating agents and\nthe monitoring of commitments to ensure that all are \ndischarged are performed by proof search. In the next section,\nwe will demonstrate how specification and generation of \ninteractions in our framework might work.\n4. EXAMPLE\nWe return to the online sales scenario introduced in \nSection 1.\n4.1 Specifying Protocol\nWe design a set of pre-commitments and capabilities to\nimplement the above scenario. For simplicity, we refer to\nthem as rules.\nRules at agent Mer\nMer has available at any time 200 cricket bats for sale and\ncan issue sale quotes at any time:\n200 cricket b@M \u00e2\u0160\u2014 \u00cf\u0192 sale quote@M .M M\nRule 1: Mer commits to offering a cricket bat\n(cricket b@M\u00e2\u0160\u00a5\nM\n) to Cus ( cricket b@CC ) if Cus pays 10 \ndollars (10$@CC ) either via Paypal or credit card. The choice\nis at Cus.\n\u00cf\u0192 [10$@C \u00e2\u0160\u2014 (Paypal paid@M \u00e2\u0160\u2022 credit paid@MM )C M\n10 $@M \u00e2\u0160\u2014 cricket b@C \u00e2\u0160\u2014 cricket b@M\u00e2\u0160\u00a5\nM C M\n]\nRule 2: If EBank carries out the credit payment to Mer\nthen the requirement of credit payment at Mer is fulfilled:\n\u00cf\u0192 [credit paym@M credit paid@MM ]B\nRule 3: If Ebank informs Mer of its disapproval of Cus\"s\ncredit then Mer will also let Cus know.\n\u00cf\u0192 [credit not appr@M credit not appr@CB ]B\nRules at agent Ebank\nRule 4: Upon receiving a sale quote from Mer, at the\nnext time point, Ebank commits to either informing Mer\nthat Cus\"s credit is not approved ( credit not appr@MB ) or\narranging a credit payment to Mer ( credit paym@MB ).\nThe decision is dependent on the credibility of Cus and hence\nis external (\u00e2\u0160\u2022) to Ebank and Mer:\n\u00cf\u0192 [sale quote@M ( credit not appr@MB ) \u00e2\u0160\u2022M\ncredit paym@MB ]\nRules at agent Cus\nCus has an amount of 50 dollars available at any time, can\nbe used for credit payment or cash payment: $50@C.\nCus has a commitment of obtaining a cricket bat at some\ntime: [ cricket b@CC ]\u00e2\u0160\u00a5\n.\nRule 5: Cus will pay Mer via Paypal if there is an \nindication from EBank that Cus\"s credit is not approved:\n\u00cf\u0192 [credit not appr@C Paypal paid@MM ]B\n4.2 Description of the interaction\nCus requests from Mer a cricket bat at some time. Mer\nreplies with a proposal in which each cricket bat costs 10\ndollars. Cus needs to prepare 10 dollars and payment can\nbe made by credit or via Paypal.\nAssuming that Cus only pays via Paypal if credit payment\nfails, Cus will let Mer charges by credit. Mer will then ask\nEBank to arrange a credit payment. EBank proposes that\nMer gives a quote of sale and depending on Cus\"s \ncredibility, at the next time point, either credit payment will be\narranged or a disapproval of Cus\"s credit will be informed.\nMer accepts and fulfills the conditions. If the first case \nhappens, credit payment is done. If the second case happens,\ncredit payment is failed, Cus may back track to take the\noption paying via Paypal.\nOnce payment is arranged, Mer will apply its original \nproposal to satisfy the Cus\"s request of a cricket bat and hence\nremoving one cricket bat and adding 10 dollars into its set\nof resources.\n4.3 Interaction\n1. Cus can not fulfill its commitment of [ (cricket b@CC )]\u00e2\u0160\u00a5\nand hence, makes a request to Merchant:\nC to M: REQUEST [ cricket b@CC ]\u00e2\u0160\u00a5\n2. To meet the request, Mer searches for applicable rules.\nOne applications of rule 1 can derive cricket b@C and\ncricket b@C cricket b@C . Mer will propose rule 1C C\nat a time instance n1 to Cus as a pre-commitment.\nM to C: PROPOSE\nn1\n[10$@C \u00e2\u0160\u2014 (Paypal paid@M \u00e2\u0160\u2022 credit paid@MM )C M\n10 $@M \u00e2\u0160\u2014 cricket b@C \u00e2\u0160\u2014 cricket b@M\u00e2\u0160\u00a5\nM\n]M C\nWith similar analysis, Cus determines that given the \nconC\n128 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nditions can be satisfied, the proposals can help to derive its\nrequest. Hence,\nC to M: ACCEPT\nCus analyzes the conditions of the accepted proposal by\nproof search.\nn110$@CC ;\nn1Paypal paid@M or n1credit paid@MM ; -(*)-M\nn110$@C \u00e2\u0160\u2014 ( n1Paypal paid@M \u00e2\u0160\u2022 n1credit paid@MM )C M\nn1(10$@C \u00e2\u0160\u2014 (Paypal paid@M \u00e2\u0160\u2022 credit paid@MM ))C M\nFrom (*), one way to satisfy the conditions is for Cus to \nderive, at the next n1 time points, 10 dollars ( n1\n10$@CC );\nand to choose paying via Paypal ( n1\nPaypal paid@MM )\nOR by credit payment ( n1\ncredit paid@MM ).\n3. Deriving n1\n10$@C : as Cus has 50 dollars, it canC\nmake use of 10 dollars: 10 $@C 10$@C n1\n10$@C .C C C\nThere are two options for payment method, the\nchoice is at agent Cus. We assume that Cus prefers\ncredit payment.\n4. Deriving n1\ncredit paid@M : Cus can not deriveM\nthis formula by itself, hence, it will make a request to Mer:\nC to M: REQUEST [ n1\ncredit paid@MM ]\u00e2\u0160\u00a5\n.\n5. Rule 2 at Mer is applicable but Mer can not derive its\ncondition ( n1\ncredit paym@MB ). Hence, Mer will further\nmake a request to EBank.\nM to E: REQUEST [ n1\ncredit paym@MB ]\u00e2\u0160\u00a5\nEbank searches and finds rule 4 applicable. Because\ncredit paym@M will be available one time point after theB\nrule\"s application time, Ebank proposes to Mer an instance\nof rule 4 at the next n1-1 time points.\n6. B to M: PROPOSE n1\u00e2\u02c6\u20191\n[quote@MM (\ncredit not appr@M \u00e2\u0160\u2022 credit paym@MB )]B\nWith similar analysis, Mer accepts the proposal.\nM to B: ACCEPT\nThe rule condition is fulfilled by Mer as quote@MM\nn1\u00e2\u02c6\u20191\nquote@M . Hence, Ebank then applies the proposalM\nto derive:\nn1\u00e2\u02c6\u20191\n( credit not appr@M \u00e2\u0160\u2022 credit paym@MB ).B\n\u00e2\u0160\u2022 indicates the choice is external to both agents. There are\ntwo cases, Cus\"s credit is approved or disapproved.\nFor simplicity, we show only the case where Cus\"s credit is\napproved. At the next (n1-1) time point,\nn1\u00e2\u02c6\u20191\n( credit not appr@MB \u00e2\u0160\u2022 credit paym@MB ) \nbecomes n1\u00e2\u02c6\u20191\ncredit paym@M n1\ncredit paym@M .B B\nAs a result, at the next n1 time points, Ebank will arrange\nthe credit payment.\n7. Mer fulfills Cus\"s initial request.\nWhen any of n1\nPaypal paid@M (if Cus pays via Pay-M\npal) or n1\ncredit paid@M (if Cus pays by credit card)M\nis derived, n1\n(credit paym@M \u00e2\u0160\u2022 Paypal paid@MM ) isM\nalso derived, hence the payment method is arranged.\nTogether with the other condition 10$@C being satisfied,C\nthis allows the initial proposal to be applied by Mer to derive\nn1\ncricket b@CC and a commitment of n1\ncricket b@M\u00e2\u0160\u00a5\nM\nfor Mer, which is also resolved by the resource cricket b@MM\navailable at Mer.\nAny values of n1 such that n1 \u00e2\u02c6\u2019 1 \u00e2\u2030\u00a5 0 \u00e2\u2021\u201d n1 \u00e2\u2030\u00a5 1 will allow\nMer to fulfill Cus\"s initial request of [ cricket b@CC ]\u00e2\u0160\u00a5\n.\nThe interaction ends as all commitments are resolved.\n4.4 Flexibility\nThe desired flexibility has been achieved in the example.\nIt is Cus\"s own decision to proceed with the preferred \npayment method. Also, non-determinism that whether Cus\"s\ncredit is disapproved or credit payment is made to Mer is\nfaithfully represented. If an exception happens that Cus\"s\ncredit is not approved, credit not appr@C is produced andB\nCus can backtrack to paying via Paypal. Rule 5 will then\nbe utilized to allow Cus to handle the exception by paying\nvia Paypal.\nMoreover, in order to specify that making payments and\nsending cricket bats can be in any order, we can add in\nfront of payment method in rule 1 as follows:\n\u00cf\u0192 [10$@C \u00e2\u0160\u2014 (Paypal paid@M \u00e2\u0160\u2022 credit paid@MM )C M\n10 $@M \u00e2\u0160\u2014 cricket b@C \u00e2\u0160\u2014 cricket b@M\u00e2\u0160\u00a5\nM\n].M C\nThis addition in the condition of the rule means that the\ntime of payment can be any time up to Cus\"s choice, as\nlong as Cus pays and hence, the time order between making\npayments and sending goods becomes flexible.\n5. ENCODING ISSUES\n5.1 Advantages of TLL framework\nOur TLL framework has demonstrated natural and \nexpressive specification of agent interaction protocols. Linear\nimplication ( ) expresses causal relationship, which makes\nit natural to model a removal or a consumption, especially\nof resources, together with its consequences. Hence, in our\nframework, resource transformation is modeled as a linear\nimplication of the consumed resources to the produced \nresources. Resource relocation is modeled as a linear \nimplication from a resource at one agent to that resource at the\nother agent. Linear implication also ensures that fulfillment\nof the conditions of a conditional commitment will cause the\ncommitments to happen. Moreover, state updates of agents\nare resulted from a linear implication from the old state to\nthe current state.\nTemporal operators ( , and ) and their combinations\nhelp to specify the time of actions, of resource availability\nand express the time order of events. Particularly, precise\ntime points are described by the use of operator or \nmultiple copies of it. Based on this ability to specify correct\ntime points for actions or events, time order or sequencing\nof them can also be captured. Also, a sense of duration is\nsimulated by spreading copies of the resources or actions\"\nformulas across multiple adjacent time points. Moreover,\nuncertainty in time can represented and reasoned about by\nthe use of and and their combinations with . can\nbe used to express outer non-determinism while expresses\ninner non-determinism. These time properties of resources,\nactions and events are correctly respected through out the\nagent reasoning process based on sequent calculus rules.\nFurthermore, the centrality of the notion of commitment\nin agent interaction has been recognized in many frameworks\n[11, 12, 1, 10, 4]. However, to the best of our knowledge,\nmodeling commitments directly at the propositional level of\nsuch a resource conscious and time aware logic as TLL is\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 129\nfirstly investigated in our framework. Our framework \nmodels base commitments as negative formulas and conditional\ncommitments via the use of linear implication and/or \nnegative formulas. The modeling of commitments has a number\nof advantages:\n\u00e2\u20ac\u00a2 Commitments are represented directly at the \npropositional logic level or via a logic connective rather than a\nnon-logical construct like [11], which makes treatment\nof commitments more natural and simple and allows to\nmake use of readily available proof search systems like\nusing sequent calculus for handling commitments. \nExisting logic connectives like \u00e2\u0160\u2014, , \u00e2\u0160\u2022, are also readily\navailable for describing the relationships among \ncommitments.\n\u00e2\u20ac\u00a2 Fulfillment of commitments then becomes deriving the\ncorresponding positive formulas or condition \nformulas, which then simply reduces to a proof search task.\nAlso, given the required formulas, fulfillment of \ncommitments can be implemented easily and \nautomatically as deduction (com \u00e2\u0160\u2014 com\u00e2\u0160\u00a5\n\u00e2\u0160\u00a5).\nThe enforcement of commitments is also internal and\u00e2\u20ac\u00a2\nsimply implemented via the assumption that agents\nare driven to remove all negative formulas for base\ncommitments and via the use of linear implication for\nconditional commitments.\nRegarding making protocol specification more flexible, our\napproach has marked a number of significant points.\nFirstly, flexibility of protocol specifications in our \nframework comes from the expressive power of the connectives\nof TLL. and \u00e2\u0160\u2022 refer to internal and external choices of\nagents on resources and actions while and refer to \ninternal choices and external choices in time domain. Given\nthat flexibility includes the ability to make a sensible choice,\nhaving the choices expressed explicitly in the specification of\ninteraction protocols provides agents with an opportunity to\nreason about the right choices during interaction and hence\nexplore the flexibility in them.\nSecondly, instead of being sequences of interactive actions,\nprotocols are structured on commitments, which are more\nabstract than protocol actions. Execution of protocols is\nthen based on fulfilling commitments. Hence, unnecessary\nconstraints on which particular interactive actions to \nexecute by which agents and on the order among them are\nnow removed, which is a step forward to flexibility as \ncompared to traditional approaches. On the other hand, in the\npresence of changes introduced externally, agents have the\nfreedom to explore new sets of interactive actions or skip\nsome interactive actions ahead as long as they still fulfill\nthe protocol\"s commitments. This brings more flexibility to\nthe overall level of agents\" interactive behaviors, and thus\nthe protocol.\nThirdly, the protocol is specified in a declarative manner\nessentially as sets of pre-commitments at each \nparticipating agents. To achieve goals, agents use reasoning based\non TLL sequent calculus to construct proofs of goals from\npre-commitments and state formulas. This essentially gives\nagents an autonomy in utilization of pre-commitments and\nhence agents can adapt the ways they use these to flexibly\ndeal with changing environments.\nIn particular, as proof construction by agents selects a \nsequence of pre-commitments for interaction, being able to \nselect from all the possible combinations of pre-commitments\nin proof search gives more chances and flexibility than \nselecting from only a few fixed and predefined sequences. It\nis then also more likely to allow agents to handle exceptions\nor explore opportunities that arise. Moreover, as the actual\norder of pre-commitments is determined by the proof \nconstruction process rather than predefined, agents can flexibly\nchange the order to suit new situations.\nFourthly, changes in the environment can be regarded as\nremoving or adding formulas onto the state formulas. \nBecause the proof construction by agents takes into account the\ncurrent state formulas when it picks up pre-commitments,\nchanges in the state formulas will be reflected in the choice\nof which relevant pre-commitments to proceed. Hence, the\nagents have the flexibility in deciding what to do to deal\nwith changes.\nLastly, specifying protocols in our framework has a \nmodular approach which adds ease and flexibility to the designing\nprocess of protocols. Protocols are specified by placing a set\nof pre-commitments at each participating agent according to\ntheir roles. Each pre-commitment can indeed be specified as\na process in its own with condition formulas as its input\nand commitment part\"s formulas as its output. Execution\nof each conditional commitment is a relatively independent\nthread and they are linked together by the proof search to\nfulfill agents\" commitments. As a results, with such a design\nof pre-commitments, one pre-commitment can be added or\nremoved without interfering the others and hence, achieving\na modular design of the protocols.\n5.2 Limitations of TLL Framework on \nModeling\nAs all the temporal operators in TLL refer to concrete\ntime points, we can not express durations in time faithfully.\nOne major disadvantage of simulating a duration of an event\nby spreading copies of that event over adjacent time points\nA\u00e2\u0160\u2014 10\ncontinuously (like A\u00e2\u0160\u2014 2\n. . . A) is that it requires\nthe time range to be provided explicitly. Hence, such notion\nlike until can not be naturally expressed in TLL.\nCommitments of agents can be in conflict, especially when\nresolving all of them requires more resources or actions than\nwhat agents have. Our work has not covered handling \ncommitments that are in conflict.\nAnother troublesome aspect of this approach is that the\nrules for interaction require some detailed knowledge of the\nformulas of temporal linear logic. Clearly it would be \nbeneficial to have a visually-based tool similar to UML diagrams\nwhich would allow non-experts to specify the appropriate\nrules without having to learn the details of the formulas\nthemselves.\n6. CONCLUSIONS AND FURTHER WORK\nThis paper uses TLL for specifying interaction protocols.\nIn particular, TLL is used to model the concept of resource,\ncapability, pre-commitment and commitment with tight \nintegration as well as their manipulations with respect to time.\nAgents then make use of proof search techniques to perform\nthe desired interactions.\nIn particular, the approach allows protocol specifications\nto capture the meaning of interactive actions via \ncommitments, to capture the internal choices and external choices of\nagents about resources, commitments and about time as well\nas updating processes. The proof construction mechanism\n130 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)\nprovides agents with the ability to dynamically select \nappropriate pre-commitments, and hence, help agents to gain the\nflexibility in choosing the interactive actions that are most\nsuitable and the flexibility in the order of them, taking into\nconsideration on-going changes in the environment.\nMany other approaches to modeling protocols also use the\ncommitment concept to bring more meaning into agents\" \ninteractive actions. Approaches based on commitment \nmachines [11, 12, 10, 1] endure a number of issues. These\napproaches use logic systems that are limited in their \nexpressiveness to model resources. Also, as an extra abstract\nlayer of commitments is created, more tasks are created \naccordingly. In particular, there must be a human-designed\nmapping between protocol actions and operations on \ncommitments as well as between control variables (fluent) and\nphases of commitment achievement. Moreover, external \nmechanisms must be in place to comprehend and handle \noperations and resolution of commitments as well as enforcement\nof the notion of commitment on its abstract data type \nrepresentations. This requires another execution in the \ncommitment layer in conjunction with the actual execution of\nthe protocol. Not only these extra tasks create an overhead\nbut also makes the specification and execution of protocols\nmore error prone.\nSimilar works in [8] and [9] explore the advantages of \nlinear logic and TLL respectively by using partial deduction\ntechniques to help agents to figure out the missing \ncapabilities or resources and based on that, to negotiate with other\nagents about cooperation strategies. Our approach differs\nin bringing the concept of commitment into the modeling of\ninteraction, and providing a more natural and detailed map\nfor specifying interaction, especially about choices, time and\nupdating using the full propositional TLL. Moreover, we \nemphasize on the use of pre-commitments as interaction rules\nwith a full set of TLL inference rules to provide the \nadvantages of proof construction in achieving flexible interaction.\nOur further work will include using TLL to verify \nvarious properties of interaction protocols such as liveness and\nsafety. Also, we will investigate developing an execution\nmechanism for such TLL specifications in our framework.\nAcknowledgments\nWe are very thankful to Michael Winikoff for many \nstimulating and helpful discussions of this material. We also would\nlike to acknowledge the support of the Australian Research\nCouncil under grant DP0663147.\n7. REFERENCES\n[1] A. K. Chopra and M. P. Singh. Contextualizing\ncommitment protocol. In AAMAS \"06: Proceedings of\nthe fifth international joint conference on Autonomous\nagents and multiagent systems, pages 1345-1352, New\nYork, NY, USA, 2006. ACM Press.\n[2] E. A. Emerson. Temporal and modal logic. Handbook\nof Theoretical Computer Science, B, Chapter\n16:995-1072, 1990.\n[3] J.-Y. Girard. Linear logic. Theoretical Computer\nScience, 50:1-102, 1987.\n[4] A. Haddadi. Communication and Cooperation in\nAgent Systems: a pragmatic theory. Springer-Verlag,\nBerlin Heidelberg, 1995.\n[5] J. Harland and M. Winikoff. Agent negotiation as\nproof search in linear logic. In AAMAS \"02:\nProceedings of the first international joint conference\non Autonomous agents and multiagent systems, pages\n938-939, New York, NY, USA, 2002. ACM Press.\n[6] T. Hirai. Temporal Linear Logic and Its Applications.\nPhD thesis, Graduate School of Science and\nTechnology, Kobe University, 2000.\n[7] N. R. Jennings. Commitments and conventions: The\nfoundation of coordination in multi-agent systems.\nThe Knowledge Engineering Review, 8(3):223-250,\n1993.\n[8] P. K\u00c2\u00a8ungas. Linear logic, partial deduction and\ncooperative problem solving. In J. A. Leite,\nA. Omicini, L. Sterling, and P. Torroni, editors,\nDeclarative Agent Languages and Technologies, First\nInternational Workshop, DALT 2003. Melbourne,\nVictoria, July 15th, 2003. Workshop Notes, pages\n97-112, 2003.\n[9] P. K\u00c2\u00a8ungas. Temporal linear logic for symbolic agent\nnegotiation. Lecture Notes in Artificial Intelligence,\n3157:23-32, 2004.\n[10] M. Venkatraman and M. P. Singh. Verifying\ncompliance with commitment protocols. Autonomous\nAgents and Multi-Agent Systems, 2(3):217-236, 1999.\n[11] P. Yolum and M. P. Singh. Commitment machines. In\nProceedings of the 8th International Workshop on\nAgent Theories, Architectures, and Languages\n(ATAL-01), pages 235-247. Springer-Verlag, 2002.\n[12] P. Yolum and M. P. Singh. Flexible protocol\nspecification and execution: applying event calculus\nplanning using commitments. In AAMAS \"02:\nProceedings of the first international joint conference\non Autonomous agents and multiagent systems, pages\n527-534, New York, NY, USA, 2002. ACM Press.\nAPPENDIX\nA. TEMPORAL SEQUENT RULES FOR TLL\nA, \u00ce\u201c \u00ce\u201d !\u00ce\u201c, \u00ce\u201d A, \u00ce\u203a, ?\u00ce\u00a3\nA, \u00ce\u201c \u00ce\u201d\nL\n!\u00ce\u201c, \u00ce\u201d A, \u00ce\u203a, ?\u00ce\u00a3\nR\n!\u00ce\u201c, \u00ce\u201d, A \u00ce\u203a, ?\u00ce\u00a3 \u00ce\u201c A.\u00ce\u201d\n!\u00ce\u201c, \u00ce\u201d, A \u00ce\u203a, ?\u00ce\u00a3\nL\n\u00ce\u201c A, \u00ce\u201d\nR\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e A, \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e A, \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e, A \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e, A \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n!\u00ce\u201c, \u00ce\u201d, \u00ce\u017e \u00ce\u00a6, \u00ce\u203a, ?\u00ce\u00a0\n\u00e2\u2020\u2019\nThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 131\n": ["multi-agent environment", "interactive behavior", "temporal constraint", "interaction protocol", "linear logic", "multiplicative conjunction", "classical conjunction", "level of predictability", "predictability level", "pre-commitment", "linear implication", "emergent protocol", "conditional commitment", "request message", "causal relationship", "agent communication language and protocol", "logic and formal model of agency and multi-agent system", ""]}