{"Addressing Strategic Behavior in a Deployed\nMicroeconomic Resource Allocator\nChaki Ng\u00e2\u20ac\u00a0\n, Philip Buonadonna\u00e2\u02c6\u2014\n, Brent N. Chun\u00e2\u02c6\u2014\n, Alex C. Snoeren\u00e2\u20ac\u00a1\n, Amin Vahdat\u00e2\u20ac\u00a1\n\u00e2\u20ac\u00a0\nHarvard \u00e2\u02c6\u2014\nIntel Research Berkeley \u00e2\u20ac\u00a1\nUC San Diego\nmarkets@eecs.harvard.edu\nABSTRACT\nWhile market-based systems have long been proposed as \nsolutions for distributed resource allocation, few have been\ndeployed for production use in real computer systems. \nTowards this end, we present our initial experience using \nMirage, a microeconomic resource allocation system based on\na repeated combinatorial auction. Mirage allocates time on\na heavily-used 148-node wireless sensor network testbed. In\nparticular, we focus on observed strategic user behavior over\na four-month period in which 312,148 node hours were \nallocated across 11 research projects. Based on these results, we\npresent a set of key challenges for market-based resource \nallocation systems based on repeated combinatorial auctions.\nFinally, we propose refinements to the system\"s current \nauction scheme to mitigate the strategies observed to date and\nalso comment on some initial steps toward building an \napproximately strategyproof repeated combinatorial auction.\nCategories and Subject Descriptors\nC.2.4 [Distributed Systems]: Distributed Applications\nGeneral Terms\nMeasurement, Design, Economics, Experimentation\n1. INTRODUCTION\nMarket-based systems have long been proposed as \nsolutions for resource allocation in distributed systems including\ncomputational Grids [2, 20], wide-area network testbeds [9],\nand peer-to-peer systems [17]. Yet, while the theoretical \nunderpinnings of market-based schemes have made significant\nstrides in recent years, practical integration of market-based\nmechanisms into real computer systems and empirical \nobservations of such systems under real workloads has remained\nan elusive goal. Towards this end, we have designed, \nimplemented, and deployed a microeconomic resource allocation\nsystem called Mirage [3] for scheduling testbed time on a\n148-node wireless sensor network (SensorNet) testbed at \nIntel Research. The system, which employs a repeated \ncombinatorial auction [5, 14] to schedule allocations, has been in\nproduction use for over four months and has scheduled over\n312,148 node hours across 11 research projects to date.\nIn designing and deploying Mirage, we had three primary\ngoals. First, we wanted to validate whether a market-based\nresource allocation scheme was necessary at all. An \neconomic problem only exists when resources are scarce. \nTherefore, a key goal was to first measure both resource \ncontention and the range of underlying valuations users place\non the resources during periods of resource scarcity. \nSecond, we wanted to observe how users would actually behave\nin a market-based environment. Much of economic theory is\npredicated on rational user behavior, which forms the basis\nfor motivating research efforts such as strategyproof \nmechanism design [4, 6, 15, 16, 19]. With Mirage, we wanted to\nobserve to what extent rationality held and in what ways\nusers would attempt to strategize and game the system. \nFinally, we wanted to identify what other practical problems\nwould emerge in a deployment of a market based system. In\nthis paper, we report briefly on our first goal while focusing\nprimarily on the second. The third is left for future work.\nEmpirical results based on four months of usage have \nvalidated the key motivating factors in using an auction-based\nscheme (i.e., significant resource contention and widely \nvarying valuations) but have also pointed to real-world \nobservations of strategic user behavior. In deploying Mirage, we\nmade the early decision to base the system on a repeated\ncombinatorial auction known not to be strategyproof. That\nis, self-interested users could attempt to increase their \npersonal gain, at the expense of others, by not revealing their\ntrue value to the system. We made this decision mainly \nbecause designing a strategyproof mechanism remains an open,\nchallenging problem and we wanted to deploy a working \nsystem and gain experience with real users to address our three\ngoals in a timely manner. Deploying a non-strategyproof\nmechanism also had the benefit of testing rationality and\nseeing how and to what extent users would try to game the\nsystem. The key contribution of this paper is an analysis of\nsuch strategic behavior as observed over a four-month time\nperiod and proposed refinements for mitigating such \nbehavior en route to building an approximately strategyproof \nrepeated combinatorial auction.\nThe rest of this paper is organized as follows. In Section 2,\n99\nwe present an overview of Mirage including high-level \nobservations on usage over a four-month period. In Section 3, we\nexamine strategic user behavior, focusing on the four \nprimary types of strategies employed by users in the system.\nBased on these results, Section 4 presents a set of key \nchallenges for market-based resource allocation systems based\non repeated combinatorial auctions. As a first step in \naddressing some of these challenges, we describe refinements\nto Mirage\"s current auction scheme that mitigate the \nstrategies observed to date and also comment on some initial steps\ntowards building an approximately strategyproof repeated\ncombinatorial auction for Mirage. Finally, in Section 5, we\nconclude the paper.\n2. THE MIRAGE SYSTEM\nSensorNet testbeds are a critical tool for developing and\nevaluating SensorNet technology in a controlled and \ninstrumented environment. As with many large-scale systems,\nhowever, resource management is a key problem given that\nit is not economical for users to each build and operate their\nown testbed. In Mirage [3], testbed resources are \nspaceshared and allocated using a repeated combinatorial auction\nin a closed virtual currency environment. Users compete for\ntestbed resources by submitting bids which specify resource\ncombinations of interest in space/time (e.g., any 32 MICA2\nmotes for 8 hours anytime in the next two days) along with\na maximum value amount the user is willing to pay. A \ncombinatorial auction is then periodically run to determine the\nwinning bids based on supply and demand while maximizing\naggregate utility delivered to users.\n0\n20\n40\n60\n80\n100\n0 20 40 60 80 100 120\nTotalMICA2Utilization(%)\nDays since Dec 9, 2004\nFigure 1: Testbed utilization for 97 MICA2 motes.\nIn Mirage, resources are allocated using a first-price \ncombinatorial auction which clears every hour. In each round\nof the auction, a rolling window of future testbed resources\nis available for allocation with subsets of that window \nbeing removed from the pool as resources get allocated. In\nour initial deployment, we used a 72-hour window and \ndeployed the system on a testbed consisting of 148 nodes (97\nMICA2 [1] and 51 MICA2DOT sensor nodes or motes).\nIn each round of the auction, users bid for subsets of \nresources available in the current window. When the system\nis first brought online, a full 148-node \u00c3\u2014 72-hour window\nis available, where each row of the window represents the\navailability of a particular node across time, and each \ncolumn represents the availability of the testbed for a given\nhour. The leftmost column of the window represents node\navailability for the hour immediately following the auction;\nthese node/hours will never again be available for auction.\nAll other node/hours not allocated at this or previous \nauctions continue to be offered for sale at subsequent auctions.\nIn each subsequent round (i.e., every hour), portions of the\ncurrent window are allocated as bids are matched to \navailable resources and a new rightmost 148-node \u00c3\u2014 1-hour \ncolumn of resources rolls in and replaces the leftmost column of\nresources which expires. There is no time sharing of nodes:\ngiven limited local computation and communication power,\nonce a sensor is allocated to a user for a particular time\nperiod, it is unavailable to all other users.\nIn Mirage, users place combinatorial bids specifying \nresource combinations of interest in space/time along with a\nmaximum value amount the user is willing to pay. More\nspecifically, a bid bi = (vi, si, ti, di, fmin, fmax, ni, oki) \nindicates the user wants any combination of ni motes from\nthe set oki simultaneously for a duration of di hours (di \u00e2\u02c6\u02c6\n{1, 2, . . . , 32}), a start time anywhere between si and ti, and\na radio frequency in the range [fmin, fmax].1\nThe user also\nis willing to pay up to vi units of virtual currency for these\nresources. In essence, each bid specifies in a succinct \nmanner what subsets of the resource window would serve as \nacceptable resources that meet the user\"s constraints and how\nimportant the desired resource allocation is to the user.\nWe deployed Mirage on December 9, 2004 and the system\nhas been in continuous production use for over four months.\nIn the process, its lifetime has overlapped with several \nperiods of significant resource contention including the \nSIGCOMM \"05 and SenSys \"05 conference deadlines. Overall,\nthe system has 18 research projects registered to use the\nsystem spanning a variety of academic and commercial \ninstitutions. Of these, 11 have actively bid and received time\non the system. As of April 8, 2005, the system has received\n322 bids, and allocated 312,148 node hours over the testbed\"s\n148 nodes.\n0\n0.2\n0.4\n0.6\n0.8\n1\n0.0001 0.001 0.01 0.1 1 10 100\nCumulativefractionofbids\nBid value per node hour\nU1\nU2\nU3\nU4\nU5\nU6\nU7\nFigure 2: Bid value distributions by user.\nAs a measure of contention, Figure 1 shows the \nutilization of the 97 MICA2 motes over the past four months.\nIt depicts periods of significant contention extending over\nmultiple consecutive days, in particular near major \ndeadlines.2\nTo quantify user valuations for resources, Figure 2\n1\nThe frequency constraints are used to schedule testbed \nallocations such that allocations co-scheduled in time do not\ncollide by using the same radio frequency. In practice, \ndistinct frequencies have not been a scarce resource.\n2\nResults for the 51 MICA2DOT motes are similar and \nomitted for space.\n100\nplots distributions of bid values per node hour for the seven\nmost active users in the system. This graph shows that\nuser valuations for testbed resources varied substantially,\nspanning over four orders of magnitude. Valuations are also\ndistributed relatively evenly across each order of magnitude,\nsuggesting that these ranges are not due to a few anomalous\nbids but rather to a wide range of underlying user valuations\nfor testbed resources. These dual observations-significant\nresource contention and a wide range of valuations-support\nthe use of an auction, which is designed precisely to harness\nsuch widely varying valuations to compute an efficient and\nuser utility-maximizing node allocation.\nLastly, as another measure of resource contention and the\nutility of driving resource allocation via user-specified \nvaluations, Figure 3 plots the median per-node clearing price for\nboth MICA2 and MICA2DOT motes over time. To compute\nthese prices, we price an allocated node-hour for a winning\nbid with value v for n nodes for k hours as v/nk. Unallocated\nnode-hours are assigned a price of 0. For a given hour, we\nexamine all MICA2 motes and plot the median node-hour\nprice for that hour and do the same for MICA2DOT motes.\nOf particular interest in this graph are the sequence of prices\nfrom days 45-60 and days 105-120 (i.e., periods leading up\nto conference deadlines). These sequences show that the\nvalue of testbed resources, as measured by market prices for\nmotes, increases exponentially (logarithmic y-axis) during\ntimes of peak contention. This suggests that allowing users\nto express valuations for resources to drive the resource \nallocation process is important for making effective use of the\ntestbed (e.g., to distinguish important use from low \npriority activities). However, it also suggests that users become\nexponentially desperate to acquire resources as deadlines \napproach. As it turns out, it is precisely during these times\nthat users will try their hardest to game the system and,\ntherefore, when the efficacy of a market-based mechanism\ncan be best evaluated.\n1e-05\n0.0001\n0.001\n0.01\n0.1\n1\n10\n0 20 40 60 80 100 120\nValuepernodehour\nDays since Dec 9, 2004\nMICA2\nMICA2DOT\nFigure 3: Median node-hour market prices.\n3. OBSERVED STRATEGIC BEHAVIOR\nDuring the past four months of operation, Mirage has \nemployed two distinct auction mechanisms and observed four\nprimary types of strategic behavior from users. The first\nauction mechanism, A1, was deployed from December 9,\n2004 to March 28, 2005. During this time period, we \nobserved three different types of strategic behavior (S1-S3),\nthe most recent of which (S3) resulted in significant gaming\nof the system. In response to the impact of S3, we deployed\na second mechanism, A2, on March 29, 2005 (Day 111 in\nFigures 1 and 3). While A2 mitigated or eliminated the\nknown shortcomings of A1-in particular the vulnerability\nstrategy S3 exploited that prompted the change in the first\nplace-it was soon discovered that A2 remained vulnerable\nto another strategy, S4, which was predictably discovered\nand exploited by a motivated user community. We are \ncurrently in the process of designing a mechanism to address the\nweakness in A2 that is abused by S4. Of course, ideally we\nwould develop a provably strategyproof mechanism. \nHowever, this remains an open research problem for repeated\ncombinatorial auctions.\nIn this section, we describe the two auction mechanisms\nA1 and A2, Mirage\"s virtual currency policy, the four types\nof observed strategic behavior S1-S4, and their impact on\naggregate utility delivered.\n3.1 Auctions and virtual currency\nOur first auction mechanism, A1 was a first-price, \nopenbid (i.e., users can see all outstanding bids from competing\nusers) combinatorial auction that cleared every hour based\non a greedy algorithm. In each round of auction, the current\nset of bids was sorted by value per node hour and bids were\ngreedily fit into the remaining portion of the current window\nof available resources. Like A1, our second auction, A2, was\nalso based on a greedy clearing algorithm. Its key differences\nwere that (i) it was a sealed-bid auction and (ii) it allocated\nresources over a 148-node \u00c3\u2014 104-hour window with bid start\ntimes constrained to be within the next 72 hours (the reason\nfor this will become apparent when we discuss strategy S3).\nIn both auctions, winning bids from previous auctions\nwere publicly visible for price feedback and the same \nvirtual currency policy was used. Our virtual currency policy\nassigns two numbers to each user\"s bank account: a baseline\nvalue and a number of shares. When created, each bank \naccount is initialized to its baseline value. Once funded, a user\ncan then begin to bid and acquire testbed resources through\nMirage. In each round of the auction, accounts for winning\nbids are debited and the proceeds are redistributed through\na proportional profit-sharing policy based on bank account\nshare values. The primary purpose of this policy is to \nreward users who refrain from using the system during times\nof peak demand and penalize those who use resources \naggressively during periods of scarcity. These rewards result\nin transient bursts of credit and are balanced by another\nmechanism, a savings tax, to prevent idle users from sitting\non large amounts of excess credit forever (a use it or lose\nit policy). In our deployment, an administrator set the \nvirtual currency policy. Bank accounts for external users were\nassigned baseline and shares value set to 1000, while bank\naccounts for internal users (U4 and U5) were assigned larger\nallocations with baseline and share values set to 2000.\n3.2 Strategic behavior\nThe following are descriptions of the four primary bidding\nstrategies observed over the past four-months.\nS1: underbidding based on current demand. In A1, all\noutstanding bids were publicly visible. Consequently, when\nusers would observe a lack of demand, some users would bid\ncorrespondingly low amounts rather than their true values.\nFor example, one user would frequently bid 1 or 2 when no\nother bids were present. While underbidding in the absence\nof competition is not a problem per se, it does raise two\n101\nissues. First, if a seller was collecting revenue for profit,\nsuch bidding leads to suboptimal outcomes for the seller.\nSecond, should other users enter competing bids before the\nauction clears, users will need to refine their bids to allow the\nsystem to compute an allocation that maximizes aggregate\nutility. This second problem then leads to strategy S2.\nS2: iterative bidding. Because users are allowed to modify\ntheir bids and A1 was an open auction, iteratively refining\none\"s bid value in response to other users\" bid values should,\nin theory, have no effect on who wins the auction; users\nwith higher valuations-who may also be \nunderbiddingshould eventually outbid those with lower valuations after\nsufficient iteration. The problem is that users do not \nbehave this (rational) way. Usability overhead matters: users\nin Mirage bid once and perhaps modify their bid a second\ntime. The end result is that inefficiencies may arise since\nthe auction may clear with bid values that are understated.\nWhile bidding proxies that automatically adjust user bids in\nresponse to other bids are effective in single-good auctions,\nit is unclear how such proxies could be generally effective in\na combinatorial auction without actually implementing the\nsame clearing algorithm used by Mirage (which could be\ncomputationally expensive). In summary, S1 and S2 both\npoint toward the need for a strategyproof auction mechanism\nin Mirage. In such an auction, a user\"s optimal strategy is\nalways to bid truthfully the first time. Thus, rational users\nwill never underbid and iterative bidding is unnecessary.\nS3: rolling window manipulation. Unlike auctions for \ntangible goods, resource allocation in computer systems \nfundamentally involves time, since sharing of resources implies\nthat a resource cannot be assigned to a given user/process\nforever. In Mirage, we addressed the issue of time by \nselling resources over a rolling window 72 hours into the future\nwith users able to bid for blocks 1, 2, . . . , or 32 hours in\nlength. What we did not anticipate, however, was what\nwould happen when the entire window of resources becomes\nfully allocated. In this scenario, which was the norm near\nthe recent SenSys \"05 deadline, the entire 148-node \u00c3\u2014 \n72hour window is allocated. A user bidding for, say, 32 hours\nthus needs to minimally wait 32 hours for 32 new 148-node\n\u00c3\u2014 1-hour columns of resources to become available.\nThe problem here is that a user can game the system\nby observing other bids and simply requesting fewer hours.\nSince 16 columns will roll into the resource window before\n32 columns, a user bidding for 16 hours outbids a 32-hour\nbid independent of each bid\"s value because resources for the\n32-hour bid are not available when the auction clears. Of\ncourse, if other users also begin bidding for 16 hours, this\nopportunity disappears but then moves to durations shorter\nthan 16 hours. In the limit, all users bid for 1-hour blocks,\nthereby eliminating the possibility of obtaining longer \nresource allocations which may be critical to the underlying\nSensorNet experiment. In practice, we observed this type of\ngaming push winning bid durations down to 2 hours.\nWith rampant gaming of the system occurring through\nS3, we responded by implementing and deploying auction\nA2. As mentioned, a key difference of A2 compared to A1 is\nthat it allocates resources over a 104-hour window with bid\nstart times constrained to be within the next 72 hours. In\nexpanding the window and expanding (while still \nconstraining) the range of start times, A2 eliminates strategy S3.\nWhen the entire 148-node \u00c3\u2014 72-hour window is allocated,\na pending 16-hour bid and a pending 32-hour bid will both\nTime Project Value Nodes Hours\n04-02-2005 03:58:04 U2 1590 97 32\n04-02-2005 05:05:45 U1 5 24 4\n04-02-2005 05:28:23 U1 130 40 4\n04-02-2005 06:12:12 U1 1 33 4\nTable 1: Strategy S4 on 97 MICA2 motes.\nhave their first opportunity for an allocation when 32 new\ncolumns become available. At that point, both the 16-hour\nbid and the 32-hour bid will have an opportunity to obtain\nan allocation. Such allocations are then determined by the\nusual greedy clearing algorithm.\nS4: auction sandwich attack. While A2 eliminated S3 and\nsignificantly reduced S1 and S2, it still retained a weakness\nof A1 that had yet to be discovered and exploited. In the\nauction sandwich attack, a user exploits two pieces of \ninformation: (i) historical information on previous winning bids\nto estimate the current workload and (ii) the greedy nature\nof the auction clearing algorithm. In this particular case,\na user employs a strategy of splitting a bid for 97 MICA2\nmotes across several bids, only one of which has a high value\nper node hour. Since the high value bid is likely to win due\nto the greedy nature of the auction clearing algorithm and\nsince all other users at the time were all requesting 97 motes\n(based on the historical information and the fact that the\nSenSys \"05 deadline was imminent requiring experiments at\nscale), no other bids could backfill the remaining slots; the\nuser\"s remaining bids would then fit those slots at a low\nprice. An actual occurrence is shown in Table 1. Here, user\nU1 uses three bids, the main one being a bid with value\n130 (value per node hour 130/(4 \u00c2\u00b7 40) = 0.813) which is\nused to outbid a bid with value 1590 (value per node hour\n1590/(32 \u00c2\u00b7 97) = 0.0512). Once the high valued 40-node bid\nhas occupied its portion of the resource window, no other\n97-node bids can be matched. Consequently, the user \nbackfills on the remaining 57 nodes using two bids: a 24-node\nbid and a 33-node bid, both at low valuations.\n4. CHALLENGES AND REFINEMENTS\nDesigning an appropriate auction mechanism is key to \naddressing the above strategies. Specifically, our goals for such\na mechanism include: (i) strategyproofness, (ii) \ncomputational tractability, and (iii) optimal allocation. The \nGeneralized Vickrey Auction (GVA) [8, 18] is the only known \ncombinatorial mechanism that provides both strategyproofness\nand optimal allocation. However, it also is \ncomputationally intractable as it is NP-hard to calculate the allocations\nas well as individual payments. Other VCG-based \nmechanisms exist that replace the allocation algorithms in GVA\nwith approximate ones to provide tractability. In this case,\nhowever, strategyproofness is no longer available [16]. These\ngoals are in conflict for VCG and in general [10]. We thus\nmust make certain trade-offs.\nWith this in mind, we now present a two-phase roadmap\nfor improving Mirage: (i) short-term improvements to the\ncurrent mechanism that mitigate the effects of existing \nstrategies; and (ii) designing a new mechanism that approximately\nachieves our three goals simultaneously.\n4.1 Ongoing improvements\nOur first improvement is a mixed-integer programming\n102\n(MIP) formulation as an alternative to the greedy algorithm.\nThis is aimed directly at eliminating strategy S4. While\nthe MIP does not provide strategyproofness, it is able to\ncompute approximately-optimal allocations. Like the GVA,\nhowever, the MIP is computationally demanding and thus\ncareful formulation of the MIP and optimizations based on\nthe observed workloads from Mirage will be required to \nensure timely clearing of the auction. Our first step is to test\nand optimize our MIP-based algorithm on auction data from\nthe past four months. We can then run both the MIP \nalongside the greedy algorithm in parallel and select the higher\nquality result each time the auction clears.\nSecond, we can also augment the auction with additional\nrules and fees to further mitigate strategic behavior. To\neliminate S4, two possibilities are to restrict each user to\nhaving either one outstanding bid at a time or to mandate\nthat users are not allowed to have multiple overlapping \nallocations in time. To mitigate S1 and S2, we could add\ntransaction fees. With such fees in place, a user who \nunderstates a bid and intends to iteratively refine it will have a\ndisincentive to do so given that each iteration incurs a fee.\nFinally, another approach to eliminating S4 is to modify\nthe greedy algorithm such that if users do have bids whose\nallocations could overlap in time, then those potential \nallocations are considered from lowest to highest value per node\nhour. In effect, this allows bids for overlapping allocations\nbut creates a disincentive for users to place such bids.\n4.2 Towards a strategyproof mechanism\nClearly, we need to evaluate our goals and identify where\nwe can make trade-offs in designing a new mechanism. \nComputational tractability is a fundamental requirement for \noperational reasons. Strategyproofness or, minimally, making\nthe system hard to manipulate is also key given the behavior\nwe have observed. Finally, our mechanism should compute\nnear-optimal allocations given our compute time budget.\nAmong the potential mechanisms we can extend, the LOS\nscheme [12] seems to be a good starting point. It is a fast \nalgorithm as the allocation rule is a greedy mechanism, \nranking bids with some norm such as value per node hour.\nThe advantage of LOS is its special payment scheme that is\ntightly linked to the greedy allocation. Essentially, a winner\ni pays the norm of the first bidder denied access times the\namount of units (i.e. node hours) that i won. This feature\nmakes it strategyproof. The main downside, however, is that\nit assumes users are single-minded, meaning that each \nbidder only cares about a specific set of goods (e.g., a specific\nlist of nodes for specific durations) and they do not value\nanything else. Unfortunately, this is highly restrictive and\ncontradicts what Mirage currently offers its users, namely\nthe ability to select any subset of nodes for any slots and\nsubmit multiple bids. Thus, LOS is vulnerable to S4 and to\navoid it we must find a way to extend LOS and its \nstrategyproof property to satisfy complex-bidders.\nRealistically, even with a strategyproof LOS scheme for\ncomplex bidders there will likely be further strategies we\nhave yet to encounter and that we should consider in our\ndesign. For instance, our discussion so far focuses on \nstrategyproofness within a single auction. Across auctions, \nhowever, there may be temporal strategies that are possible. For\nexample, in a particular auction, suppose the highest bidder\nwants all nodes and pays, using GVA payment scheme for\nsimplicity, the next bidder\"s value. This same bidder may\nbe better off by waiting until the next auction, if the user\ncan still win and face bidders that have even lower values.\nIn this case, the user will gain additional utility due to a\nlower payment. This, however, may create various problems\nas total revenue, total value, as well as allocative efficiency\nacross the auctions may be adversely affected.\nThere are two techniques we can use to address \ntemporal strategies. The first is a wrapper scheme such as the\none employed by Virtual Worlds (VW) [13] that makes \nsequences of individually strategyproof auctions (e.g., LOS)\nstrategyproof. What VW does is, after bidder i wins, it\ntracks what would have happened if i had submitted in a\nsubsequent auction instead. Specifically, it tracks what i\nwould have paid in all following auctions during i\"s patience\n(i.e., the maximum time i is willing to wait for an \nallocation) and keeps track of the lowest possible payment. i will\ninstead be charged the lowest payment and will thus have\nno incentive to temporally game the system. Alternatively,\nthe new class of online mechanisms[7, 11] assumes dynamic\narrival and departure of bidders and does not hold auctions\nat fixed intervals. Instead, the mechanism is a continuous\nscheme that accepts bids as they arrive and makes allocation\ndecisions immediately, thus removing any need to clear\nauctions. The challenge is that the current literature is still\nrestricted to non-combinatorial settings.\n5. CONCLUSION\nDespite initially using a repeated combinatorial auction\nknown not to be strategyproof, Mirage has shown significant\npromise as a vehicle for SensorNet testbed allocation. The\ndual observations of significant resource contention and a\nwide range of valuations suggest that auction-based schemes\ncan deliver large improvements in aggregate utility when\ncompared to traditional approaches such as proportional\nshare allocation or batch scheduling. Fully realizing these\ngains, however, requires addressing key problems in \nstrategyproof mechanism design and combinatorial optimization.\nThe temporal nature of computational resources and the\ncombinatorial resource demands of distributed applications\nadds an additional layer of complexity. Nevertheless, we \nremain optimistic and believe that a pragmatic mix of theory\nand practice combined with iterative improvements on real\ndeployments provides one promising avenue toward bringing\nmarket-based resource allocation into the mainstream.\n6. REFERENCES\n[1] Crossbow corporation. http://www.xbow.com.\n[2] Buyya, R., Abramson, D., and Giddy, J.\nNimrodG: An Architecture of a Resource Management\nand Scheduling System in a Global Computational\nGrid. In Proceedings of the 4th International\nConference on High Performance Computing in\nAsia-Pacific Region (May 2000).\n[3] Chun, B. N., Buonadonna, P., AuYoung, A., Ng,\nC., Parkes, D. C., Shneidman, J., Snoeren,\nA. C., and Vahdat, A. Mirage: A Microeconomic\nResource Allocation System for SensorNet Testbeds.\nIn Proceedings of the 2nd IEEE Workshop on\nEmbedded Networked Sensors (May 2005).\n[4] Clarke, E. H. Multipart pricing of public goods.\nPublic Choice 2 (1971), 19-33.\n103\n[5] de Vries, S., and Vohra, R. V. Combinatorial\nAuctions: A Survey. INFORMS Journal on\nComputing 15 (2003), 284-309.\n[6] Groves, T. Incentives in Teams. Econometrica 41\n(1973), 617-631.\n[7] Hajiaghayi, M. T., Kleinberg, R., and Parkes,\nD. C. Adaptive Limited-Supply Online Auctions. In\nProceedings of the 5th ACM Conference on Electronic\nCommerce (2004).\n[8] Jackson, M. O. Mechanism Theory. In The\nEncyclopedia of Life Support Systems. EOLSS\nPublishers, 2000.\n[9] Lai, K., Huberman, B. A., and Fine, L. Tycoon: A\nDistributed Market-based Resource Allocation\nSystem. Tech. rep., Hewlett Packard, 2004.\n[10] Lavi, R., Mu\"alem, A., and Nisan, N. Towards a\nCharacterization of Truthful Combinatorial Auctions.\nIn Proceedings of the 44th Annual Symposium on\nFoundations of Computer Science (2003).\n[11] Lavi, R., and Nisan, N. Competitive Analysis of\nIncentive Compatible On-line Auctions. In Proceedings\nof the 2nd ACM Conference on Electronic Commerce\n(2000), pp. 233-241.\n[12] Lehmann, D., O\"Callaghan, L. I., and Shoham,\nY. Truth Revelation in Approximately Efficient\nCombinatorial Auctions. Journal of the ACM 49, 5\n(September 2002), 577-602.\n[13] Ng, C., Parkes, D. C., and Seltzer, M. Virtual\nWorlds: Fast and Strategyproof Auctions for Dynamic\nResou rce Allocation. In Proceedings of the 4th ACM\nConference on Electronic Commerce (2003).\n[14] Nisan, N. Bidding and Allocation in Combinatorial\nAuctions. In Proceedings of the 2nd ACM Conference\non Electronic Commerce (2000).\n[15] Nisan, N., and Ronen, A. Algorithmic Mechanism\nDesign. In Proceedings of the 31st Annual ACM\nSymposium on Theory of Computing (May 1999).\n[16] Nisan, N., and Ronen, A. Computationally Feasible\nVCG Mechanisms. In Proceedings of the 2nd ACM\nConference on Electronic Commerce (October 2000).\n[17] Regev, O., and Nisan, N. The POPCORN Market\n- an Online Market for Computational Resources. In\nProceedings of the 1st International Conference on\nInformation and Computation Economies (October\n1998).\n[18] Varian, H., and MacKie-Mason, J. K. Generalized\nVickrey auctions. Tech. rep., University of Michigan,\n1995.\n[19] Vickrey, W. Counterspeculation, Auctions and\nCompetitive Sealed Tenders. Journal of Finance\n(1961), 8-37.\n[20] Wolski, R., Plank, J. S., Brevik, J., and Bryan,\nT. Analyzing Market-based Resource Allocation\nStrategies for the Computational Grid. International\nJournal of High Performance Computing Applications\n(2001), 258-281.\n104\n": [""]}