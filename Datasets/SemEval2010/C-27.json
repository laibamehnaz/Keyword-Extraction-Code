{"A High-Accuracy, Low-Cost Localization System for\nWireless Sensor Networks\nRadu Stoleru, Tian He, John A. Stankovic, David Luebke\nDepartment of Computer Science\nUniversity of Virginia, Charlottesville, VA 22903\n{stoleru, tianhe, stankovic, luebke}@cs.virginia.edu\nABSTRACT\nThe problem of localization of wireless sensor nodes has long been\nregarded as very difficult to solve, when considering the realities\nof real world environments. In this paper, we formally describe,\ndesign, implement and evaluate a novel localization system, called\nSpotlight. Our system uses the spatio-temporal properties of well\ncontrolled events in the network (e.g., light), to obtain the\nlocations of sensor nodes. We demonstrate that a high accuracy in\nlocalization can be achieved without the aid of expensive hardware\non the sensor nodes, as required by other localization systems. We\nevaluate the performance of our system in deployments of Mica2\nand XSM motes. Through performance evaluations of a real\nsystem deployed outdoors, we obtain a 20cm localization error. A\nsensor network, with any number of nodes, deployed in a 2500m2\narea, can be localized in under 10 minutes, using a device that\ncosts less than $1000. To the best of our knowledge, this is the first\nreport of a sub-meter localization error, obtained in an outdoor\nenvironment, without equipping the wireless sensor nodes with\nspecialized ranging hardware.\nCategories and Subject Descriptors\nC.2.4 [Computer-Communications Networks]: Distributed\nSystems; C.3 [Special-Purpose and Application-Based\nSystems]: Real-Time and embedded systems.\nGeneral Terms\nAlgorithms, Measurement, Performance, Design, Experimentation\n1. INTRODUCTION\nRecently, wireless sensor network systems have been used in\nmany promising applications including military surveillance,\nhabitat monitoring, wildlife tracking etc. [12] [22] [33] [36]. While\nmany middleware services, to support these applications, have\nbeen designed and implemented successfully, localization - finding\nthe position of sensor nodes - remains one of the most difficult\nresearch challenges to be solved practically. Since most emerging\napplications based on networked sensor nodes require location\nawareness to assist their operations, such as annotating sensed data\nwith location context, it is an indispensable requirement for a\nsensor node to be able to find its own location.\nMany approaches have been proposed in the literature [4] [6]\n[13] [14] [19] [20] [21] [23] [27] [28], however it is still not clear\nhow these solutions can be practically and economically deployed.\nAn on-board GPS [23] is a typical high-end solution, which\nrequires sophisticated hardware to achieve high resolution time\nsynchronization with satellites. The constraints on power and cost\nfor tiny sensor nodes preclude this as a viable solution. Other\nsolutions require per node devices that can perform ranging among\nneighboring nodes. The difficulties of these approaches are \ntwofold. First, under constraints of form factor and power supply, the\neffective ranges of such devices are very limited. For example the\neffective range of the ultrasonic transducers used in the Cricket\nsystem is less than 2 meters when the sender and receiver are not\nfacing each other [26]. Second, since most sensor nodes are static,\ni.e. the location is not expected to change, it is not cost-effective to\nequip these sensors with special circuitry just for a one-time\nlocalization. To overcome these limitations, many range-free\nlocalization schemes have been proposed. Most of these schemes\nestimate the location of sensor nodes by exploiting the radio\nconnectivity information among neighboring nodes. These\napproaches eliminate the need of high-cost specialized hardware,\nat the cost of a less accurate localization. In addition, the radio\npropagation characteristics vary over time and are environment\ndependent, thus imposing high calibration costs for the range-free\nlocalizations schemes. With such limitations in mind, this paper\naddresses the following research challenge: How to reconcile the\nneed for high accuracy in location estimation with the cost to\nachieve it. Our answer to this challenge is a localization system\ncalled Spotlight. This system employs an asymmetric architecture,\nin which sensor nodes do not need any additional hardware, other\nthan what they currently have. All the sophisticated hardware and\ncomputation reside on a single Spotlight device. The Spotlight\ndevice uses a steerable laser light source, illuminating the sensor\nnodes placed within a known terrain. We demonstrate that this\nlocalization is much more accurate (i.e., tens of centimeters) than\nthe range-based localization schemes and that it has a much longer\neffective range (i.e., thousands of meters) than the solutions based\non ultra-sound/acoustic ranging. At the same time, since only a\nsingle sophisticated device is needed to localize the whole\nnetwork, the amortized cost is much smaller than the cost to add\nhardware components to the individual sensors.\n2. RELATED WORK\nIn this section, we discuss prior work in localization in two major\ncategories: the range-based localization schemes (which use either\nexpensive, per node, ranging devices for high accuracy, or less\naccurate ranging solutions, as the Received Signal Strength\nIndicator (RSSI)), and the range-free schemes, which use only\nconnectivity information (hop-by-hop) as an indication of\nproximity among the nodes.\nThe localization problem is a fundamental research problem in\nmany domains. In the field of robotics, it has been studied\nextensively [9] [10]. The reported localization errors are on the\norder of tens of centimeters, when using specialized ranging\nhardware, i.e. laser range finder or ultrasound. Due to the high cost\nand non-negligible form factor of the ranging hardware, these\nsolutions can not be simply applied to sensor networks.\nThe RSSI has been an attractive solution for estimating the\ndistance between the sender and the receiver. The RADAR system\n[2] uses the RSSI to build a centralized repository of signal\nstrengths at various positions with respect to a set of beacon nodes.\nThe location of a mobile user is estimated within a few meters. In\na similar approach, MoteTrack [17] distributes the reference RSSI\nvalues to the beacon nodes.\nSolutions that use RSSI and do not require beacon nodes have\nalso been proposed [5] [14] [24] [26] [29]. They all share the idea\nof using a mobile beacon. The sensor nodes that receive the\nbeacons, apply different algorithms for inferring their location. In\n[29], Sichitiu proposes a solution in which the nodes that receive\nthe beacon construct, based on the RSSI value, a constraint on\ntheir position estimate. In [26], Priyantha et al. propose MAL, a\nlocalization method in which a mobile node (moving strategically)\nassists in measuring distances between node pairs, until the\nconstraints on distances generate a rigid graph. In [24], Pathirana\net al. formulate the localization problem as an on-line estimation in\na nonlinear dynamic system and proposes a Robust Extended\nKalman Filter for solving it. Elnahrawy [8] provides strong\nevidence of inherent limitations of localization accuracy using\nRSSI, in indoor environments.\nA more precise ranging technique uses the time difference\nbetween a radio signal and an acoustic wave, to obtain pair wise\ndistances between sensor nodes. This approach produces smaller\nlocalization errors, at the cost of additional hardware. The Cricket\nlocation-support system [25] can achieve a location granularity of\ntens of centimeters with short range ultrasound transceivers.\nAHLoS, proposed by Savvides et al. [27], employs Time of\nArrival (ToA) ranging techniques that require extensive hardware\nand solving relatively large nonlinear systems of equations. A\nsimilar ToA technique is employed in [3].\nIn [30], Simon et al. implement a distributed system (using\nacoustic ranging) which locates a sniper in an urban terrain.\nAcoustic ranging for localization is also used by Kwon et al. [15].\nThe reported errors in localization vary from 2.2m to 9.5m,\ndepending on the type (centralized vs. distributed) of the Least\nSquare Scaling algorithm used.\nFor wireless sensor networks ranging is a difficult option. The\nhardware cost, the energy expenditure, the form factor, the small\nrange, all are difficult compromises, and it is hard to envision\ncheap, unreliable and resource-constraint devices make use of\nrange-based localization solutions. However, the high localization\naccuracy, achievable by these schemes is very desirable.\nTo overcome the challenges posed by the range-based\nlocalization schemes, when applied to sensor networks, a different\napproach has been proposed and evaluated in the past. This\napproach is called range-free and it attempts to obtain location\ninformation from the proximity to a set of known beacon nodes.\nBulusu et al. propose in [4] a localization scheme, called\nCentroid, in which each node localizes itself to the centroid of its\nproximate beacon nodes. In [13], He et al. propose APIT, a scheme\nin which each node decides its position based on the possibility of\nbeing inside or outside of a triangle formed by any three beacon\nnodes heard by the node. The Global Coordinate System [20],\ndeveloped at MIT, uses apriori knowledge of the node density in\nthe network, to estimate the average hop distance. The DV-*\nfamily of localization schemes [21], uses the hop count from\nknown beacon nodes to the nodes in the network to infer the\ndistance. The majority of range-free localization schemes have\nbeen evaluated in simulations, or controlled environments. Several\nstudies [11] [32] [34] have emphasized the challenges that real\nenvironments pose. Langendoen and Reijers present a detailed,\ncomparative study of several localization schemes in [16].\nTo the best of our knowledge, Spotlight is the first range-free\nlocalization scheme that works very well in an outdoor\nenvironment. Our system requires a line of sight between a single\ndevice and the sensor nodes, and the map of the terrain where the\nsensor field is located. The Spotlight system has a long effective\nrange (1000\"s meters) and does not require any infrastructure or\nadditional hardware for sensor nodes. The Spotlight system\ncombines the advantages and does not suffer from the\ndisadvantages of the two localization classes.\n3. SPOTLIGHT SYSTEM DESIGN\nThe main idea of the Spotlight localization system is to generate\ncontrolled events in the field where the sensor nodes were\ndeployed. An event could be, for example, the presence of light in\nan area. Using the time when an event is perceived by a sensor\nnode and the spatio-temporal properties of the generated events,\nspatial information (i.e. location) regarding the sensor node can be\ninferred.\nFigure 1. Localization of a sensor network using the\nSpotlight system\nWe envision, and depict in Figure 1, a sensor network\ndeployment and localization scenario as follows: wireless sensor\nnodes are randomly deployed from an unmanned aerial vehicle.\nAfter deployment, the sensor nodes self-organize into a network\nand execute a time-synchronization protocol. An aerial vehicle\n(e.g. helicopter), equipped with a device, called Spotlight, flies\nover the network and generates light events. The sensor nodes\ndetect the events and report back to the Spotlight device, through a\nbase station, the timestamps when the events were detected. The\nSpotlight device computes the location of the sensor nodes.\nDuring the design of our Spotlight system, we made the\nfollowing assumptions:\n- the sensor network to be localized is connected and a\nmiddleware, able to forward data from the sensor nodes to the\nSpotlight device, is present.\n- the aerial vehicle has a very good knowledge about its position\nand orientation (6 parameters: 3 translation and 3 rigid-body\nrotation) and it possesses the map of the field where the network\nwas deployed.\n- a powerful Spotlight device is available and it is able to generate\n14\nspatially large events that can be detected by the sensor nodes,\neven in the presence of background noise (daylight).\n- a line of sight between the Spotlight device and sensor nodes\nexists.\nOur assumptions are simplifying assumptions, meant to reduce\nthe complexity of the presentation, for clarity. We propose\nsolutions that do not rely on these simplifying assumptions, in\nSection 6.\nIn order to formally describe and generalize the Spotlight\nlocalization system, we introduce the following definitions.\n3.1 Definitions and Problem Formulation\nLet\"s assume that the space A \u00e2\u0160\u201aR3\ncontains all sensor nodes N,\nand that each node Ni is positioned at pi(x, y, z). To obtain pi(x, y,\nz), a Spotlight localization system needs to support three main\nfunctions, namely an Event Distribution Function (EDF) E(t), an\nEvent Detection Function D(e), and a Localization Function L(Ti).\nThey are formally defined as follows:\nDefinition 1: An event e(t, p) is a detectable phenomenon that\noccurs at time t and at point p \u00d1\u201d A. Examples of events are light,\nheat, smoke, sound, etc. Let Ti={ti1, ti2, \u00e2\u20ac\u00a6, tin} be a set of n\ntimestamps of events detected by a node i. Let T\"={t1\", t2\", \u00e2\u20ac\u00a6, tm\"}\nbe the set of m timestamps of events generated in the sensor field.\nDefinition 2: The Event Detection Function D(e) defines a\nbinary detection algorithm. For a given event e:\n\u00e2\u017d\u00a9\n\u00e2\u017d\u00a8\n\u00e2\u017d\u00a7\n=\ndetectednotisEventfalse,\ndetectedisEventtrue,\n)(\ne\ne\neD (1)\nDefinition 3: The Event Distribution Function (EDF) E(t)\ndefines the point distribution of events within A at time t:\n}{ truepteDApptE =\u00e2\u02c6\u00a7\u00e2\u02c6\u02c6= )),((|)( (2)\nDefinition 4: The Localization Function L(Ti) defines a\nlocalization algorithm with input Ti, a sequence of timestamps of\nevents detected by the node i:\nI\niTt\ni tETL\n\u00e2\u02c6\u02c6\n= )()( (3)\nFigure 2. Spotlight system architecture\nAs shown in Figure 2, the Event Detection Function D(e) is\nsupported by the sensor nodes. It is used to determine whether an\nexternal event happens or not. It can be implemented through\neither a simple threshold-based detection algorithm or other\nadvanced digital signal processing techniques. The Event\nDistribution E(t) and Localization Functions L(Ti) are implemented\nby a Spotlight device. The Localization function is an aggregation\nalgorithm which calculates the intersection of multiple sets of\npoints. The Event Distribution Function E(t) describes the\ndistribution of events over time. It is the core of the Spotlight\nsystem and it is much more sophisticated than the other two\nfunctions. Due to the fact that E(t) is realized by the Spotlight\ndevice, the hardware requirements for the sensor nodes remain\nminimal.\nWith the support of these three functions, the localization\nprocess goes as follows:\n1) A Spotlight device distributes events in the space A over a\nperiod of time.\n2) During the event distribution, sensor nodes record the time\nsequence Ti = {ti1, ti2, \u00e2\u20ac\u00a6, tin} at which they detect the\nevents.\n3) After the event distribution, each sensor node sends the\ndetection time sequence back to the Spotlight device.\n4) The Spotlight device estimates the location of a sensor\nnode i, using the time sequence Ti and the known E(t)\nfunction.\nThe Event Distribution Function E(t) is the core technique used\nin the Spotlight system and we propose three designs for it. These\ndesigns have different tradeoffs and the cost comparison is\npresented in Section 3.5.\n3.2 Point Scan Event Distribution Function\nTo illustrate the basic functionality of a Spotlight system, we start\nwith a simple sensor system where a set of nodes are placed along\na straight line (A = [0, l] R). The Spotlight device generates\npoint events (e.g. light spots) along this line with constant speed s.\nThe set of timestamps of events detected by a node i is Ti={ti1}.\nThe Event Distribution Function E(t) is:\n\u00e2\u0160\u201a\n}{ stpApptE *)( =\u00e2\u02c6\u00a7\u00e2\u02c6\u02c6= (4)\nwhere t \u00e2\u02c6\u02c6[0, l/s]. The resulting localization function is:\n}{ sttETL iii \u00e2\u02c6\u2014== 11 )()( (5)\nwhere D(e(ti1, pi)) = true for node i positioned at pi.\nThe implementation of the Event Distribution Function E(t) is\nstraightforward. As shown in Figure 3(a), when a light source\nemits a beam of light with the angular speed given by\nd\ns\ndt\nd\nS\n)(cos 2\n\u00ce\u00b1\u00ce\u00b1\n\u00ce\u00b1 == , a light spot event with constant speed s is\ngenerated along the line situated at distance d.\nFigure 3. The implementation of the Point Scan EDF\nThe Point Scan EDF can be generalized to the case where nodes\nare placed in a two dimensional plane R2\n. In this case, the\nSpotlight system progressively scans the plane to activate the\nsensor nodes. This scenario is depicted in Figure 3(b).\n3.3 Line Scan Event Distribution Function\nSome devices, e.g. diode lasers, can generate an entire line of\nevents simultaneously. With these devices, we can support the\nLine Scan Event Distributed Function easily. We assume that the\n15\nsensor nodes are placed in a two dimensional plane (A=[l x\nl] \u00e2\u0160\u201aR2\n) and that the scanning speed is s. The set of timestamps of\nevents detected by a node i is Ti={ti1, ti2}.\nFigure 4. The implementation of the Line Scan EDF\nThe Line Scan EDF is defined as follows:\n( ){ ks,*tpl][0,kp(t)E kkx =\u00e2\u02c6\u00a7\u00e2\u02c6\u02c6= }\nfor t \u00e2\u02c6\u02c6[0, l/s] and:\n({ ls*tk,pl][0,kp(t)E kky \u00e2\u02c6\u2019=\u00e2\u02c6\u00a7\u00e2\u02c6\u02c6= )} (6)\nfor t \u00e2\u02c6\u02c6[ l/s, 2l/s].\nU )()()( tEtEtE yx=\nWe can localize a node by calculating the intersection of the\ntwo event lines, as shown in Figure 4. More formally:\nI )()()( 21 iii tEtETL = (7)\nwhere D(e(ti1, pi)) = true, D(e(ti2, pi)) = true for node i positioned\nat pi.\n3.4 Area Cover Event Distribution Function\nOther devices, such as light projectors, can generate events that\ncover an area. This allows the implementation of the Area Cover\nEDF. The idea of Area Cover EDF is to partition the space A into\nmultiple sections and assign a unique binary identifier, called\ncode, to each section. Let\"s suppose that the localization is done\nwithin a plane (A R2\n). Each section Sk within A has a unique\ncode k. The Area Cover EDF is then defined as follows:\n\u00e2\u0160\u201a\n\u00e2\u017d\u00a9\n\u00e2\u017d\u00a8\n\u00e2\u017d\u00a7\n=\n0iskofbitjthiffalse,\n1iskofbitjthiftrue,\n),( jkBIT (8)\n}{ truetkBITSpptE k =\u00e2\u02c6\u00a7\u00e2\u02c6\u02c6= ),()(\nand the corresponding localization algorithm is:\n{ \u00e2\u02c6\u00a7\u00e2\u02c6\u02c6=\u00e2\u02c6\u00a7== )),(()(|)( iki TtiftruetkBITSCOGppTL\n(9)})`),(( iTTtiffalsetkBIT \u00e2\u02c6\u2019\u00e2\u02c6\u02c6=\nwhere COG(Sk) denotes the center of gravity of Sk.\nWe illustrate the Area Cover EDF with a simple example. As\nshown in Figure 5, the plane A is divided in 16 sections. Each\nsection Sk has a unique code k. The Spotlight device distributes the\nevents according to these codes: at time j a section Sk is covered by\nan event (lit by light), if jth\nbit of k is 1. A node residing anywhere\nin the section Sk is localized at the center of gravity of that section.\nFor example, nodes within section 1010 detect the events at time T\n= {1, 3}. At t = 4 the section where each node resides can be\ndetermined\nA more accurate localization requires a finer partitioning of the\nplane, hence the number of bits in the code will increase.\nConsidering the noise that is present in a real, outdoor\nenvironment, it is easy to observe that a relatively small error in\ndetecting the correct bit pattern could result in a large localization\nerror. Returning to the example shown in Figure 5, if a sensor node\nis located in the section with code 0000, and due to the noise, at\ntime t = 3, it thinks it detected an event, it will incorrectly\nconclude that its code is 1000, and it positions itself two squares\nbelow its correct position. The localization accuracy can\ndeteriorate even further, if multiple errors are present in the\ntransmission of the code.\nA natural solution to this problem is to use error-correcting\ncodes, which greatly reduce the probability of an error, without\npaying the price of a re-transmission, or lengthening the\ntransmission time too much. Several error correction schemes have\nbeen proposed in the past. Two of the most notable ones are the\nHamming (7, 4) code and the Golay (23, 12) code. Both are\nperfect linear error correcting codes. The Hamming coding scheme\ncan detect up to 2-bit errors and correct 1-bit errors. In the\nHamming (7, 4) scheme, a message having 4 bits of data (e.g.\ndddd, where d is a data bit) is transmitted as a 7-bit word by\nadding 3 error control bits (e.g. dddpdpp, where p is a parity bit).\nFigure 5. The steps of Area Cover EDF. The events cover\nthe shaded areas.\nThe steps of the Area Cover technique, when using Hamming\n(7, 4) scheme are shown in Figure 6. Golay codes can detect up to\n6-bit errors and correct up to 3-bit errors. Similar to Hamming (7,\n4), Golay constructs a 23-bit codeword from 12-bit data. Golay\ncodes have been used in satellite and spacecraft data transmission\nand are most suitable in cases where short codeword lengths are\ndesirable.\nFigure 6. The steps of Area Cover EDF with Hamming (7, 4)\nECC. The events cover the shaded areas.\nLet\"s assume a 1-bit error probability of 0.01, and a 12-bit\nmessage that needs to be transmitted. The probability of a failed\ntransmission is thus: 0.11, if no error detection and correction is\nused; 0.0061 for the Hamming scheme (i.e. more than 1-bit error);\nand 0.000076 for the Golay scheme (i.e. more than 3-bit errors).\nGolay is thus 80 times more robust that the Hamming scheme,\nwhich is 20 times more robust than the no error correction scheme.\n16\nConsidering that a limited number of corrections is possible by\nany coding scheme, a natural question arises: can we minimize the\nlocalization error when there are errors that can not be corrected?\nThis can be achieved by a clever placement of codes in the grid.\nAs shown in Figure 7, the placement A, in the presence of a 1-bit\nerror has a smaller average localization error when compared to\nthe placement B. The objective of our code placement strategy is\nto reduce the total Euclidean distance between all pairs of codes\nwith Hamming distances smaller than K, the largest number of\nexpected 1-bit errors.\nFigure 7. Different code placement strategies\nFormally, a placement is represented by a function P: [0, l]d\n\u00e2\u2020\u2019\nC, which assigns a code to every coordinate in the d-dimensional\ncube of size l (e.g., in the planar case, we place codes in a \n2dimensional grid). We denote by dE(i, j) the Euclidean distance\nand by dH(i, j) the Hamming distance between two codes i and j. In\na noisy environment, dH(i,j) determines the crossover probability\nbetween the two codes. For the case of independent detections, the\nhigher dH(i, j) is, the lower the crossover probability will be. The\nobjective function is defined as follows:\nd\nKjid\nE ljiwherejid\nH\n],0[,}),(min{\n),(\n\u00e2\u02c6\u02c6\u00e2\u02c6\u2018\u00e2\u2030\u00a4\n(10)\nEquation 10 is a non-linear and non-convex programming\nproblem. In general, it is analytically hard to obtain the global\nminimum. To overcome this, we propose a Greedy Placement\nmethod to obtain suboptimal results. In this method we initialize\nthe 2-dimensional grid with codes. Then we swap the codes within\nthe grid repeatedly, to minimize the objective function. For each\nswap, we greedily chose a pair of codes, which can reduce the\nobjective function (Equation 10) the most. The proposed Greedy\nPlacement method ends when no swap of codes can further\nminimize the objective function.\nFor evaluation, we compared the average localization error in\nthe presence of K-bit error for two strategies: the proposed Greedy\nPlacement and the Row-Major Placement (it places the codes\nconsecutively in the array, in row-first order).\n0\n0.5\n1\n1.5\n2\n2.5\n3\n3.5\n4\n4 9 16 25 36 49 64 81\nGrid Size\nLocalizationError[gridunit]\nRow-major Consecutive placement\nGreedy Placement\nFigure 8. Localization error with code placement and no\nECC\nAs Figure 8 shows, if no error detection/correction capability is\npresent and 1-bit errors occur, then our Greedy Placement method\ncan reduce the localization error by an average 23%, when\ncompared to the Row-Major Placement. If error detection and\ncorrection schemes are used (e.g. Hamming (12, 8) and if 3-bit\nerrors occur (K=3) then the Greedy Placement method reduces\nlocalization error by 12%, when compared to the Row-Major\nPlacement, as shown in Figure 9. If K=1, then there is no benefit in\nusing the Greedy Placement method, since the 1-bit error can be\ncorrected by the Hamming scheme.\n0\n0.5\n1\n1.5\n2\n2.5\n3\n3.5\n4\n4.5\n4 9 16 25 36 49 64 81\nGrid Size\nLocalizationError[gridunit]\nRow-major Consecutive placement\nGreedy Placement\nFigure 9. Localization error with code placement and\nHamming ECC\n3.5 Event Distribution Function Analysis\nAlthough all three aforementioned techniques are able to localize\nthe sensor nodes, they differ in the localization time,\ncommunication overhead and energy consumed by the Event\nDistribution Function (let\"s call it Event Overhead). Let\"s assume\nthat all sensor nodes are located in a square with edge size D, and\nthat the Spotlight device can generate N events (e.g. Point, Line\nand Area Cover events) every second and that the maximum\ntolerable localization error is r. Table 1 presents the execution cost\ncomparison of the three different Spotlight techniques.\nTable 1. Execution Cost Comparison\nCriterion Point Scan Line Scan Area Cover\nLocalization Time NrD /)/( 22 NrD /)/2( NDlogr /\n# Detections 1 2 logrD\n# Time Stamps 1 2 logrD\nEvent Overhead D2\n2D2\nD2\nlogrD/2\nTable 1 indicates that the Event Overhead for the Point Scan\nmethod is the smallest - it requires a one-time coverage of the area,\nhence the D2\n. However the Point Scan takes a much longer time\nthan the Area Cover technique, which finishes in logrD seconds.\nThe Line Scan method trades the Event Overhead well with the\nlocalization time. By doubling the Event Overhead, the Line Scan\nmethod takes only r/2D percentage of time to complete, when\ncompared with the Point Scan method. From Table 1, it can be\nobserved that the execution costs do not depend on the number of\nsensor nodes to be localized.\nIt is important to remark the ratio Event Overhead per unit time,\nwhich is indicative of the power requirement for the Spotlight\ndevice. This ratio is constant for the Point Scan (r2\n*N) while it\ngrows linearly with area, for the Area Cover (D2\n*N/2). If the\ndeployment area is very large, the use of the Area Cover EDF is\nprohibitively expensive, if not impossible. For practical purposes,\nthe Area Cover is a viable solution for small to medium size\nnetworks, while the Line Scan works well for large networks. We\ndiscuss the implications of the power requirement for the Spotlight\ndevice, and offer a hybrid solution in Section 6.\n3.6 Localization Error Analysis\nThe accuracy of localization with the Spotlight technique depends\non many aspects. The major factors that were considered during\nthe implementation of the system are discussed below:\n17\n- Time Synchronization: the Spotlight system exchanges time\nstamps between sensor nodes and the Spotlight device. It is\nnecessary for the system to reach consensus on global time\nthrough synchronization. Due to the uncertainty in hardware\nprocessing and wireless communication, we can only confine such\nerrors within certain bounds (e.g. one jiffy). An imprecise input to\nthe Localization Function L(T) leads to an error in node\nlocalization.\n- Uncertainty in Detection: the sampling rate of the sensor nodes is\nfinite, consequently, there will be an unpredictable delay between\nthe time when an event is truly present and when the sensor node\ndetects it. Lower sampling rates will generate larger localizations\nerrors.\n- Size of the Event: the events distributed by the Spotlight device\ncan not be infinitely small. If a node detects one event, it is hard\nfor it to estimate the exact location of itself within the event.\n- Realization of Event Distribution Function: EDF defines\nlocations of events at time t. Due to the limited accuracy (e.g.\nmechanical imprecision), a Spotlight device might generate events\nwhich locate differently from where these events are supposed to\nbe.\nIt is important to remark that the localization error is\nindependent of the number of sensor nodes in the network. This\nindependence, as well as the aforementioned independence of the\nexecution cost, indicate the very good scalability properties (with\nthe number of sensor nodes, but not with the area of deployment)\nthat the Spotlight system possesses.\n4. SYSTEM IMPLEMENTATION\nFor our performance evaluation we implemented two Spotlight\nsystems. Using these two implementations we were able to\ninvestigate the full spectrum of Event Distribution techniques,\nproposed in Section 3, at a reduced one time cost (less than\n$1,000).\nThe first implementation, called \u00ce\u00bcSpotlight, had a short range\n(10-20 meters), however its capability of generating the entire\nspectrum of EDFs made it very useful. We used this\nimplementation mainly to investigate the capabilities of the\nSpotlight system and tune its performance. It was not intended to\nrepresent the full solution, but only a scaled down version of the\nsystem.\nThe second implementation, the Spotlight system, had a much\nlonger range (as far as 6500m), but it was limited in the types of\nEDFs that it can generate. The goal of this implementation was to\nshow how the Spotlight system works in a real, outdoor\nenvironment, and show correlations with the experimental results\nobtained from the \u00ce\u00bcSpotlight system implementation.\nIn the remaining part of this section, we describe how we\nimplemented the three components (Event Distribution, Event\nDetection and Localization functions) of the Spotlight architecture,\nand the time synchronization protocol, a key component of our\nsystem.\n4.1 \u00c2\u00b5Spotlight System\nThe first system we built, called \u00ce\u00bcSpotlight, used as the Spotlight\ndevice, an Infocus LD530 projector connected to an IBM\nThinkpad laptop. The system is shown in Figure 10.\nThe Event Distribution Function was implemented as a Java\nGUI. Due to the stringent timing requirements and the delay\ncaused by the buffering in the windowing system of a PC, we used\nthe Full-Screen Exclusive Mode API provided by Java2. This\nallowed us to bypass the windowing system and more precisely\nestimate the time when an event is displayed by the projector,\nhence a higher accuracy of timestamps of events. Because of the\n50Hz refresh rate of our projector, there was still an uncertainty in\nthe time stamping of the events of 20msec. We explored the\npossibility of using and modifying the Linux kernel to expose the\nvertical synch (VSYNCH) interrupt, generated by the displaying\ndevice after each screen refresh, out of the kernel mode. The\nperformance evaluation results showed, however, that this level of\naccuracy was not needed.\nThe sensor nodes that we used were Berkeley Mica2 motes\nequipped with MTS310 multi-sensor boards from Crossbow. This\nsensor board contains a CdSe photo sensor which can detect the\nlight from the projector.\nFigure 10. \u00ce\u00bcSpotlight system implementation\nWith this implementation of the Spotlight system, we were able\nto generate Point, Line and Area Scan events.\n4.2 Spotlight System\nThe second Spotlight system we built used, as the Spotlight\ndevice, diode lasers, a computerized telescope mount (Celestron\nCG-5GT, shown in Figure 11), and an IBM Thinkpad laptop. The\nlaptop was connected, through RS232 interfaces, to the telescope\nmount and to one XSM600CA [7] mote, acting as a base station.\nThe diode lasers we used ranged in power from 7mW to 35mW.\nThey emitted at 650nm, close to the point of highest sensitivity for\nCdSe photosensor. The diode lasers were equipped with lenses that\nallowed us to control the divergence of the beam.\nFigure 11. Spotlight system implementation\nThe telescope mount has worm gears for a smooth motion and\nhigh precision angular measurements. The two angular measures\nthat we used were the, so called, Alt (from Altitude) and Az (from\nAzimuth). In astronomy, the Altitude of a celestial object is its\nangular distance above or below the celestial horizon, and the\nAzimuth is the angular distance of an object eastwards of the\nmeridian, along the horizon.\n18\nThe laptop computer, through a Java GUI, controls the motion\nof the telescope mount, orienting it such that a full Point Scan of\nan area is performed, similar to the one described in Figure 3(b).\nFor each turning point i, the 3-tuple (Alti and Azi angles and the\ntimestamp ti) is recorded. The Spotlight system uses the timestamp\nreceived from a sensor node j, to obtain the angular measures Altj\nand Azj for its location.\nFor the sensor nodes, we used XSM motes, mainly because of\ntheir longer communication range. The XSM mote has the photo\nsensor embedded in its main board. We had to make minor\nadjustments to the plastic housing, in order to expose the photo\nsensor to the outside. The same mote code, written in nesC, for\nTinyOS, was used for both \u00c2\u00b5Spotlight and Spotlight system\nimplementations.\n4.3 Event Detection Function D(t)\nThe Event Detection Function aims to detect the beginning of an\nevent and record the time when the event was observed. We\nimplemented a very simple detection function based on the\nobserved maximum value. An event i will be time stamped with\ntime ti, if the reading from the photo sensor dti, fulfills the\ncondition:\nitdd <\u00ce\u201d+max\nwhere dmax is the maximum value reported by the photo sensor\nbefore ti and \u00ce\u201d is a constant which ensures that the first large\ndetection gives the timestamp of the event (i.e. small variations\naround the first large signal are not considered). Hence \u00ce\u201d\nguarantees that only sharp changes in the detected value generate\nan observed event.\n4.4 Localization Function L(T)\nThe Localization Function is implemented in the Java GUI. It\nmatches the timestamps created by the Event Distribution Function\nwith those reported by the sensor nodes.\nThe Localization Function for the Point Scan EDF has as input\na time sequence Ti = {t1}, as reported by node i. The function\nperforms a simple search for the event with a timestamp closest to\nt1. If t1 is constrained by:\n11 +\n<< nn ee ttt\nwhere en and en+1 are two consecutive events, then the obtained\nlocation for node i is:\n11\n, ++\n== nn ee yyxx\nThe case for the Line Scan is treated similarly. The input to the\nLocalization Function is the time sequence Ti = {t1, t2} as reported\nby node i. If the reported timestamps are constrained by:\n11 +\n<< nn ee ttt , and\n12 +\n<< mm ee ttt\nwhere en and en+1 are two consecutive events on the horizontal\nscan and em and em+1 are two consecutive events on vertical scan,\nthen the inferred location for node i is:\n11\n, ++\n== mn ee yyxx\nThe Localization Function for the Area Cover EDF has as input\na timestamp set Ti={ti1, ti2, \u00e2\u20ac\u00a6, tin} of the n events, detected by node\ni. We recall the notation for the set of m timestamps of events\ngenerated by the Spotlight device, T\"={t1\", t2\", \u00e2\u20ac\u00a6, tm\"}. A code\ndi=di1di2\u00e2\u20ac\u00a6dim is then constructed for each node i, such that dij=1 if\ntj\" \u00e2\u02c6\u02c6Ti and dij=0 if tj\" \u00e2\u02c6\u2030 Ti. The function performs a search for an\nevent with an identical code. If the following condition is true:\nnei dd =\nwhere en is an event with code den, then the inferred location for\nnode i is:\nnn ee yyxx == ,\n4.5 Time Synchronization\nThe time synchronization in the Spotlight system consists of two\nparts:\n- Synchronization between sensor nodes: This is achieved through\nthe Flooding Time Synchronization Protocol [18]. In this protocol,\nsynchronized nodes (the root node is the only synchronized node\nat the beginning) send time synchronization message to\nunsynchronized nodes. The sender puts the time stamp into the\nsynchronization message right before the bytes containing the time\nstamp are transmitted. Once a receiver gets the message, it follows\nthe sender's time and performs the necessary calculations to\ncompensate for the clock drift.\n- Synchronization between the sensor nodes and the Spotlight\ndevice: We implemented this part through a two-way handshaking\nbetween the Spotlight device and one node, used as the base\nstation. The sensor node is attached to the Spotlight device through\na serial interface.\nFigure 12. Two-way synchronization\nAs shown in Figure 12, let\"s assume that the Spotlight device\nsends a synchronization message (SYNC) at local time T1, the\nsensor node receives it at its local time T2 and acknowledges it at\nlocal time T3 (both T2 and T3 are sent back through ACK). After\nthe Spotlight device receives the ACK, at its local time T4, the time\nsynchronization can be achieved as follows:\n2\n)()( 4312 TTTT\nOffset\n\u00e2\u02c6\u2019+\u00e2\u02c6\u2019\n= (11)\nOffsetTTT spotlightnodeglobal +==\nWe note that Equation 11 assumes that the one trip delays are\nthe same in both directions. In practice this does not hold well\nenough. To improve the performance, we separate the handshaking\nprocess from the timestamp exchanges. The handshaking is done\nfast, through a 2 byte exchange between the Spotlight device and\nthe sensor node (the timestamps are still recorded, but not sent).\nAfter this fast handshaking, the recorded time stamps are\nexchanged. The result indicates that this approach can significantly\nimprove the accuracy of time synchronization.\n5. PERFORMANCE EVALUATION\nIn this section we present the performance evaluation of the\nSpotlight systems when using the three event distribution\nfunctions, i.e. Point Scan, Line Scan and Area Cover, described in\nSection 3.\n19\nFor the \u00c2\u00b5Spotlight system we used 10 Mica2 motes. The sensor\nnodes were attached to a vertically positioned Veltex board. By\nprojecting the light to the sensor nodes, we are able to generate\nwell controlled Point, Line and Area events. The Spotlight device\nwas able to generate events, i.e. project light patterns, covering an\narea of approximate size 180x140cm2\n. The screen resolution for\nthe projector was 1024x768, and the movement of the Point Scan\nand Line Scan techniques was done through increments (in the\nappropriate direction) of 10 pixels between events.\nEach experimental point was obtained from 10 successive runs\nof the localization procedure. Each set of 10 runs was preceded by\na calibration phase, aimed at estimating the total delays (between\nthe Spotlight device and each sensor node) in detecting an event.\nDuring the calibration, we created an event covering the entire\nsensor field (illuminated the entire area). The timestamp reported\nby each sensor node, in conjunction with the timestamp created by\nthe Spotlight device were used to obtain the time offset, for each\nsensor node. More sophisticated calibration procedures have been\nreported previously [35]. In addition to the time offset, we added a\nmanually configurable parameter, called bias. It was used to best\nestimate the center of an event.\nFigure 13. Deployment site for the Spotlight system\nFor the Spotlight system evaluation, we deployed 10 XSM\nmotes in a football field. The site is shown in Figure 13 (laser\nbeams are depicted with red arrows and sensor nodes with white\ndots). Two sets of experiments were run, with the Spotlight device\npositioned at 46m and at 170m from the sensor field. The sensor\nnodes were aligned and the Spotlight device executed a Point\nScan. The localization system computed the coordinates of the\nsensor nodes, and the Spotlight device was oriented, through a\nGoTo command sent to the telescope mount, towards the\ncomputed location. In the initial stages of the experiments, we\nmanually measured the localization error.\nFor our experimental evaluation, the metrics of interest were as\nfollows:\n- Localization error, defined as the distance, between the real\nlocation and the one obtained from the Spotlight system.\n- Localization duration, defined as the time span between the first\nand last event.\n- Localization range, defined as the maximum distance between\nthe Spotlight device and the sensor nodes.\n- A Localization Cost function Cost:{{localization accuracy},\n{localization duration}} \u00e2\u2020\u2019 [0,1] quantifies the trade-off between\nthe accuracy in localization and the localization duration. The\nobjective is to minimize the Localization Cost function. By\ndenoting with ei the localization error for the ith\nscenario, with di\nthe localization duration for the ith\nscenario, with max(e) the\nmaximum localization error, with max(d) the maximum\nlocalization duration, and with \u00ce\u00b1 the importance factor, the\nLocalization Cost function is formally defined as:\n)max(\n)1(\n)max(\n),(\nd\nd\ne\ne\ndeCost ii\nii \u00e2\u02c6\u2014\u00e2\u02c6\u2019+\u00e2\u02c6\u2014= \u00ce\u00b1\u00ce\u00b1\n- Localization Bias. This metric is used to investigate the\neffectiveness of the calibration procedure. If, for example, all\ncomputed locations have a bias in the west direction, a calibration\nfactor can be used to compensate for the difference.\nThe parameters that we varied during the performance\nevaluation of our system were: the type of scanning (Point, Line\nand Area), the size of the event, the duration of the event (for Area\nCover), the scanning speed, the power of the laser and the distance\nbetween the Spotlight device and sensor field, to estimate the\nrange of the system.\n5.1 Point Scan - \u00ce\u00bcSpotlight system\nIn this experiment, we investigated how the size of the event and\nthe scanning speed affect the localization error. Figure 14 shows\nthe mean localization errors with their standard deviations.\nIt can be observed, that while the scanning speed, varying\nbetween 35cm/sec and 87cm/sec has a minor influence on the\nlocalization accuracy, the size of the event has a dramatic effect.\n0\n2\n4\n6\n8\n10\n12\n14\n7.0 10.5 14.0 17.5 21.0 24.5\nEvent Size [cm]\nLocationerror[cm]\n87cm/sec\n58cm/sec\n43cm/sec\n35cm/sec\nFigure 14. Localization Error vs. Event Size for the Point\nScan EDF\nThe obtained localization error varied from as little as 2cm to\nover 11cm for the largest event. This dependence can be explained\nby our Event Detection algorithm: the first detection above a\nthreshold gave the timestamp for the event.\nThe duration of the localization scheme is shown in Figure 15.\nThe dependency of the localization duration on the size of the\nevent and scanning speed is natural. A bigger event allows a\nreduction in the total duration of up to 70%. The localization\nduration is directly proportional to the scanning speed, as\nexpected, and depicted in Figure 15.\n0\n20\n40\n60\n80\n100\n120\n7.0 10.5 14.0 17.5 21.0 24.5\nEvent Size [cm]\nLocalizationDuration[sec]\n87cm/sec\n58cm/sec\n43cm/sec\n35cm/sec\nFigure 15. Localization Duration vs. Event Size for the Point\nScan EDF\n20\nAn interesting trade-off is between the localization accuracy\n(usually the most important factor), and the localization time\n(important in environments where stealthiness is paramount).\nFigure 16 shows the Localization Cost function, for \u00ce\u00b1 = 0.5\n(accuracy and duration are equally important).\nAs shown in Figure 16, it can be observed that an event size of\napproximately 10-15cm (depending on the scanning speed)\nminimizes our Cost function. For \u00ce\u00b1 = 1, the same graph would be a\nmonotonically increasing function, while for \u00ce\u00b1 = 0, it would be\nmonotonically decreasing function.\n0.40\n0.45\n0.50\n0.55\n0.60\n0.65\n0.70\n5.0 10.0 15.0 20.0 25.0 30.0\nEvent Size [cm]\nLocalizationCost[%]\n87cm/sec\n58cm/sec\n43cm/sec\n35cm/sec\nFigure 16. Localization Cost vs. Event Size for the Point\nScan EDF\n5.2 Line Scan - \u00ce\u00bcSpotlight system\nIn a similar manner to the Point Scan EDF, for the Line Scan EDF\nwe were interested in the dependency of the localization error and\nduration on the size of the event and scanning speed.\nWe represent in Figure 17 the localization error for different\nevent sizes. It is interesting to observe the dependency (concave\nshape) of the localization error vs. the event size. Moreover, a\nquestion that should arise is why the same dependency was not\nobserved in the case of Point Scan EDF.\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1.7 3.5 7.0 10.5 14.0 17.5\nEvent Size [cm]\nLocationerror[cm]\n87cm/sec 58cm/sec\n43cm/sec 35cm/sec\nFigure 17. Localization Error vs. Event Size for the Line\nScan EDF\nThe explanation for this concave dependency is the existence of\na bias in location estimation. As a reminder, a bias factor was\nintroduced in order to best estimate the central point of events that\nhave a large size. What Figure 17 shows is the fact that the bias\nfactor was optimal for an event size of approximately 7cm. For\nevents smaller and larger than this, the bias factor was too large,\nand too small, respectively. Thus, it introduced biased errors in the\nposition estimation.\nThe reason why we did not observe the same dependency in the\ncase of the Point Scan EDF was that we did not experiment with\nevent sizes below 7cm, due to the long time it would have taken to\nscan the entire field with events as small as 1.7cm.\nThe results for the localization duration as a function of the size\nof the event are shown in Figure 18. As shown, the localization\nduration is directly proportional to the scanning speed. The size of\nthe event has a smaller influence on the localization duration. One\ncan remark the average localization duration of about 10sec, much\nshorter then the duration obtained in the Point Scan experiment.\nThe Localization Cost function dependency on the event size\nand scanning speed, for \u00ce\u00b1=0.5, is shown in Figure 19. The\ndependency on the scanning speed is very small (the Cost Function\nachieves a minimum in the same 4-6cm range). It is interesting to\nnote that this 4-6cm optimal event size is smaller than the one\nobserved in the case of Point Scan EDF. The explanation for this is\nthat the smaller localization duration observed in the Line Scan\nEDF, allowed a shift (towards smaller event sizes) in the total\nLocalization Cost Function.\n0\n5\n10\n15\n20\n1.7 3.5 7.0 10.5 14.0 17.5\nEvent Size [cm]\nLocalizationDuration[sec]\n87cm/sec 58cm/sec\n43cm/sec 35cm/sec\nFigure 18. Localization Duration vs. Event Size for the Line\nScan EDF\n0.50\n0.55\n0.60\n0.65\n0.70\n0.75\n0.80\n1.0 3.0 5.0 7.0 9.0 11.0\nEvent Size [cm]\nLocalizationCost[%]\n87cm/sec 58cm/sec\n43cm/sec 35cm/sec\nFigure 19. Cost Function vs. Event Size for the Line Scan\nEDF\nDuring our experiments with the Line Scan EDF, we observed\nevidence of a bias in location estimation. The estimated locations\nfor all sensor nodes exhibited different biases, for different event\nsizes. For example, for an event size of 17.5cm, the estimated\nlocation for sensor nodes was to the upper-left size of the actual\nlocation. This was equivalent to an early detection, since our\nscanning was done from left to right and from top to bottom. The\nscanning speed did not influence the bias.\nIn order to better understand the observed phenomena, we\nanalyzed our data. Figure 20 shows the bias in the horizontal\ndirection, for different event sizes (the vertical bias was almost\nidentical, and we omit it, due to space constraints).\nFrom Figure 20, one can observe that the smallest observed\nbias, and hence the most accurate positioning, was for an event of\nsize 7cm. These results are consistent with the observed\nlocalization error, shown in Figure 17.\nWe also adjusted the measured localization error (shown in\nFigure 17) for the observed bias (shown in Figure 20). The results\nof an ideal case of Spotlight Localization system with Line Scan\nEDF are shown in Figure 21. The errors are remarkably small,\nvarying between 0.1cm and 0.8cm, with a general trend of higher\nlocalization errors for larger event sizes.\n21\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n1.7 3.5 7.0 10.5 14.0 17.5\nEvent Size [cm]\nHorizontalBias[cm]\n87cm/sec 58cm/sec\n43cm/sec 35cm/sec\nFigure 20. Position Estimation Bias for the Line Scan EDF\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n1.2\n1.7 3.5 7.0 10.5 14.0 17.5\nEvent Size [cm]\nLocalizationErrorw/oBias[cm]\n87cm/sec 58cm/sec\n43cm/sec 35cm/sec\nFigure 21. Position Estimation w/o Bias (ideal), for the Line\nScan EDF\n5.3 Area Cover - \u00ce\u00bcSpotlight system\nIn this experiment, we investigated how the number of bits used to\nquantify the entire sensor field, affected the localization accuracy.\nIn our first experiment we did not use error correcting codes. The\nresults are shown in Figure 22.\n0.0\n0.5\n1.0\n1.5\n2.0\n2.5\n3.0\n3.5\n6 8 10 12\nNumber of Bits\nLocationerror[cm]\n20ms/event 40ms/event 60ms/event\n80ms/event 100ms/event\nFigure 22. Localization Error vs. Event Size for the Area\nCover EDF\nOne can observe a remarkable accuracy, with localization error\non the order of 0.3-0.6cm. What is important to observe is the\nvariance in the localization error. In the scenario where 12 bits\nwere used, while the average error was very small, there were a\ncouple of cases, where an incorrect event detection generated a\nlarger than expected error. An example of how this error can occur\nwas described in Section 3.4. The experimental results, presented\nin Figure 22, emphasize the need for error correction of the bit\npatterns observed and reported by the sensor nodes.\nThe localization duration results are shown in Figure 23. It can\nbe observed that the duration is directly proportional with the\nnumber of bits used, with total durations ranging from 3sec, for the\nleast accurate method, to 6-7sec for the most accurate. The\nduration of an event had a small influence on the total localization\ntime, when considering the same scenario (same number of bits for\nthe code).\nThe Cost Function dependency on the number of bits in the\ncode, for \u00ce\u00b1=0.5, is shown in Figure 24. Generally, since the\nlocalization duration for the Area Scan can be extremely small, a\nhigher accuracy in the localization is desired. While the Cost\nfunction achieves a minimum when 10 bits are used, we attribute\nthe slight increase observed when 12 bits were used to the two \n12bit scenarios where larger than the expected errors were observed,\nnamely 6-7mm (as shown in Figure 22).\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n6 8 10 12\nNumber of Bits\nLocalizationDuration[sec]\n20ms/event 40ms/event 60ms/event\n80ms/event 100ms/event\nFigure 23. Localization Duration vs. Event Size for the Area\nCover EDF\n0.40\n0.45\n0.50\n0.55\n0.60\n0.65\n0.70\n0.75\n0.80\n4 6 8 10 12 14\nNumber of Bits\nCostFunction[%]\n20ms/event\n40ms/event\n60ms/event\n80ms/event\n100ms/event\nFigure 24. Cost Function vs. Event Size for the Area Cover\nEDF\n-0.4\n-0.1\n0.2\n0.5\n0.8\n1.1\n1.4\n20 40 60 80 100\nEvent Duration [ms/event]\nLocationerror[cm]\nw/o ECC\nw/ ECC\nFigure 25. Localization Error w/ and w/o Error Correction\nThe two problematic scenarios (shown in Figure 22, where for\n12-bit codes we observed errors larger than the event size, due to\nerrors in detection) were further explored by using error correction\ncodes. As described in Section 3.3, we implemented an extended\nGolay (24, 12) error correction mechanism in our location\nestimation algorithm.\nThe experimental results are depicted in Figure 25, and show a\nconsistent accuracy. The scenario without error correction codes,\nis simply the same 12-bit code scenario, shown in Figure 22. We\nonly investigated the 12-bit scenario, due to its match with the \n12bit data required by the Golay encoding scheme (extended Golay\nproducing 24-bit codewords).\n22\n5.4 Point Scan - Spotlight system\nIn this section we describe the experiments performed at a football\nstadium, using our Spotlight system. The hardware that we had\navailable allowed us to evaluate the Point Scan technique of the\nSpotlight system. In our evaluation, we were interested to see the\nperformance of the system at different ranges. Figures 26 and 27\nshow the localization error versus the event size at two different\nranges: 46m and 170m.\nFigure 26 shows a remarkable accuracy in localization. The\nerrors are in the centimeter range. Our initial, manual\nmeasurements of the localization error were most of the time\ndifficult to make, since the spot of the laser was almost perfectly\ncovering the XSM mote. We are able to achieve localization errors\nof a few centimeters, which only range-based localization schemes\nare able to achieve [25]. The observed dependency on the size of\nthe event is similar to the one observed in the \u00ce\u00bcSpotlight system\nevaluation, and shown in Figure 14. This proved that the\n\u00ce\u00bcSpotlight system is a viable alternative for investigating complex\nEDFs, without incurring the costs for the necessary hardware.\n0\n5\n10\n15\n20\n25\n0 5 10 15 20 25 30\nEvent Size [cm]\nLocalizationError[cm]\n0.41m/sec\n0.81m/sec\n1.7m/sec\nFigure 26. Localization Error vs. Event Size for Spotlight\nsystem at 46m\nIn the experiments performed over a much longer distance\nbetween the Spotlight device and sensor network, the average\nlocalization error remains very small. Localization errors of \n510cm were measured, as Figure 27 shows. We were simply\namazed by the accuracy that the system is capable of, when\nconsidering that the Spotlight system operated over the length of a\nfootball stadium. Throughout our experimentation with the\nSpotlight system, we have observed localization errors that were\nsimply offsets of real locations. Since the same phenomenon was\nobserved when experimenting with the \u00ce\u00bcSpotlight system, we\nbelieve that with auto-calibration, the localization error can be\nfurther reduced.\n0\n5\n10\n15\n20\n25\n6 12 18\nEvent Size [cm]\nLocalizationError[cm]\n0.7m/sec\n1.4m/sec\n3m/sec\nFigure 27. Localization Error vs. Event Size for Spotlight\nsystem at 170m\nThe time required for localization using the Spotlight system\nwith a Point Scan EDF, is given by: t=(L*l)/(s*Es), where L and l\nare the dimensions of the sensor network field, s is the scanning\nspeed, and Es is the size of the event. Figure 28 shows the time for\nlocalizing a sensor network deployed in an area of size of a\nfootball field using the Spotlight system. Here we ignore the\nmessage propagation time, from the sensor nodes to the Spotlight\ndevice.\nFrom Figure 28 it can be observed that the very small\nlocalization errors are prohibitively expensive in the case of the\nPoint Scan. When localization errors of up to 1m are tolerable,\nlocalization duration can be as low as 4 minutes. Localization\ndurations of 5-10 minutes, and localization errors of 1m are\ncurrently state of art in the realm of range-free localization\nschemes. And these results are achieved by using the Point Scan\nscheme, which required the highest Localization Time, as it was\nshown in Table 1.\n0\n5\n10\n15\n20\n25\n30\n35\n40\n0 25 50 75 100 125 150\nEvent Size [cm]\nLocalizationTime[min]\n3m/sec\n6m/sec\n9m/sec\nFigure 28. Localization Time vs. Event Size for Spotlight\nsystem\nOne important characteristic of the Spotlight system is its range.\nThe two most important factors are the sensitivity of the\nphotosensor and the power of the Spotlight source. We were\ninterested in measuring the range of our Spotlight system,\nconsidering our capabilities (MTS310 sensor board and\ninexpensive, $12-$85, diode laser). As a result, we measured the\nintensity of the laser beam, having the same focus, at different\ndistances. The results are shown in Figure 29.\n950\n1000\n1050\n1100\n0 50 100 150 200\nDistance [m]\nIntensity[ADCcount]\n35mW\n7mW\nFigure 29. Localization Range for the Spotlight system\nFrom Figure 29, it can be observed that only a minor decrease\nin the intensity occurs, due to absorption and possibly our\nimperfect focusing of the laser beam. A linear fit of the\nexperimental data shows that distances of up to 6500m can be\nachieved. While we do not expect atmospheric conditions, over\nlarge distances, to be similar to our 200m evaluation, there is\nstrong evidence that distances (i.e. altitude) of 1000-2000m can\neasily be achieved. The angle between the laser beam and the\nvertical should be minimized (less than 45\u00c2\u00b0), as it reduces the\ndifference between the beam cross-section (event size) and the\nactual projection of the beam on the ground.\nIn a similar manner, we were interested in finding out the\nmaximum size of an event, that can be generated by a COTS laser\nand that is detectable by the existing photosensor. For this, we\n23\nvaried the divergence of the laser beam and measured the light\nintensity, as given by the ADC count. The results are shown in\nFigure 30. It can be observed that for the less powerful laser, an\nevent size of 1.5m is the limit. For the more powerful laser, the\nevent size can be as high as 4m.\nThrough our extensive performance evaluation results, we have\nshown that the Spotlight system is a feasible, highly accurate, low\ncost solution for localization of wireless sensor networks. From\nour experience with sources of laser radiation, we believe that for\nsmall and medium size sensor network deployments, in areas of\nless than 20,000m2\n, the Area Cover scheme is a viable solution.\nFor large size sensor network deployments, the Line Scan, or an\nincremental use of the Area Cover are very good options.\n0\n200\n400\n600\n800\n1000\n1200\n0 50 100 150 200\nEvent Size [cm]\nIntensity[ADCcount]\n35mW\n7mW\nFigure 30. Detectable Event Sizes that can be generated by\nCOTS lasers\n6. OPTIMIZATIONS/LESSONS LEARNED\n6.1 Distributed Spotlight System\nThe proposed design and the implementation of the Spotlight\nsystem can be considered centralized, due to the gathering of the\nsensor data and the execution of the Localization Function L(t) by\nthe Spotlight device. We show that this design can easily be\ntransformed into a distributed one, by offering two solutions.\nOne idea is to disseminate in the network, information about the\npath of events, generated by the EDF (similar to an equation,\ndescribing a path), and let the sensor nodes execute the\nLocalization Function. For example, in the Line Scan scenario, if\nthe starting and ending points for the horizontal and vertical scans,\nand the times they were reached, are propagated in the network,\nthen any sensor in the network can obtain its location (assuming a\nconstant scanning speed).\nA second solution is to use anchor nodes which know their\npositions. In the case of Line Scan, if three anchors are present,\nafter detecting the presence of the two events, the anchors flood\nthe network with their locations and times of detection. Using the\nsame simple formulas as in the previous scheme, all sensor nodes\ncan infer their positions.\n6.2 Localization Overhead Reduction\nAnother requirement imposed by the Spotlight system design, is\nthe use of a time synchronization protocol between the Spotlight\ndevice and the sensor network. Relaxing this requirement and\nimposing only a time synchronization protocol among sensor\nnodes is a very desirable objective. The idea is to use the\nknowledge that the Spotlight device has about the speed with\nwhich the scanning of the sensor field takes place. If the scanning\nspeed is constant (let\"s call it s), then the time difference (let\"s call\nit \u00ce\u201dt) between the event detections of two sensor nodes is, in fact,\nan accurate measure of the range between them: d=s*\u00ce\u201dt. Hence,\nthe Spotlight system can be used for accurate ranging of the\ndistance between any pair of sensor nodes. An important\nobservation is that this ranging technique does not suffer from\nlimitations of others: small range and directionality for ultrasound,\nor irregularity, fading and multipath for Received Signal Strength\nIndicator (RSSI). After the ranges between nodes have been\ndetermined (either in a centralized or distributed manner) graph\nembedding algorithms can be used for a realization of a rigid\ngraph, describing the sensor network topology.\n6.3 Dynamic Event Distribution Function E(t)\nAnother system optimization is for environments where the sensor\nnode density is not uniform. One disadvantage of the Line Scan\ntechnique, when compared to the Area Cover, is the localization\ntime.\nAn idea is to use two scans: one which uses a large event size\n(hence larger localization errors), followed by a second scan in\nwhich the event size changes dynamically. The first scan is used\nfor identifying the areas with a higher density of sensor nodes. The\nsecond scan uses a larger event in areas where the sensor node\ndensity is low and a smaller event in areas with a higher sensor\nnode density.\nA dynamic EDF can also be used when it is very difficult to\nmeet the power requirements for the Spotlight device (imposed by\nthe use of the Area Cover scheme in a very large area). In this\nscenario, a hybrid scheme can be used: the first scan (Point Scan)\nis performed quickly, with a very large event size, and it is meant\nto identify, roughly, the location of the sensor network.\nSubsequent Area Cover scans will be executed on smaller portions\nof the network, until the entire deployment area is localized.\n6.4 Stealthiness\nOur implementation of the Spotlight system used visible light\nfor creating events. Using the system during the daylight or in a\nroom well lit, poses challenges due to the solar or fluorescent lamp\nradiation, which generate a strong background noise. The\nalternative, which we used in our performance evaluations, was to\nuse the system in a dark room (\u00ce\u00bcSpotlight system) or during the\nnight (Spotlight system). While using the Spotlight system during\nthe night is a good solution for environments where stealthiness is\nnot important (e.g. environmental sciences) for others (e.g.\nmilitary applications), divulging the presence and location of a\nsensor field, could seriously compromise the efficacy of the\nsystem.\nFigure 31. Fluorescent Light Spectra (top), Spectral\nResponse for CdSe cells (bottom)\nA solution to this problem, which we experimented with in the\n\u00c2\u00b5Spotlight system, was to use an optical filter on top of the light\n24\nsensor. The spectral response of a CdSe photo sensor spans almost\nthe entire visible domain [37], with a peak at about 700nm (Figure\n31-bottom). As shown in Figure 31-top, the fluorescent light has\nno significant components above 700nm. Hence, a simple red filter\n(Schott RG-630), which transmits all light with wavelength\napproximately above 630nm, coupled with an Event Distribution\nFunction that generates events with wavelengths above the same\nthreshold, would allow the use of the system when a fluorescent\nlight is present.\nA solution for the Spotlight system to be stealthy at night, is to\nuse a source of infra-red radiation (i.e. laser) emitting in the range\n[750, 1000]nm. For a daylight use of the Spotlight system, the\nchallenge is to overcome the strong background of the natural\nlight. A solution we are considering is the use of a narrow-band\noptical filter, centered at the wavelength of the laser radiation. The\nfeasibility and the cost-effectiveness of this solution remain to be\nproven.\n6.5 Network Deployed in Unknown Terrain\nA further generalization is when the map of the terrain where the\nsensor network was deployed is unknown. While this is highly\nunlikely for many civil applications of wireless sensor network\ntechnologies, it is not difficult to imagine military applications\nwhere the sensor network is deployed in a hostile and unknown\nterrain. A solution to this problem is a system that uses two\nSpotlight devices, or equivalently, the use of the same device from\ntwo distinct positions, executing, from each of them, a complete\nlocalization procedure. In this scheme, the position of the sensor\nnode is uniquely determined by the intersection of the two location\ndirections obtained by the system. The relative localization (for\neach pair of Spotlight devices) will require an accurate knowledge\nof the 3 translation and 3 rigid-body rotation parameters for\nSpotlight\"s position and orientation (as mentioned in Section 3).\nThis generalization is also applicable to scenarios where, due to\nterrain variations, there is no single aerial point with a direct line\nof sight to all sensor nodes, e.g. hilly terrain. By executing the\nlocalization procedure from different aerial points, the probability\nof establishing a line of sight with all the nodes, increases. For\nsome military scenarios [1] [12], where open terrain is prevalent,\nthe existence of a line of sight is not a limiting factor. In light of\nthis, the Spotlight system can not be used in forests or indoor\nenvironments.\n7. CONCLUSIONS AND FUTURE WORK\nIn this paper we presented the design, implementation and\nevaluation of a localization system for wireless sensor networks,\ncalled Spotlight. Our localization solution does not require any\nadditional hardware for the sensor nodes, other than what already\nexists. All the complexity of the system is encapsulated into a\nsingle Spotlight device. Our localization system is reusable, i.e. the\ncosts can be amortized through several deployments, and its\nperformance is not affected by the number of sensor nodes in the\nnetwork. Our experimental results, obtained from a real system\ndeployed outdoors, show that the localization error is less than\n20cm. This error is currently state of art, even for range-based\nlocalization systems and it is 75% smaller than the error obtained\nwhen using GPS devices or when the manual deployment of sensor\nnodes is a feasible option [31].\nAs future work, we would like to explore the self-calibration\nand self-tuning of the Spotlight system. The accuracy of the\nsystem can be further improved if the distribution of the event,\ninstead of a single timestamp, is reported. A generalization could\nbe obtained by reformulating the problem as an angular estimation\nproblem that provides the building blocks for more general\nlocalization techniques.\n8. ACKNOWLEDGEMENTS\nThis work was supported by the DARPA IXO office, under the\nNEST project (grant number F336616-01-C-1905) and by the NSF\ngrant CCR-0098269. We would like to thank S. Cornwell for\nallowing us to run experiments in the stadium, M. Klopf for his\nassistance with optics, and anonymous reviewers and our\nshepherd, Koen Langendoen, for their valuable feedback.\n9. REFERENCES\n[1] A. Arora, P. Dutta, S. Bapat, V. Kulathumani, H. Zhang, V.\nNaik, V. Mittal, H. Cao, M. Demirbas, M. Gouda, Y. Choi, T.\nHerman, S. Kulharni, U. Arumugam, M. Nesterenko, A.\nVora, M. Miyashita, A Line in the Sand: A Wireless Sensor\nNetwork for Target Detection, Classification and Tracking,\nin Computer Networks 46(5), 2004.\n[2] P. Bahl, V.N. Padmanabhan, RADAR: An In-Building \nRFbased User Location and Tracking System, in Proceedings of\nInfocom, 2000\n[3] M. Broxton, J. Lifton, J. Paradiso, Localizing a Sensor\nNetwork via Collaborative Processing of Global Stimuli, in\nProceedings of EWSN, 2005.\n[4] N. Bulusu, J. Heidemann, D. Estrin, GPS-less Low Cost\nOutdoor Localization for Very Small Devices, in IEEE\nPersonal Communications Magazine, 2000.\n[5] P. Corke, R. Peterson, D. Rus, Networked Robots: Flying\nRobot Navigation Using a Sensor Net, in ISSR, 2003.\n[6] L. Doherty, L. E. Ghaoui, K. Pister, Convex Position\nEstimation in Wireless Sensor Networks, in Proceedings of\nInfocom, 2001\n[7] P. Dutta, M. Grimmer, A. Arora, S. Bibyk, D. Culler, Design\nof a Wireless Sensor Network Platform for Detecting Rare,\nRandom, and Ephemeral Events, in Proceedings of IPSN,\n2005.\n[8] E. Elnahrawy, X. Li, R. Martin, The Limits of Localization\nusing RSSI, in Proceedings of SECON, 2004.\n[9] D. Fox, W. Burgard, S. Thrun, Markov Localization for\nMobile Robots in Dynamic Environments, in Journal of\nArtificial Intelligence Research, 1999.\n[10] D. Fox, W. Burgard, F. Dellaert, S. Thrun, Monte Carlo\nLocalization: Efficient Position Estimation for Mobile\nRobots, in Conference on Artificial Intelligence, 2000.\n[11] D. Ganesan, B. Krishnamachari, A. Woo, D. Culler, D.\nEstrin, S. Wicker, Complex Behaviour at Scale: An\nExperimental Study of Low Power Wireless Sensor\nNetworks, in Technical Report, UCLA-TR 01-0013, 2001.\n[12] T. He, S. Krishnamurthy, J. A. Stankovic, T. Abdelzaher, L.\nLuo, R. Stoleru, T. Yan, L. Gu, J. Hui, B. Krogh, An\nEnergy-Efficient Surveillance System Using Wireless Sensor\nNetworks, in Proceedings of Mobisys, 2004.\n[13] T. He, C. Huang, B. Blum, J. A. Stankovic, T. Abdelzaher,\nRange-Free Localization Schemes for Large Scale Sensor\nNetworks in Proceedings of Mobicom, 2003.\n[14] L. Hu, D. Evans, Localization for Mobile Sensor Networks,\nin Proceedings of Mobicom, 2004.\n[15] Y. Kwon, K. Mechitov, S. Sundresh, W. Kim, G. Agha,\nResilient Localization for Sensor Networks in Outdoor\nEnvironments, UIUC Technical Report, 2004.\n25\n[16] K. Langendoen, N. Reijers, Distributed Localization in\nWireless Sensor Networks, A Comparative Study, in\nComputer Networks vol. 43, 2003.\n[17] K. Lorincz, M. Welsh, MoteTrack: A Robust, Decentralized\nApproach to RF-Based Location Tracking, in Proceedings of\nIntl. Workshop on Location and Context-Awareness, 2005.\n[18] M. Maroti, B. Kusy, G. Simon, A. Ledeczi, The Flooding\nTime Synchronization Protocol, in Proceedings of Sensys,\n2004.\n[19] D. Moore, J. Leonard, D. Rus, S. Teller, Robust Distributed\nNetwork Localization with Noisy Range Measurements in\nProceedings of Sensys, 2004.\n[20] R. Nagpal, H. Shrobe, J. Bachrach, Organizing a Global\nCoordinate System for Local Information on an Adhoc Sensor\nNetwork, in A.I Memo 1666. MIT A.I. Laboratory, 1999.\n[21] D. Niculescu, B. Nath, DV-based Positioning in Adhoc\nNetworks in Telecommunication Systems, vol. 22, 2003.\n[22] E. Osterweil, T. Schoellhammer, M. Rahimi, M. Wimbrow,\nT. Stathopoulos, L.Girod, M. Mysore, A.Wu, D. Estrin, The\nExtensible Sensing System, CENS-UCLA poster, 2004.\n[23] B.W. Parkinson, J. Spilker, Global Positioning System:\ntheory and applications, in Progress in Aeronautics and\nAstronautics, vol. 163, 1996.\n[24] P.N. Pathirana, N. Bulusu, A. Savkin, S. Jha, Node\nLocalization Using Mobile Robots in Delay-Tolerant Sensor\nNetworks, in Transactions on Mobile Computing, 2004.\n[25] N. Priyantha, A. Chakaborty, H. Balakrishnan, The Cricket\nLocation-support System, in Proceedings of MobiCom,\n2000.\n[26] N. Priyantha, H. Balakrishnan, E. Demaine, S. Teller,\nMobile-Assisted Topology Generation for Auto-Localization\nin Sensor Networks, in Proceedings of Infocom, 2005.\n[27] A. Savvides, C. Han, M. Srivastava, Dynamic Fine-grained\nlocalization in Adhoc Networks of Sensors, in Proceedings\nof MobiCom, 2001.\n[28] Y. Shang, W. Ruml, Improved MDS-Based Localization, in\nProceedings of Infocom, 2004.\n[29] M. Sichitiu, V. Ramadurai,Localization of Wireless Sensor\nNetworks with a Mobile Beacon, in Proceedings of MASS,\n2004.\n[30] G. Simon, M. Maroti, A. Ledeczi, G. Balogh, B. Kusy, A.\nNadas, G. Pap, J. Sallai, Sensor Network-Base\nCountersniper System, in Proceedings of Sensys, 2004.\n[31] R. Stoleru, T. He, J.A. Stankovic, Walking GPS: A Practical\nSolution for Localization in Manually Deployed Wireless\nSensor Networks, in Proceedings of EmNetS, 2004.\n[32] R. Stoleru, J.A. Stankovic, Probability Grid: A Location\nEstimation Scheme for Wireless Sensor Networks, in\nProceedings of SECON, 2004.\n[33] R. Szewczyk, A. Mainwaring, J. Polastre, J. Anderson, D.\nCuller, An Analysis of a Large Scale Habitat Monitoring\nApplication, in Proceedings of Sensys, 2004.\n[34] K. Whitehouse, A. Woo, C. Karlof, F. Jiang, D. Culler, The\nEffects of Ranging Noise on Multi-hop Localization: An\nEmpirical Study, in Proceedings of IPSN, 2005.\n[35] K. Whitehouse, D. Culler, Calibration as Parameter\nEstimation in Sensor Networks, in Proceedings of WSNA,\n2002.\n[36] P. Zhang, C. Sadler, S. A. Lyon, M. Martonosi, Hardware\nDesign Experiences in ZebraNet, in Proceedings of Sensys,\n2004.\n[37] Selco Products Co. Construction and Characteristics of CdS\nCells, product datasheet, 2004\n26\n": ["wireless sensor network", "localization", "range-based localization", "range-free scheme", "transmission", "performance", "accuracy", "localization error", "sensor network", "spotlight system", "localization technique", "distribution", "event distribution", "laser", ""]}