{"Deployment Issues of a VoIP Conferencing System in a\nVirtual Conferencing Environment\nR. Venkatesha Prasad\ni\nRichard Hurni\nii\nH.S. Jamadagni\niii\nH.N. Shankar\niv\ni, iii\nCentre for Electronics Design and Technology\nIndian Institute of Science, Bangalore, India\nTelephone: +91 80 360 0810\ni, iii\n{vprasad, hsjam}@cedt.iisc.ernet.in\nii\nhurni@ieee.org\niv\nhn_shankar@yahoo.com\nABSTRACT\nReal-time services have been supported by and large on \ncircuitswitched networks. Recent trends favour services ported on\npacket-switched networks. For audio conferencing, we need to\nconsider many issues - scalability, quality of the conference\napplication, floor control and load on the clients/servers - to name\na few. In this paper, we describe an audio service framework\ndesigned to provide a Virtual Conferencing Environment (VCE).\nThe system is designed to accommodate a large number of end\nusers speaking at the same time and spread across the Internet.\nThe framework is based on Conference Servers [14], which\nfacilitate the audio handling, while we exploit the SIP capabilities\nfor signaling purposes. Client selection is based on a recent\nquantifier called \"Loudness Number\" that helps mimic a physical\nface-to-face conference. We deal with deployment issues of the\nproposed solution both in terms of scalability and interactivity,\nwhile explaining the techniques we use to reduce the traffic. We\nhave implemented a Conference Server (CS) application on a\ncampus-wide network at our Institute.\nCategories and Subjects Descriptors\nC.2.4 [Computer-Communication Networks]: Distributed\nSystems - Client / Server, distributed applications.\nGeneral Terms\nAlgorithms, Performance, Design, Theory.\n1. INTRODUCTION\nToday's Internet uses the IP protocol suite that was primarily\ndesigned for the transport of data and provides best effort data\ndelivery. Delay-constraints and characteristics separate traditional\ndata on the one hand from voice & video applications on the\nother. Hence, as progressively time-sensitive voice and video\napplications are deployed on the Internet, the inadequacy of the\nInternet is exposed. Further, we seek to port telephone services\non the Internet. Among them, virtual conference (teleconference)\nfacility is at the cutting edge. Audio and video conferencing on\nInternet are popular [25] for the several advantages they inhere\n[3,6]. Clearly, the bandwidth required for a teleconference over\nthe Internet increases rapidly with the number of participants;\nreducing bandwidth without compromising audio quality is a\nchallenge in Internet Telephony. Additional critical issues are:\n(a) packet delay, (b) echo, (c) mixing of audio from selected\nclients, (d) automatic selection of clients to participate in the\nconference, (e) playout of mixed audio for every client, (f)\nhandling clients not capable of mixing audio streams (such clients\nare known as dumb clients), and (g) deciding the number of\nsimultaneously active clients in the conference without\ncompromising voice quality.\nWhile all the above requirements are from the technology point of\nview, the user's perspective and interactions are also essential\nfactors. There is plenty of discussion amongst HCI and CSCW\ncommunity on the use of Ethnomethodology for design of CSCW\napplications. The basic approach is to provide larger bandwidth,\nmore facilities and more advanced control mechanisms, looking\nforward to better quality of interaction. This approach ignores the\nfunctional utility of the environment that is used for collaboration.\nEckehard Doerry [4] criticizes this approach by saying \"it is\nkeeping form before function\". Thus, the need is to take an\napproach that considers both aspects - the technical and the\nfunctional. Regarding the functional aspect, we refer to [15]\nwhere it has been dealt with in some detail.\nIn this work, we do not discuss video conferencing; its inclusion\ndoes not significantly benefit conference quality [4]. Our focus is\non virtual audio environments.\nWe first outline the challenges encountered in virtual audio\nconferences. Then we look into the motivations followed by\nrelevant literature. In Section 5, we explain the architecture of our\nsystem. Section 6 comprises description of the various algorithms\nused in our setup. We address deployment issues. A discussion on\nSwiss Federal Institute of Technology, Lausanne. Former visitor at\nCEDT.\nPESIT and NIAS, Bangalore, India.iv\nii\nperformance follows. We conclude taking alongside some\nimplementation issues.\n2. CHALLENGES IN VoIP\nCONFERENCING\nMany challenges arise in building a VoIP application. The\nfollowing are of particular concern in the process:\n\u00e2\u20ac\u00a2 Ease of use: Conferencing must be simple; users need no\ndomain expertise. Management (addition/removal) of clients\nand servers must be uncomplicated. Application\ndevelopment should not presuppose specific characteristics\nof the underlying system or of network layers. Ease of use\nmay include leveraging readily available, technically feasible\nand economically viable technologies.\n\u00e2\u20ac\u00a2 Scalability: Conferencing must seem uninterrupted under\nheavy loads, i.e., when many additional users are added on.\nTraffic on WAN should not grow appreciably with the total\nnumber of clients; else, this has lead to congestion. So a\nmeans to regulate traffic to a minimum is needed for this\nkind of real-time applications.\n\u00e2\u20ac\u00a2 Interactivity: In Virtual Conferencing Environments (VCEs),\nwe intend a face-to-face-like conferencing application that\nmimics a \"real\" conference, where more vocal participants\ninvite attention. Turn-taking in floor occupation by\nparticipants must be adapted gracefully to give a feel of\nnatural transition.\n\u00e2\u20ac\u00a2 Standardization: The solution must conform to established\nstandards so as to gain interoperability and peer acceptance.\nThe above requirements are placed in the perspective of\nobservations made in earlier works (vide Sections 3 and 4) and\nwill steer the VCE design.\n3. THE MOTIVATION\nRamanathan and Rangan [20] have studied in detail the\narchitectural configurations comparing many conferencing\narchitecture schemes taking into consideration the network delay\nand computation requirements for mixing. Functional division and\nobject-oriented architecture design that aid in implementation is\npresented in [1]. An overview of many issues involved in\nsupporting a large conference is dealt in [8]. H. P. Dommel [5]\nand many others highlight floor control as another pivotal aspect\nto be taken into account in designing a conferencing tool. Tightly\ncoupled conference control protocols in Internet belong to the\nITU-T H.323 family [9]; however, they are mainly for small\nconferences. The latest IETF draft by Rosenberg and Schulzrinne\n[23] discusses conferencing models with SIP [22] in the\nbackground. Aspects of implementation for centralized SIP\nconferencing are reported in [26]. A new approach called partial\nmixing by Radenkovic [18] allows for mixed and non-mixed\nstreams to coexist. In all the above proposals, while there are\nsome very useful suggestions, they share one or more of the\nfollowing limitations:\n\u00e2\u20ac\u00a2 In an audio conference, streams from all the clients need not\nbe mixed. Actually, mixing many arbitrary streams [24] from\nclients degrades the quality of the conference due to the\nreduction in the volume (spatial aspect of speech). The\nnumber of streams mixed varies dynamically depending on\nthe number of active participants. This would lead to\nfluctuations in the volume of every individual participant\ncausing severe degradation in quality. Customized mixing of\nstreams is not possible when many clients are active. There is\na threshold on the number of simultaneous speakers above\nwhich increasing the number of speakers becomes\ncounterproductive to conference quality. Fixing the\nmaximum number of simultaneous speakers is dealt in a\nrecent work [15] using Ethnomethodology, and is\nconjectured to be three. Thus it is advisable to honour that\nconstraint.\n\u00e2\u20ac\u00a2 There cannot be many intermediate mixers (similarly,\nConference Servers as in [10]) in stages as in [20] because it\nbrings in inordinate delay by increasing the number of hops\nand is not scalable with interactivity in focus.\n\u00e2\u20ac\u00a2 Floor Control for an audio conference (even video\nconference) with explicit turn-taking instructions to\nparticipants renders the conference essentially a \none-speakerat-a-time affair, not a live and free-to-interrupt one. This\nway, the conference becomes markedly artificial and its\nquality degrades. Schulzrinne et al. [24], assume only one\nparticipant is speaking at a time. In this case, if applications\nare implemented with some control [5], the service becomes\n\u00e2\u20ac\u02dcgagging\" for the users.\n\u00e2\u20ac\u00a2 Partial mixing [18] has a similar problem as that of mixing\nwhen more streams are mixed. Moreover, in [18], to allow\nimpromptu speech, mixing is not done when the network can\nafford high bandwidth requirements for sending/receiving all\nthe streams, but it is unnecessary [15].\n\u00e2\u20ac\u00a2 For large conferences [23, 10] a centralized conference\ncannot scale up. With multicasting, clients will have to parse\nmany streams and traffic on a client\"s network increases\nunnecessarily.\nEvidently, different particular issues, all of which are a subset of\nrequirements (defined in [14] and [16]) for a VoIP conferencing\nsupport, are tackled. Thus there is a need to address conferencing\nas a whole with all its requirements considered concurrently.\nTowards this goal, the VoIP conferencing system we propose is\nintended to be scalable and interactive. We make use of the\n\"Loudness Number\" for implementing floor control. This permits\na participant to freely get into the speaking mode to interrupt the\ncurrent speaker as in a natural face-to-face meeting. An upper\nlimit on the number of floors (i.e., the number of speakers\nallowed to speak at the same time) is fixed using a conjecture\nproposed in [15].\nThe work presented here is in continuation of our studies into\nconferencing based on the Session Initiation Protocol in [14] and\n[16]. SIP, defined in [22] is now the most popular standard for\nVoIP deployment and has been chosen for its strength, ease of\nuse, extensibility and compatibility. This is the reason it will be in\nthe background of all controlling messages that will implicitly\narise between the entities in our architecture. The actual messages\nare described in [16] and, as such, we do not present a complete\ndescription of them here.\n4. RELATED WORK\nThe SIP standard defined in RFC 3261 [22] and in later\nextensions such as [21] does not offer conference control services\nsuch as floor control or voting and does not prescribe how a\nconference is to be managed. However SIP can be used to initiate\na session that uses some other conference control protocol.\nThe core SIP specification supports many models for\nconferencing [26, 23]. In the server-based models, a server mixes\nmedia streams, whereas in a server-less conference, mixing is\ndone at the end systems. SDP [7] can be used to define media\ncapabilities and provide other information about the conference.\nWe shall now consider a few conference models in SIP that have\nbeen proposed recently [23].\nFirst, let us look into server-less models. In End-System Mixing,\nonly one client (SIP UA) handles the signaling and media mixing\nfor all the others, which is clearly not scalable and causes\nproblems when that particular client leaves the conference. In the\nUsers Joining model, a tree grows, as each invited party\nconstitutes a new branch in the distribution path. This leads to an\nincreasing number of hops for the remote leaves and is not\nscalable. Another option would be to use multicast for\nconferencing but multicast is not enabled over Internet and only\npossible on a LAN presently. Among server-based models, in a\nDial-In Conference, UAs connect to a central server that handles\nall the mixing. This model is not scalable as it is limited by the\nprocessing power of the server and bandwidth of the network. \nAdhoc Centralized Conferences and Dial-Out Conference Servers\nhave similar mechanisms and problems.\nHybrid models involving centralized signaling and distributed\nmedia, with the latter using unicast or multicast, raise scalability\nproblems as before. However an advantage is that the conference\ncontrol can be a third party solution.\nDistributed Partial Mixing, presented in [18], proposes that in\ncase of bandwidth limitation, some streams are mixed and some\nare not, leaving interactivity intact. Loss of spatialism when they\nmix and the bandwidth increase when they do not are open\nproblems. A related study [19] by the same author proposes\nconferencing architecture for Collaborative Virtual Environments\n(CVEs) but does not provide the scalability angle without the\navailability of multicasting. With the limitations of proposed\nconferencing systems in mind, we will now detail our proposal.\n5. SYSTEM ARCHITECTURE\nThis section is dedicated to the description of the proposed system\narchitecture. However, as this paper constitutes the continuation\nof our work started in [14] and furthered in [16], we will not\npresent here all the details about the proposed entities and invite\nthe readers to consult the papers mentioned above for a full and\nthorough description.\nFirst, we do not restrict our conferencing system to work on small\nconferences only, but rather on large audio VCEs that have\nhundreds (or even thousands) of users across a Wide Area\nNetwork (WAN) such as the Internet. This view stems from an\nappraisal that VCEs will gain in importance in the future, as\ninteractive audio conferences will be more popular because of the\nspread of the media culture around the world.\nTwo issues must be taken care of when building a VoIP\nconferencing system: (i) the front-end, consisting of the\napplication program running on the end-users\" computers and (ii)\nthe back-end that provides other application programs that\nfacilitate conferencing and conference.\nThe participating users are grouped into several domains. These\ndomains are Local Area Networks (LANs), such as corporate or\neducational networks. This distributed assumption asks for\ndistributed controlling and media handling solutions, as\ncentralized systems would not scale for such very large\nconferences (vide Section 4).\nMore explicitly, in each domain, we can identify several relevant\nlogical components of a conferencing facility (Fig. 1):\n\u00c2\u0152 An arbitrary number of end users (clients) that can take part\nin at most one audio conference at a time. Every user is\nFig. 1. Conference example - 3 domains containing the necessary entities so that the conference can\ntake place.\nincluded in one and only one domain at a given instant, but\ncan move from domain to domain (nomadism). In our\nconferencing environment, these clients are regular SIP User\nAgents (SIP UAs), as defined in [22] so to gain in\ninteroperability with other existing SIP-compatible systems.\nThese clients are thus not aware of the complex setting that\nsupports the conference and this is highlighted below.\n\u00c2\u0152 One SIP Server (SIPS) per domain, taking care of all the\nsignaling aspects of the conference (clients joining, leaving,\netc.) [16]. In particular, it is considered as a physical\nimplementation encompassing different logical roles, namely\na SIP Proxy Server, a SIP Registrar Server, a SIP Redirect\nServer and a SIP B2BUA (Back-to-Back User Agent) [22].\nThis physical implementation enables the handling of\nincoming/outgoing SIP messages by one or another logical\nentity according to the needs. SIPS is entrusted with\nmaintaining total service and has many advantages such as\n(a) it works as a centralized entity that can keep track of the\nactivities of the UAs in a conference; (b) it can do all the\nswitching for providing PBX features; (c) it can locate the\nUAs and invite them for a conference; (d) it can do the\nbilling as well. SIPSs in different domains communicate\nwith each other using SIP messages as described in [16]. If\nthe load on a particular SIPS is too heavy, it can create\nanother SIPS in the same domain so that the load will be\nshared.\n\u00c2\u0152 One Master Conference Server (M-CS) (simply a Conference\nServer (CS)) for each conference is created by the local SIPS\nwhen a conference starts. This server will be used for\nhandling media packets for the clients of the domain. Its\nmechanism will be described in the next section. The M-CS\nwill be able to create a hierarchy of CSs inside a domain by\nadding one or more Slave CSs (S-CSs) to accommodate all\nthe active clients and prevent its own flooding at the same\ntime. We will see this mechanism in some detail in the\nsequel.\nThe entities described here are exhaustive and conform to the SIP\nphilosophy. Thus, the use of SIP makes this architecture more\nuseful and interoperable with any other SIP clients or servers.\n6. ALGORITHMIC ISSUES\n6.1 Selecting the Streams\nSimilar to SipConf in [27], a Conference Server (CS) [17] has the\nfunction of supporting the conference; it is responsible for\nhandling audio streams using RTP. It can also double to convert\naudio stream formats for a given client if necessary and can work\nas Translators/Mixers of RTP specification behind firewalls.\nWe have based the design of our CS on H.323 Multipoint\nProcessor (MP) [9]. In short, the MP receives audio streams from\nthe endpoints involved in a centralized or hybrid multipoint\nconference, processes them and returns them to the endpoints. An\nMP that processes audio prepares NMax audio outputs from M\ninput streams after selection, mixing, or both. Audio mixing\nrequires decoding the input audio to linear signals (PCM or\nanalog), performing a linear combination of the signals and \nreencoding the result in an appropriate audio format. The MP may\neliminate or attenuate some of the input signals in order to reduce\nnoise and unwanted components.\nFig. 2. Schematic diagram of a CS\nThe limitation of H.323 is that it does not address the scalability\nof a conference. The architecture proposes a cascaded or daisy\nchain topology [10], which can be shown that it cannot scale up\nfor a large conference.\nA CS serves many clients in the same conference. Thus it handles\nonly one conference at a time. Multiple CSs may coexist in a\ndomain, as when there are several conferences under way.\nSignaling-related messages of CSs are dealt in [11].\nThe working of a CS is illustrated on Fig. 2: For each mixing\ninterval, CS 1 chooses the best NMax audio packets out of the\nM1 (using a criterion termed \"Loudness Number, described in the\nnext subsection). It may possibly receive and sends these to CSs 2\nto P. The set of packets sent is denoted as ToOtherCSs. In the\nsame mixing interval, it also receives the best NMax audio packets\n(out of possibly M2) from CS 2, similarly the best NMax (out of\npossibly MP) from CS P. For simplicity, we ignore propagation\ndelay between CSs which indeed can be taken into account; it is\nbeyond the scope of this presentation. The set of packets received\nis denoted as FromOtherCSs. Finally, it selects the best NMax\npackets from the set {ToOtherCSs union FromOtherCSs} and\npasses these packets to its own group.\nIt can be seen that the set {ToOtherCSs union FromOtherCSs} is\nthe same at all CSs. This ensures that any client in the conference\nfinally receives the same set of packets for mixing. Hence all\nclients obtain a common view of the conference.\nSimilarly, for each time slot (packet time), a subset, F of all\nclients is selected (using the same criterion) from the pool of\npackets from all other CSs plus the NMax clients selected locally.\nTheir packets are mixed and played out at the clients. According\nto [15], the cardinality of F, |F| is NMax and is fixed at three.\nIn our conferencing setup, selection is by the Master Conference\nServer (M-CS), which comes into the picture exclusively for\nmedia handling. Note that even if the SIP specification enables\ndirect UA-to-UA media communication in a one-to-one call, it is\nalso possible to use the Conference Server for two-party calls,\nespecially because it is then more functional to create a real\nconference by adding a third and subsequently more\nparticipant(s).\nThere are cases wherein the processing capacity of an M-CS is\nexceeded as it may have too many packets - from local domains\nand from remote domains - to process. In that case, the M-CS will\ncreate one or many S-CS (Fig. 6) and transfer its own clients as\nwell as the new clients to them. In this configuration, the\nalgorithm outlined above will be slightly modified, as the audio\npackets will go from clients to their dedicated S-CS that will\nselect NMax packets to send to the local M-CS, which will then\nselect NMax packets from all its S-CSs in the domain before\nsending them to the remote domains. The incoming packets from\nother domains will be received by the M-CS, select NMax of them\nand send them directly to the domain clients, bypassing the \nSCSs. This change implies that at most three intermediate entities\nexist for each audio packet, instead of two in the conventional\nsetup. As the extra hop happens inside the LAN supposed to have\na high-speed connectivity, we consider that it should not prevent\nus from using this hierarchy of CSs when there\"s a need to do so.\n6.2 Loudness Number (LN)\nA basic question to be answered by the CS is the following. In a\nmixing interval, how should it choose NMax packets out of the M it\nmight possibly receive? One way is to rank the M packets\nreceived according to their energies, and choose the top NMax.\nHowever, this is usually found to be inadequate because random\nfluctuations in packet energies can lead to poor audio quality. This\nindicates the need for a metric different from mere individual\npacket energies. The metric should have the following\ncharacteristics [12]:\n\u00e2\u20ac\u00a2 A speaker (floor occupant) should not be cut off by a spike in\nthe packet energy of another speaker. This implies that a\nspeaker\"s speech history should be given some weight. This\nis often referred to as Persistence or Hangover.\n\u00e2\u20ac\u00a2 A participant who wants to interrupt a speaker will have to\n(i) speak loudly and (ii) keep trying for a little while. In a\nface-to-face conference, body language often indicates the\nintent to interrupt. But in a blind conference under\ndiscussion, a participant\"s intention to interrupt can be\nconveyed effectively through LN.\nA floor control mechanism empowered to cut off a speaker\nforcefully must be ensured.\nThese requirements are met by Loudness Number [12], which\nchanges smoothly with time so that the selection (addition and\ndeletion) of clients for conference is graceful.\nLN (= ) is a function of the amplitude of the current audio stream\nplus the activity and amplitude over a specific window in the past.\nFig. 3. The different windows used for LN computation\nThe Loudness Number is updated on a packet-by-packet basis.\nThe basic parameter used here is packet amplitude, which is\ncalculated as root mean square (rms) of the energies in audio\nsamples of a packet, and denoted by XK. Three windows are\ndefined as shown in Fig. 3.\nThe present amplitude level of the speaker is found by calculating\nthe moving average of packet amplitude (XK) within a window\ncalled Recent Past Window starting from the present instant to\nsome past time. The past activity of the speaker is found by\ncalculating the moving average of the packet amplitude (XK)\nwithin a window called Distant Past Window, which starts at\nthe point where the Recent Past window ends and stretches\nback in the past for a pre-defined interval. The activity of the\nspeaker in the past is found with a window called Activity\nHorizon, which spans the recent past window as well as the\ndistant past window and beyond if necessary. Though the\ncontribution of the activity horizon looks similar to the\ncontribution of the recent past and distant past windows, past\nactivity is computed from activity horizon window in a\ndifferently.\nDefine the quantities during these three intervals as L1, L2 and L3.\nL1 quantifies the Recent Past speech activity, L2 the Distant Past\nspeech activity and L3 gives a number corresponding to the speech\nactivity in the Activity Horizon window quantifying how active\nthe speaker was in the past few intervals. L3 yields a quantity that\nis proportional to the fraction of packets having energies above a\npre-defined threshold (Eq. 3). The threshold is invariant across\nclients.\n\u00e2\u02c6\u2018\n+\u00e2\u02c6\u2019\n=\n=\n1\n1\n1 RPP\nP\nWt\ntK\nK\nRP\nX\nW\nL (1)\n\u00e2\u02c6\u2018\n+\u00e2\u02c6\u2019\u00e2\u02c6\u2019\n\u00e2\u02c6\u2019=\n=\n1\n2\n1 DPRPP\nRPP\nWWt\nWtK\nK\nDP\nX\nW\nL (2)\n\u00e2\u02c6\u2018\n+\u00e2\u02c6\u2019\n=\n\u00e2\u2030\u00a5=\n1\n}{3 *\n1 AHP\nP\nK\nWt\ntK\nX\nAH\nI\nW\nL \u00ce\u00b8\u00ce\u00b8 (3)\nWhere ifI KX 1}{ =\u00e2\u2030\u00a5\u00ce\u00b8 \u00ce\u00b8\u00e2\u2030\u00a5KX\n= otherwise,0\nThe threshold is a constant. is set at 10-20 percent of the\namplitude of the voice samples of a packet in our implementation\nhere. Loudness Number \u00ce\u00bb for the present time instant (or the\npresent packet) is calculated as,\n332211 *L*L*L \u00ce\u00b1\u00ce\u00b1\u00ce\u00b1\u00ce\u00bb ++= (4)\nHere 1\u000f 2 DQG 3 are chosen such that:\n0< 1\u000f 2\u001f\u0014\u000f \u0013\u001f 1\u000e 2\u001f\u0014 DQG 3=1-\u000b 1\u000e 2)\nHere, 1 is the weight given to the recent past speech, 2 is the\nweight given to distant past speech and 3 is the weight given to\nspeech activity in the activity horizon window considered.\n6.3 Safety, Liveness and Fairness\nThe \u00ce\u00bb parameter KDV VRPH PHPRU\\ GHSHQGLQJ RQ WKH VSUHDG RI\nthe windows. After one conferee becomes silent, another can take\nthe floor. Also, as there is more than one channel, interruption is\nenabled. A loud conferee is more likely to be heard because of\nelevated \u00ce\u00bb. This ensures fairness to all conferees. After all, even\nin a face-to-face conference, a more vocal speaker grabs special\nattention. All these desirable characteristics are embedded into the\nLN. A comprehensive discussion on selection of the various\nparameters and the dynamics of LN are beyond the scope of this\npaper.\n6.4 Selection Algorithm using the LN\nFollowing the developments in subsections 6.1 and 6.2, we\npresent the simple algorithm that runs at each Master-Conference\nServer (Algorithm. 1). This algorithm is based on the discussions\nin section 6.1. The globally unique set F is found using this\nprocedure.\nRepeat for each time slot at each M-CS\n{\n1. Get all the packets from the Clients\nthat belong to it.\n2. Find at most NMax Clients that have\nPD[LPXP RXW RI 0 &OLHQWV LQ LWV GRPDLQ\u0011\n3. Store a copy of packets from those NMax\nClients in database DB1.\n4. Send these NMax packets to other M-CSs (on\nUnicast or Multicast, depending on the\nconfiguration).\n5. Similarly, receive packets from all\nother M-CSs and store them in database\nDB2.\n6. Now compare the packets in DB1 and DB2 on\nWKH EDVLV RI DQG VHOHFW D PD[LPXP RI\nNMax amongst them (to form set F) that\nshould be played out at each Client.\n7. Send the NMax packets in set F to the\nClients in its domain.\n8. Mix these NMax audio packets in set F after\nlinearising and send it to dumb Clients\nin the domain.\n}\nAlgorithm 1. Selection algorithm\nThe mechanism proposed here is also depicted on Fig. 6, where a\nsingle conference takes place between three domains. The shaded\nclients are the ones selected in their local domains; their audio\nstreams will be sent to other CSs.\n7. DEPLOYMENT ISSUES\nWe now analyze deployment issues associated with conference\nmanagement. How are domains to be organized to maximize the\nnumber of participants able to join? To address this, we define\nsome useful parameters.\n\u00c2\u0152 Let d be the number of different domains in which there are\nactive clients in a given conference.\n\u00c2\u0152 Let Mi be the number of active clients present in domain i\n( di \u00e2\u2030\u00a4\u00e2\u2030\u00a41 ) in a given conference. The total number of\nactive clients in the conference is thus \u00e2\u02c6\u2018=\n=\nd\ni\niMM\n1\n.\n\u00c2\u0152 Let C be the maximum number of audio streams a\nConference Server can handle in a packet time, also called\ncapacity. C is set according to the processing power of the\nweakest CS in the conference but as it cannot be assumed\nthat we know it a-priori, it can be set according to some\nminimum system requirement a machine must meet in order\nto take part in a conference.\n\u00c2\u0152 Let NMax be the number of output streams a CS has to send to\nother CSs in remote domains (see section 6.1). We will set\nNMax =3 (=|F|), according to [15].\nThe optimization problem is now to find the value of d that\nmaximizes the total number of clients Mi served by one CS in a\ndomain with capacity C. We first dispose the case where the\ncapacity is not exceeded (the existing CS is not overloaded), and\nthen proceed to the case where there exists a need to create more\nCSs when a single CS is overloaded.\nWe assume that clients are equally distributed amongst the\ndomains, as we may not have information to assume an a-priori\ndistribution of the clients. We can specify no more than an upper\nbound on the number of clients acceptable, given the number of\nactive domains d.\n7.1 Conferencing with only One Level of CSs\nIn this subsection, we consider that we have only one CS, i.e., a\nunique M-CS in each domain. Thus it cannot be overloaded. We\nconsider that the system works as outlined in section 6.1: The\nClients send their audio packets to their local CS, which selects\nNMax streams, before sending them to other CSs. In parallel, it also\nreceives NMax streams for every other CSs before taking a decision\non which NMax streams will be selected, sent and played out at\neach individual clients.\nFor system stability, any CS in the conference should be able to\nhandle its local clients in addition to the audio packets from other\ndomains. Clearly then, the following inequality must hold for\nevery domain:\n)1( \u00e2\u02c6\u2019\u00e2\u2039\u2026+\u00e2\u2030\u00a5 dN\nd\nM\nC Max (5)\nThe limiting case of (5) (taking the equality) takes the form\n2\n)( dNdNCM MaxMax \u00e2\u2039\u2026\u00e2\u02c6\u2019\u00e2\u2039\u2026+= (6)\nTo optimize d with respect to M, we set\n0)(2 =+\u00e2\u02c6\u2019\u00e2\u2039\u2026\u00e2\u2039\u2026=\n\u00e2\u02c6\u201a\n\u00e2\u02c6\u201a\nMaxMax NCdN\nd\nM\n(7)\nyielding\n\u00ef\u00a3\u00ba\u00ef\u00a3\u00bb\n\u00ef\u00a3\u00b9\n\u00ef\u00a3\u00af\u00ef\u00a3\u00b0\n\u00ef\u00a3\u00ae\n\u00e2\u2039\u2026\n+\n=\nMax\nMax\nN\nNC\nd\n2\n(8)\n([ ]* = Rounding to nearest integer) and hence, M from (6).\nC d M\n50 9 234\n100 17 884\n150 26 1950\n200 34 3434\n250 42 5334\n300 51 7650\n350 59 10384\n400 67 13534\n450 76 17100\n500 84 21084\nTable 1. Values of d and M computed for some values of C\nwith NMax = 3.\nIn Table 1, we give the values of d and M that were computed\nusing (8) and (6) with NMax = 3. We see that the values of d and\nM, being dependent of C, are therefore based on the weakest CS.\nWe see that there is a trade-off between M and d. We could admit\nmore domains in the conference, but at the expense of restricting\nthe total number of clients M in the conference.\nWhile implementing and testing the Conference Servers on a\nPentium III 1.4 GHz running Windows NT, we were able to set\nC=300. But with the advent of faster computers (> 3 GHz), one\ncan easily set C to higher values and determine d and M\naccordingly.\nFig. 4 shows a contour plot and Fig. 5, a 3D-mesh showing\noptimized solutions for CSs of different capacities. These lead us\nto maximize the number of domains, and hence, to maximize the\ntotal number of clients based on the capacity of various CSs. In\nFig. 4, the individual curves represent the total number of clients\ntargeted, and we select a lower value of d, for capacity C, for\ntargeted M to reduce traffic on WAN. Fig. 5 represents a different\nperspective of the same data in 3D.\nFig. 4. Contour Plot of Capacity versus Optimum number of\ndomains for various conference sizes\n7.2 Conferencing with Two Levels of CSs\nNow considering the case where the number of clients in a\nparticular domain is too large, i.e.,\nd\nM\nMi \u00e2\u2030\u00a5 (9)\none has to avoid the denial of service for new clients due to\noverloading of Conference Server. This problem can be solved by\nintroducing a second level of CSs inside the given domain, as in\nFig. 6. The existing M-CS creates a Slave CS (S-CS) that can\nhandle up to C end-users and to which it transfers all its active\nclients. Here, the system works differently as outlined in section\n6.1: The Clients send their audio packets to their local S-CS,\nwhich selects NMax streams, before sending them to a local M-CS,\nwhich will proceed in the same way, before sending NMax streams\nto the other domains. Each newly created S-CS must run on a\nseparate machine. The M-CS has to create more S-CSs if the\nnumber of active clients exceeds C in the course of the conference\nafter the transfer.\nWith this mechanism, the M-CS will be able to create utmost\n\u00ef\u00a3\u00ba\u00ef\u00a3\u00bb\n\u00ef\u00a3\u00ba\n\u00ef\u00a3\u00af\u00ef\u00a3\u00b0\n\u00ef\u00a3\u00af \u00e2\u02c6\u2019\u00e2\u2039\u2026\u00e2\u02c6\u2019\n=\nMax\nMax\nN\ndNC\nU\n)1(\nS-CSs, (10)\nas it must handle 3 (= NMax) packets for each local S-CSs and\n3 (= NMax) packets from each other remote domains. We can then\ncalculate the maximum theoretical number of active clients\nCUMi \u00e2\u2039\u2026= in each domain as well as M, for the whole\nconference as CUdM \u00e2\u2039\u2026\u00e2\u2039\u2026= .\nFig. 5. 3D Plot of Capacity versus Optimum number of domains\nfor various conference sizes\nOf course, one could further create a third level in the hierarchy,\ngiving the possibility of accommodating even more clients. This\nmay be unnecessary as the number of possible clients is large\nenough with two levels.\n8. PERFORMANCE DISCUSSION\nWe now analyze the performance of the algorithm presented in\nsubsection 6.3, i.e., the one taking care of the exchange of audio\npackets between the different domains. Note that the packets that\nare transiting within the LAN take advantage of the higher\ncapacity (generally coupled with multicast capabilities) and\ntherefore do not require a performance analysis.\nThus we have to look only at the RTP packets over the WAN, i.e.,\nbetween participating M-CSs. As each M-CS from a domain will\nbe sending only NMax out of\nd\nM packets to the other CSs\n( MaxN\nd\nM\n>> ), the bandwidth used by the application over a\nWAN is upper-bounded by the following expression.\nThe total number of audio packets transiting over the WAN for\neach time slot is \u00e2\u02c6\u2018 \u00e2\u02c6\u2018= \u00e2\u2030\u00a0=\n\u00ef\u00a3\u00b7\n\u00ef\u00a3\u00b7\n\u00ef\u00a3\u00b8\n\u00ef\u00a3\u00b6\n\u00ef\u00a3\u00ac\n\u00ef\u00a3\u00ac\n\u00ef\u00a3\u00ad\n\u00ef\u00a3\u00abd\ni\nd\nijj\nMaxN\n1 ,1\nwhich is quadratic in the\nnumber of domains (i.e., O(d2\n)).\nHowever, it is independent of the total number of active clients.\nThis would not have been the case had all packets been sent over\nthe network in each time slot.\nThe saving is tremendous. Yet, one may contend that sending\nthree packets to and from all domains is a waste of resources, as\nmost of these streams will not be selected. If just one client is\nactive, selecting a subset of clients in that domain is unnecessary.\nPessimistic and optimistic algorithms as presented in the sequel\naim at reducing the traffic further by harnessing the slow varying\nnature of the LN.\n8.1 Pessimistic algorithm\nConsider a scenario wherein the lowest LN (called LNt) of the\nthree globally selected streams (set F of Section 6.1) exceeds the\nLN of the most dominant stream of a domain. Evidently, the\nchances that the next two dominant streams of that domain being\nselected to F in the next packet period are less. Here, we send this\nmost dominant stream and withhold the other two. There may be\nan error in unique selection across all domains for one packet\nperiod only. As LN varies slowly, the error would get\nautomatically rectified in a subsequent packet period (slot). In this\nalgorithm, there is at least one stream in each period. The net\nnetwork traffic in a packet period in the best case is )1( \u00e2\u02c6\u2019\u00e2\u2039\u2026 dd ,\ni.e., )( 2\ndO using unicast, instead of MaxNdd \u00e2\u2039\u2026\u00e2\u02c6\u2019\u00e2\u2039\u2026 )1( .\nConsiderable valuable bandwidth can be saved using this\nheuristic. The resulting traffic complexity reduces from O(d2\n) to\nO(d) in multicast-enabled networks.\nInitialize LNt = 0 at an M-CS/S-CS\nA. In the first time slot (packet time), each CS\nsends the top NMax streams (based on their LN)\nto all other CSs.\nAt each M-CS/S-CS and for each packet time:\nB. Find the value of lowest LN of the NMax\nglobally selected streams (set F) from the\nprevious time slot. Set LNt with this value.\nC. At each CS domain, select the NMax local\nstreams that have maximum value of LN\n(ToOtherCSs set).\nD. Select streams that have LN > LNt.\nIF there are >= NMax streams with LN > LNt\nthen send top NMax to other CSs.\nELSE IF there are (NMax-1) streams with LN>LNt\nthen send top (NMax-1) plus the one lower\nthan LNt (i.e., top NMax) to other CSs.\nELSE IF there are (NMax-2) streams with LN>LNt\nthen send top (NMax-2) plus the one lower\nthan LNt (i.e. top (NMax -1)) to other CSs.\n\u00e2\u20ac\u00a6\u00e2\u20ac\u00a6\nELSE IF there are NO streams with LN> LNt\nthen send top 1 stream to other CSs.\nE. Packets sent in step D form DB1. Packets\nreceived from other CSs form DB2.\nF. For this time slot, find global NMax streams\nbased on LN from DB1 U DB2 (set F)\nG. Send set F to the clients in its domain.\nUpdate LNt for the next period.\nAlgorithm 2. Pessimistic algorithm to reduce the number of\npackets sent over the Internet.\nFig. 6. Example of a 2-level hierarchy of Conference Servers; the shaded Clients are the one selected by the M-CS and\nwill be sent to other domains\" CSs.\nIn this algorithm the saving in traffic is at the cost of relaxing the\ncondition of formation of globally unique set F. However, the\ndiscrepancies in selected streams at different domains remain for a\nshort period of time depending on the transportation delay\nbetween any two domains. Even for a total delay of 400ms, for\nonly 10 packet time slots the uniqueness is lost. This duration in a\nreal-time interactive conversation is non-perceivable by the\nlistener. In the case that there is a joke and every one laughs, then\nthere would be sudden rise in the number of packets and it would\nbe upper bounded by MaxN)d(O 2\nfor a short period.\n8.2 Optimistic Algorithm\nThe traffic can be reduced further. The scheme in the following\nalgorithm (Algorithm. 3) is withholding all the streams that have\nless value of LN compared to the least of the three in the set F.\nWe can find the correct and unique three streams after a few time\nslots depending on the transportation delay between the domains.\nAs the packet period is of the order of 40ms, the error in the\nselection is unnoticeable. The number of streams on network in\nthis case is always restricted to NMax (=3). Even without Voice\nActivity Detection (VAD), there will be no more than three\nstreams in the network in the best case, thus the total traffic is\nconstant. A sudden burst of traffic, as described in 8.1, is a\nparticular case. These advantages are due to exploitation of the\ncharacteristics of LN.\nInitialize LNt = 0 at an M-CS/S-CS\nA. In the first time slot (packet time), each CS\nsends the top NMax streams (based on their LN)\nto all other CSs.\nAt each M-CS/S-CS and for each packet time:\nB. Find the value of lowest LN of the NMax\nglobally selected streams (set F) from the\nprevious time slot. Set LNt with this value.\nC. At each CS domain, select the NMax local\nstreams that have maximum value of LN\n(ToOtherCSs set)\nD. Select streams that have LN > LNt\nIF there are >= NMax streams with LN > LNt\nthen send top NMax to other CSs.\nELSE IF there are (NMax-1) streams with LN>LNt\nthen send top (NMax-1) and see E.\nELSE IF there are (NMax-2) streams with LN>LNt\nthen send top (NMax-2) and see E.\n\u00e2\u20ac\u00a6\u00e2\u20ac\u00a6\nELSE IF there are NO streams with LN> LNt\nthen don\"t send any stream.\nE. Exceptions:\nIF the stream that was in F in the last\ninterval belongs to this CS then select and\nsend that stream even if its LN is now < LNt.\n(Note this occurs only at that CS which had\nthe stream that was the last of the three in\nthe previous packet period.)\nF. Packets sent in step D and E form DB1. Packets\nreceived from other CSs form DB2.\nG. For this time slot, find global NMax streams\nbased on LN from DB1 U DB2 (set F).\nH. Send set F to the clients in its domain.\nUpdate LNt for the next period.\nAlgorithm 3. Optimistic algorithm to reduce the number of\npackets sent over the Internet\nFurthermore, when VAD is used [13], it would further reduce the\ntraffic by sending the header part of the RTP packet only and not\nthe whole packet, thus in order to keep updating the LN across.\nThe traffic here in this case is O(NMax) for multicast and O(d) for\nunicast.\nWe see that the above algorithms save bandwidth and\ncomputation at each CS, and leads to a scalable architecture with\nmultiple CSs mainly because clients are grouped in domains. The\nnecessary bandwidth is not dependent on the total number of\nactive clients. As the CS always chooses the best three clients out\nof all the clients assigned to it in the domain, addition of new\nclients to the existing conference will not cause any scalability\nproblem.\n8.3 Availability of Multicasting\nIn the architecture that has been proposed, no assumption was\nmade about the availability of multicasting support from the\nnetwork. The traffic will be further reduced if multicasting is\navailable over WAN. It is simple to show that the order of traffic\nwould tend to become O(d) from O(d2\n). This is an approximation\nas saving in multicasting depends also on the topology. The\nanalysis was done for the case wherein multicast is not available\n(a realistic assumption in today\"s Internet). The advantage of this\nset up is that we can use it even if multicasting is partially\navailable. We can instruct CSs during the set-up phase to send\nunicast packets to those CSs that cannot receive multicast packets\nwhereas CSs on multicast enabled routers can exchange packets\non a multicast address. The data structures and conference objects\ninside a CS is given in [14].\nFig. 7. User Interface for setting the weight for NMax audio\nstreams (setting Self-bar to zero avoids echo).\n8.4 Quality Improvement\nThe observed improvement in the perceived quality of the\nconference service is due to: (1) limiting the number of concurrent\nspeakers to a low number such as three. Generally, in a\nconference if more than two participants speak the intelligibility is\nlost. The conversational analysis demonstrates that there would be\na repair mechanism [15] in such a case. (2) Delay: The audio\nstream between any two clients will pass through at most two CSs\nthus reducing the end-to-end delay. For a large conference there\nmight be three CSs however, one hop is within the domain\nincurring negligible delay. (3) As the streams are mixed only at\nthe clients, there can be a customized mix of the streams. The\nindividual tuning of mixing with weights the spatialism is\npreserved. Fig. 7 shows the user interface for the same. The echo\nwhen self-stream is selected can be avoided by reducing the\nweight. Nonetheless, feedback helps in reassuring speaker that\nhe/she is heard by all.\n9. CONCLUSION\nIn this paper, we have presented a discussion on a voice-only\nvirtual conferencing environment. We have argued that the\ndistributed nature of deployment here makes it scalable.\nInteractivity is achieved by adapting a recent stream selection\nscheme based on Loudness Number. Additionally, we incorporate\na result from a more recent work [15] where the sufficiency of\nthree simultaneous speakers has been demonstrated. Thus, there is\nsignificantly effective utilization of bandwidth. A mixed stream is\nplayed out at each client; each client may choose to have a\ncustomized mix since mixing is done at the local terminal of each\nclient. These render impromptu speech in a virtual teleconference\nover VoIP a reality, as in a real face-to-face conference.\nCompatibility is assured thanks to the use of SIP, the most \nsoughtafter signaling protocol. To ensure a satisfying performance, we\ndo not demand the availability of multicast, but use it if and when\navailable. The traffic in the WAN (Internet) is upper-bounded by\nthe square of the number of domains, -- further reduced by using\nheuristic algorithms -- which is far below the total number of\nclients in the conference. This is due to the use of a Conference\nServer local to each domain. VAD techniques help further traffic\nreduction. Using SIP standard for signaling makes this solution\nhighly interoperable.\nWe have implemented a CS application on a campus-wide\nnetwork. We believe this new generation of virtual conferencing\nenvironments will gain more popularity in the future as their ease\nof deployment is assured thanks to readily available technologies\nand scalable frameworks.\n10. REFERENCES\n[1] L Aguilar et al., Architecture for a Multimedia\nTeleconferencing System, in Proceedings of the ACM\nSIGCOMM, Aug 1986, pp. 126-136.\n[2] Carsten Bormann, Joerg Ott et al., Simple Conference\nControl Protocol, Internet Draft, Dec. 1996.\n[3] M. Decina and V. Trecordi, \"Voice over Internet Protocol\nand Human Assisted E-Commerce\", IEEE Comm.\nMagazine, Sept. 1999, pp. 64-67.\n[4] Eckehard Doerry, \"An Empirical Comparison of Copresent\nand Technologically-mediated Interaction based on\nCommunicative Breakdown\", Phd Thesis, Graduate School\nof the University of Oregon, 1995.\n[5] H. P. Dommel and J.J. Garcia-Luna-Aceves, \"Floor Control\nfor Multimedia Conferencing and Collaboration\", J.\nMultimedia Systems, Vol. 5, No. 1, January 1997, pp. 23-38.\n[6] Amitava Dutta-Roy, \"Virtual Meetings with desktop\nconferencing\", IEEE Spectrum, July 1998, pp. 47-56.\n[7] M. Handley and V. Jacobson, \"SDP: Session Description\nProtocol\", RFC 2327, IETF, April 1998.\n[8] M. Handley, J. Crowcroft et al., \"Very large conferences on\nthe Internet: the Internet multimedia conferencing\narchitecture\", Journal of Computer Networks, vol. 31, No.\n3, Feb 1999, pp. 191-204.\n[9] ITU-T Rec. H.323, Packet based Multimedia\nCommunications Systems, vol. 2, 1998.\n[10] P. Koskelainen, H. Schulzrinne and X. Wu, \"A SIP-based\nConference Control Framework\", NOSSDAV\"02, May 2002,\npp. 53-61.\n[11] R Venkatesha Prasad et al., Control Protocol for VoIP\nAudio Conferencing Support, International Conference on\nAdvanced Communication Technology, Mu-Ju, South\nKorea, Feb 2001, pp. 419-424.\n[12] R Venkatesha Prasad et al., \"Automatic Addition and\nDeletion of Clients in VoIP Conferencing\", 6th\nIEEE\nSymposium on Computers and Communications, July 2001,\nHammamet, Tunisia, pp. 386-390.\n[13] R Venkatesha Prasad, H S Jamadagni, Abjijeet, et al\nComparison of Voice Activity Detection Algorithms, 7th\nIEEE Symposium on Computers and Communications. July\n2002, Sicily, Italy, pp. 530-535.\n[14] R. Venkatesha Prasad, Richard Hurni, H S Jamadagni, A\nScalable Distributed VoIP Conferencing using SIP, Proc.\nof the 8th\nIEEE Symposium on Computers and\nCommunications, Antalya, Turkey, June 2003.\n[15] R Venkatesha Prasad, H S Jamadagni and H N Shankar,\n\"On Problem of Specifying Number of Floors in a Voice\nOnly Conference\", To appear in IEEE ITRE 2003.\n[16] R. Venkatesha Prasad, Richard Hurni, H S Jamadagni, \"A\nProposal for Distributed Conferencing on SIP using\nConference Servers\", To appear in the Proc. of MMNS\n2003, Belfast, UK, September 2003.\n[17] R. Venkatesha Prasad, H.S. Jamadagni, J. Kuri, R.S.\nVarchas, A Distributed VoIP Conferencing Support Using\nLoudness Number, Tech. Rep. TR-CEDT-TE-03-01\n[18] M. Radenkovic et al, \"Scaleable and Adaptable Audio\nService for Supporting Collaborative Work and\nEntertainment over the Internet\", SSGRR 2002, L'Aquila,\nItaly, Jan. 2002.\n[19] M. Radenkovic, C. Greenhalgh, S. Benford, Deployment\nIssues for Multi-User Audio Support in CVEs, ACM VRST\n2002, Nov. 2002, pp. 179-185.\n[20] Srinivas Ramanathan, P. Venkata Rangan, Harrick M. Vin,\nDesigning Communication Architectures for\nInterorganizational Multimedia Collaboration, Journal of\nOrganizational Computing, 2 (3&4), pp.277-302, 1992.\n[21] A. B. Roach, \" Session Initiation Protocol (SIP)-Specific\nEvent Notification\", RFC 3265, IETF, June 2002.\n[22] J. Rosenberg, H. Schulzrinne et al., \"SIP: Session Initiation\nProtocol\", RFC 3261, IETF, June 2002.\n[23] J. Rosenberg, H. Schulzrinne, Models for Multy Party\nConferencing in SIP, Internet Draft, IETF, July 2002.\n[24] H. Schulzrinne et al., \"RTP: a transport protocol for \nrealtime applications\", RFC 1889, IETF, Jan 1996.\n[25] Lisa R. Silverman, \"Coming of Age: Conferencing\nSolutions Cut Corporate Costs\", White Paper,\nwww.imcca.org/wpcomingofage.asp\n[26] Kundan Singh, Gautam Nair and Henning Schulzrinne,\n\"Centralized Conferencing using SIP\", Proceedings of the\n2nd IP-Telephony Workshop (IPTel), April 2001.\n[27] D. Thaler, M. Handley and D. Estrin, \"The Internet\nMulticast Address Allocation Architecture\", RFC 2908,\nIETF, Sept. 2000.\n": ["voip conferencing system", "packet-switched network", "audio service framework", "virtual conferencing environment", "conference server", "loudness number", "partial mixing", "voice activity detection", "sufficiency of three simultaneous speaker", "three simultaneous speaker sufficiency", "vad technique", "vce", "voip", "real-time audio", "simultaneous speaker", "sip", ""]}