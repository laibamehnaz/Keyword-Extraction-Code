{"An Initial Analysis and Presentation of Malware Exhibiting\nSwarm-Like Behavior\nFernando C.Col\u00c2\u00b4on Osorio\nWireless System Security Research Laboratory\n(W.S.S.R.L.)\n420 Lakeside Avneue\nMarlboro, Massachusetts 01752\nfcco@cs.wpi.edu\nZachi Klopman\nWireless System Security Research Laboratory\n(W.S.S.R.L.)\n420 Lakeside Avneue\nMarlboro, Massachusetts 01752\nzachi@cs.wpi.edu\nABSTRACT\nThe Slammer, which is currently the fastest computer worm\nin recorded history, was observed to infect 90 percent of all\nvulnerable Internets hosts within 10 minutes. Although the\nmain action that the Slammer worm takes is a relatively \nunsophisticated replication of itself, it still spreads so quickly\nthat human response was ineffective. Most proposed \ncountermeasures strategies are based primarily on rate detection\nand limiting algorithms. However, such strategies are being\ndesigned and developed to effectively contain worms whose\nbehaviors are similar to that of Slammer.\nIn our work, we put forth the hypothesis that next \ngeneration worms will be radically different, and potentially\nsuch techniques will prove ineffective. Specifically, we \npropose to study a new generation of worms called Swarm\nWorms, whose behavior is predicated on the concept of\nemergent intelligence. Emergent Intelligence is the \nbehavior of systems, very much like biological systems such as\nants or bees, where simple local interactions of autonomous\nmembers, with simple primitive actions, gives rise to \ncomplex and intelligent global behavior. In this manuscript we\nwill introduce the basic principles behind the idea of Swarm\nWorms, as well as the basic structure required in order to\nbe considered a swarm worm. In addition, we will present\npreliminary results on the propagation speeds of one such\nswarm worm, called the ZachiK worm. We will show that\nZachiK is capable of propagating at a rate 2 orders of \nmagnitude faster than similar worms without swarm capabilities.\nCategories and Subject Descriptors\nC.2.4 [Distributed Systems]: Intrusion Detection; D.4.6\n[Security and Protection]: Invasive software\nGeneral Terms\nExperimentation, Security\n1. INTRODUCTION AND PREVIOUSWORK\nIn the early morning hours (05:30 GMT) of January 25,\n2003 the fastest computer worm in recorded history began\nspreading throughout the Internet. Within 10 minutes after\nthe first infected host (patient zero), 90 percent of all \nvulnerable hosts had been compromised creating significant \ndisruption to the global Internet infrastructure. Vern Paxson of\nthe International Computer Science Institute and Lawrence\nBerkeley National Laboratory in its analysis of Slammer\ncommented: The Slammer worm spread so quickly that \nhuman response was ineffective, see [4] The interesting part,\nfrom our perspective, about the spread of Slammer is that it\nwas a relatively unsophisticated worm with benign behavior,\nnamely self-reproduction. Since Slammer, researchers have\nexplored the behaviors of fast spreading worms, and have\ndesigned countermeasures strategies based primarily on rate\ndetection and limiting algorithms. For example, Zou, et al.,\n[2], proposed a scheme where a Kalman filter is used to \ndetect the early propagation of a worm. Other researchers\nhave proposed the use of detectors where rates of \nDestination Unreachable messages are monitored by firewalls, and\na significant increase beyond normal, alerts the \norganization to the potential presence of a worm. However, such\nstrategies suffer from the fighting the last War syndrome.\nThat is, systems are being designed and developed to \neffectively contain worms whose behaviors are similar to that of\nSlammer.\nIn the work described here, we put forth the \nhypothesis that next generation worms will be different, and \ntherefore such techniques may have some significant limitations.\nSpecifically, we propose to study a new generation of worms\ncalled Swarm Worms, whose behavior is predicated on the\nconcept of emergent intelligence. The concept of emergent\nintelligence was first studied in association with biological\nsystems. In such studies, early researchers discovered a \nvariety of interesting insect or animal behaviors in the wild.\nA flock of birds sweeps across the sky. A group of ants\nforages for food. A school of fish swims, turns, flees \ntogether away from a predator, ands so forth. In general, this\nkind of aggregate motion has been called swarm \nbehavior. Biologists, and computer scientists in the field of \nartificial intelligence have studied such biological swarms, and\n323\nattempted to create models that explain how the elements\nof a swarm interact, achieve goals, and evolve. Moreover, in\nrecent years the study of swarm intelligence has become\nincreasingly important in the fields of robotics, the design\nof Mobile ad-hoc Networks (MANETS), the design of \nIntrusion Detection Systems, the study of traffic patterns in\ntransportation systems, in military applications, and other\nareas, see [3].\nThe basic concepts that have been developed over the last\ndecade to explain swarms, and swarm behavior include\nfour basic components. These are:\n1. Simplicity of logic & actions: A swarm is composed of\nN agents whose intelligence is limited. Agents in the\nswarm use simple local rules to govern their actions.\nSome models called this primitive actions or behaviors;\n2. Local Communication Mechanisms: Agents interact\nwith other members in the swarm via simple local\ncommunication mechanisms. For example, a bird in a\nflock senses the position of adjacent bird and applies\na simple rule of avoidance and follow.\n3. Distributed control: Autonomous agents interact with\ntheir environment, which probably consists of other\nagents, but act relatively independently from all other\nagents. There is no central command or leader, and\ncertainly there is no global plan.\n4. Emergent Intelligence: Aggregate behavior of \nautonomous agents results in complex intelligent \nbehaviors; including self-organization.\nIn order to understand fully the behavior of such swarms\nit is necessary to construct a model that explains the \nbehavior of what we will call generic worms. This model, which\nextends the work by Weaver [5] is presented here in section 2.\nIn addition, we intend to extend said model in such a way\nthat it clearly explains the behaviors of this new class of\npotentially dangerous worms called Swarm Worms. Swarm\nWorms behave very much like biological swarms and exhibit\na high degree of learning, communication, and distributed\nintelligence. Such Swarm Worms are potentially more \nharmful than their similar generic counterparts. Specifically, the\nfirst instance, to our knowledge, of such a learning worm was\ncreated, called ZachiK. ZachiK is a simple password \ncracking swarm worm that incorporates different learning and\ninformation sharing strategies. Such a swarm worm was \ndeployed in both a local area network of thirty-(30) hosts, as\nwell as simulated in a 10,000 node topology. Preliminary\nresults showed that such worms are capable of \ncompromising hosts at rates up to two orders of magnitude faster than\ntheir generic counterpart. The rest of this manuscript is\nstructure as follows. In section 2 an abstract model of both\ngeneric worms as well as swarm worms is presented. This\nmodel is used in section 2.6 to described the first instance\nof a swarm worm, ZachiK. In section 4, preliminary results\nvia both empirical measurements as well as simulation is\npresented. Finally, in section 5 our conclusions and insights\ninto future work are presented.\n2. WORM MODELING\nIn order to study the behavior of swarm worms in general,\nit is necessary to create a model that realistically reflects\nthe structure of worms and it is not necessarily tied to a\nspecific instance. In this section, we described such a model\nwhere a general worm is describe as having four-(4) basic\ncomponents or subfunctions. By definition, a worm is a \nselfcontained, self propagating program. Thus, in simple terms,\nit has two main functions: that which propagates and that\nwhich does other things. We propose that there is a third\nbroad functionality of a worm, that of self-preservation. We\nalso propose that the other functionality of a worm may\nbe more appropriately categorized as Goal-Based Actions\n(GBA), as whatever functionality included in a worm will\nnaturally be dependent on whatever goals (and subgoals)\nthe author has.\nThe work presented by Weaver et. al. in [5] provides\nus with mainly an action and technique based taxonomy of\ncomputer worms, which we utilize and further extend here.\n2.1 Propagation\nThe propagation function itself may be broken down into\nthree actions: acquire target, send scan, and infect target.\nAcquiring the target simply means picking a host to attack\nnext. Sending a scan involves checking to see if that host is\nreceptive to an infection attempt, since IP-space is sparsely\npopulated. This may involve a simple ping to check if the\nhost is alive or a full out vulnerability assessment. Infecting\nthe target is the actual method used to send the worm code\nto the new host. In algorithm form:\npropagate() {\nhost := acquire_target()\nsuccess := send_scan(host)\nif( success ) then\ninfect(host)\nendif\n}\nIn the case of a simple worm which does not first check to\nsee if the host is available or susceptible (such as Slammer),\nthe scan method is dropped:\npropagate() {\nhost := acquire_target()\ninfect(host)\n}\nEach of these actions may have an associated cost to its\ninclusion and execution, such as increased worm size and\nCPU or network load. Depending on the authors needs or\nrequirements, these become limiting factors in what may be\nincluded in the worm\"s actions. This is discussed further\nafter expanding upon these actions below.\n2.2 Target Acquisition:\nThe Target Acquisition phase of our worm algorithm is\nbuilt directly off of the Target Discovery section in [5]. Weaver\net. al. taxonomize this task into 5 separate categories. Here,\nwe further extend their work through parameterization.\nScanning: Scanning may be considered an equation-based\nmethod for choosing a host. Any type of equation may be\nused to arrive at an IP address, but there are three main\ntypes seen thus far: sequential, random, and local \npreference. Sequential scanning is exactly as it sounds: start at\nan IP address and increment through all the IP space. This\ncould carry with it the options of which IP to start with (user\nchosen value, random, or based on IP of infected host) and\n324\nhow many times to increment (continuous, chosen value, or\nsubnet-based). Random scanning is completely at random\n(depending on the chosen PRNG method and its seed value).\nLocal preference scanning is a variance of either Sequential\nor Random, whereby it has a greater probability of \nchoosing a local IP address over a remote one (for example, the\ntraditional 80/20 split).\nPre-generated Target Lists: Pre-generated Target Lists,\nor so called hit-lists, could include the options for \npercentage of total population and percentage wrong, or just \nnumber of IPs to include. Implicit to this type is the fact that the\nlist is divided among a parent and its children, avoiding the\nproblem of every instance hitting the exact same machines.\nExternally Generated Target Lists: Externally \ngenerated target lists depend on one or more external sources\nthat can be queried for host data. This will involve either\nservers that are normally publicly available, such as gaming\nmeta-servers, or ones explicitly setup by the worm or worm\nauthor. The normally available meta-servers could have \nparameters for rates of change, such as many popping up at\nnight or leaving in the morning. Each server could also have\na maximum queries/second that it would be able to handle.\nThe worm would also need a way of finding these servers,\neither hard-coded or through scanning.\nInternal Target Lists: Internal Target Lists are highly\ndependent on the infected host. This method could \nparameterize the choice of how much info is on the host, such as all\nmachines in subnet, all windows boxes in subnet, \nparticular servers, number of internal/external, or some \ncombination.\nPassive: Passive methods are determined by normal\ninteractions between hosts. Parameters may include a rate\nof interaction with particular machines, internal/external\nrate of interaction, or subnet-based rate of interaction.\nAny of these methods may also be combined to produce\ndifferent types of target acquisition strategies. For example,\nthe a worm may begin with an initial hit-list of 100 different\nhosts or subnets. Once it has exhausted its search using the\nhit-list, it may then proceed to perform random scanning\nwith a 50% local bias.\nIt is important to note, however, that the resource \nconsumption of each method is not the same. Different methods\nmay require the worm to be large, such as the extra bytes \nrequired by a hit-list, or to take more processing time, such as\nby searching the host for addresses of other vulnerable hosts.\nFurther research and analysis should be performed in this\narea to determine associated costs for using each method.\nThe costs could then be used in determining design \ntradeoffs that worm authors engage at. For example, hit lists\nprovide a high rate of infection, but at a high cost of worm\npayload size.\n2.2.1 Sending a Scan\nThe send scan function tests to see if the host is available\nfor infection. This can be as simple as checking if the host\nis up on the network or as complex as checking if the host is\nvulnerable to the exploit which will be used. The sending of\na scan before attempted infection can increase\u00e2\u20ac\u02dc the scanning\nrate if the cost for failing an infection is greater than the\ncost of failing a scan or sending a scan plus infection; and\nfailures are more frequent than successes. One important\nparameter to this would be the choice of transport protocol\n(TCP/UDP) or just simply the time for one successful scan\nand time for one failed scan. Also, whether or not it tests\nfor the host to be up or if it is a full test for the vulnerability\n(or for multiple vulnerabilities).\n2.2.2 Infection Vector (IV)\nThe particular infection vector used to access the remote\nhost is mainly dependent on the particular vulnerability \nchosen to exploit. In a non-specific sense, it is dependent on the\ntransport protocol chosen to use and the message size to be\nsent. Section 3 of [5] also proposes three particular classes\nof IV: Self-carried, second channel, and embedded.\n2.3 Self Preservation\nThe Self Preservation actions of a worm may take many\nforms. In the wild, worms have been observed to disable\nanti-virus software or prevent sending itself to certain \nantivirusknown addresses. They have also been seen to attempt \ndisabling of other worms which may be contending for the same\nsystem. We also believe that a time-based throttled \nscanning may help the worm to slip under the radar. We also\npropose a decoy method, whereby a worm will release a few\nchildren that cause a lot of noise so that the parent is not\nnoticed. It has also been proposed [5] that a worm cause\ndamage to its host if, and only if, it is disturbed in some\nway. This module could contain parameters for: probability\nof success in disabling anti-virus or other software updates,\nprobability of being noticed and thus removed, or \nhardening of the host against other worms.\n2.4 Goal-Based Actions\nA worm\"s GBA functionality depends on the author\"s goal\nlist. The Payloads section of [5] provides some useful \nsuggestions for such a module. The opening of a back-door can\nmake the host susceptible to more attacks. This would \ninvolve a probability of the back-door being used and any \nassociated traffic utilization. It could also provide a list of other\nworms this host is now susceptible to or a list of \nvulnerabilities this host now has. Spam relays and HTTP-Proxies of\ncourse have an associated bandwidth consumption or traffic\npattern. Internet DoS attacks would have a set time of \nactivation, a target, and a traffic pattern. Data damage would\nhave an associated probability that the host dies because of\nthe damage.\nIn Figure 1, this general model of a worm is summarized.\nPlease note that in this model there is no learning, no, or\nvery little, sharing of information between worm instances,\nand certainly no coordination of actions. In the next \nsection we expand the model to include such mechanisms, and\nhence, arrive at the general model of a swarm worm.\n2.5 Swarms - General Model\nAs described in section 1, the basic characteristics that\ndistinguished swarm behavior from simply what appears to\nbe collective coordinated behaviors are four basic attributes.\nThese are:\n1. Simplicity of logic & actions;\n2. Local Communication Mechanisms;\n3. Distributed control; and\n4. Emergent Intelligence, including self-organization.\n325\nStructure Function/Example\nInfection, Infection Vector Executable is run\nProtection & Stealthiness Disable McAfee\n(Staying Alive)\nPropagation Send email\nto everyone in\naddress book\nGoal Based Action (GBA) DDoS www.sco.com\nEverything else, often\ncalled payload\nFigure 1: General Worm Model\nIn this work we aggregate all of these attributes under\nthe general title of Learning, Communication, and \nDistributed Control. The presence of these attributes \ndistinguishes swarm worms from otherwise regular worms, or other\ntypes of malware such as Zombies. In figure ??, the generic\nmodel of a worm is expanded to included these set of actions.\nWithin this context then, a worm like Slammer cannot be\ncategorized as a swarm worm due to the fact that new \ninstances of the worm do not coordinate their actions or share\ninformation. On the other hand, Zombies and many other\nforms of DDoS, which at first glance may be consider swarm\nworms are not. This is simply due to fact that in the case\nof Zombies, control is not distributed but rather centralized,\nand no emergent behaviors arise. The latter, the potential\nemergence of intelligence or new behaviors is what makes\nswarm worms so potentially dangerous. Finally, when one\nconsiders the majority of recent disruptions to the \nInternet Infrastructure, and in light of our description of swarm\nattacks, then said disruptions can be easily categorized as\nprecursors to truly swarm behavior. Specifically,\n\u00e2\u20ac\u00a2 DDOS - Large number of compromised hosts send \nuseless packets requiring processing (Stacheldraht, http :\n//www.cert.org/ incidentnotes/IN \u00e2\u02c6\u2019 99 \u00e2\u02c6\u2019 04.html).\nDDoS attacks are the early precursors to Swarm \nAttacks due to the large number of agents involved.\n\u00e2\u20ac\u00a2 Code Red CrV1, Code Red II, Nimbda - Exhibit early\nnotions of swarm attacks, including a backdoor \ncommunication channel.\n\u00e2\u20ac\u00a2 Staniford & Paxson in How to Own the Internet in\nYour Spare Time? explore modifications to CrV1,\nCode Red I, II with a swarm like type of \nbehavior. For example, they speculate on new worms which\nemploy direct worm-to-worm communication, and \nemploy programmable updates. For example the Warhol\nworm, and Permutation-Scanning (self coordinating)\nworms.\n2.6 Swarm Worm: the details\nIn considering the creation of what we believed to be the\nfirst Swarm Worm in existence, we wanted to adhere as\nclose as possible to the general model presented in section\n?? while at the same time facilitating large scale analysis,\nboth empirical and through simulations, of the behavior of\nthe swarm. For this reason, we selected as the first instance\nStructure Function/Example\nInfection, Infection Vector Executable is run\nProtection & Stealthiness Disable McAfee\n(Staying Alive)\nPropagation Send email\nto everyone in\naddress book\nLearning, Communication, Pheromones/Flags (Test\nand Distributed Control if Worm is already present)\nTime bombs, Learning\nAlgorithms, IRC channel\nGoal Based Action (GBA) DDoS www.sco.com\nEverything else, often\ncalled payload\nFigure 2: General Model of a Swarm Worm\nof the swarm a simple password cracking worm. The \nobjective of this worm simply is to infect a host by sequentially\nattempting to login into the host using well known \npasswords (dictionary attack), passwords that have been \ndiscovered previously by any member of the swarm, and random\npasswords. Once, a host is infected, the worm will create\ncommunication channels with both its known neighbors\nat that time, as well as with any offsprings that it \nsuccessfully generates. In this context a successful generation of an\noffspring means simply infecting a new host and replicating\nan exact copy of itself in such a host. We call this swarm\nworm the ZachiK worm in honor of one of its creators. As\nit can be seen from this description, the ZachiK worm \nexhibits all of the elements described before. In the following\nsections, we described in detail each one of the elements of\nthe ZachiK worm.\n2.7 Infection Vector\nThe infection vector used for ZachiK worm is the secure\nshell protocol SSH. A modified client which is capable of \nreceiving passwords from the command line was written, and\nintegrated with a script that supplies it with various \npasswords: known and random. When a password is found for\nan appropriate target, the infection process begins. After\nthe root password of a host is discovered, the worm infects\nthe target host and replicates itself. The worm creates a\nnew directory in the target host, copies the modified ssh\nclient, the script, the communications servers, and the \nupdated versions of data files (list of known passwords and a\nlist of current neighbors). It then runs the modified script\non the newly infected hosts, which spawns the \ncommunications server, notifies the neighbors and starts looking for\nnew targets.\nIt could be argued, correctly, that the ZachiK worm can be\neasily defeated by current countermeasure techniques present\non most systems today, such as disallowing direct root logins\nfrom the network. Within this context ZachiK can quickly\nbe discarded as very simple and harmless worm that does\nnot require further study. However, the reader should \nconsider the following:\n1. ZachiK can be easily modified to include a variety of \ninfection vectors. For example, it could be programmed\nto guess common user names and their passwords; gain\n326\naccess to a system, then guess the root password or use\nother well know vulnerabilities to gain root privileges;\n2. ZachiK is a proof of concept worm. The importance\nof ZachiK is that it incorporates all of the behaviors of\na swarm worm including, but not restricted to, \ndistributed control, communication amongst agents, and\nlearning;\n3. ZachiK is composed of a large collection of agents \noperating independently which lends itself naturally to\nparallel algorithms such as a parallel search of the\nIPV4 address space. Within this context, SLAMMER,\ndoes incorporate a parallel search capability of \npotentially susceptible addresses. However, unlike ZachiK,\nthe knowledge discovered by the search is never shared\namongst the agents.\nFor this reasons, and many others, one should not discard\nthe potential of this new class of worms but rather embrace\nits study.\n2.8 Self-Preservation\nIn the case of ZachiK worm, the main self-preservation\ntechniques used are simply keeping the payload small. In\nthis context, this simply means restricting the number of\npasswords that an offspring inherits, masquerading worm\nmessages as common http requests, and restricting the \nnumber of neighbors to a maximum of five-(5).\n2.9 Propagation\nChoosing the next target(s) in an efficient matter requires\nthought. In the past, known and proposed worms, see [5],\nhave applied propagation techniques that varied. These \ninclude: strictly random selection of a potential vulnerable\nhost; target lists of vulnerable hosts; locally biased random\nselection (select a host target at random from a local \nsubnet); and a combination of some or all of the above. In\nour test and simulation environments, we will apply a \ncombination of locally biased and totally random selection of\npotential vulnerable hosts. However, due to the fact that\nthe ZachiK worm is a swarm worm, address discovery (that\nis when non-existent addresses are discovered) information\nwill be shared amongst members of the swarm.\nThe infection and propagation threads do the following\nset of activities repeatedly:\n\u00e2\u20ac\u00a2 Choose an address\n\u00e2\u20ac\u00a2 Check the validity of the address\n\u00e2\u20ac\u00a2 Choose a set of passwords\n\u00e2\u20ac\u00a2 Try infecting the selected host with this set of \npasswords\nAs described earlier, choosing an address makes use of a\ncombination of random selection, local bias, and target lists.\nSpecifically, to choose an address, the instance may either:\n\u00e2\u20ac\u00a2 Generate a new random address\n\u00e2\u20ac\u00a2 Generate an address on the local network\n\u00e2\u20ac\u00a2 Pick an address from a handoff list\nThe choice is made randomly among these options, and can\nbe varied to test the dependency of propagation on \nparticular choices. Password are either chosen from the list of\nknown passwords or newly generated. When an infection of\na valid address fails, it is added to a list of handoffs, which\nis sent to the neighbors to try to work on.\n2.10 Learning, CommunicationandDistributed\nControl\n2.10.1 Communication\nThe concept of a swarm is based on transfer of \ninformation amongst neighbors, which relay their new incoming\nmessages to their neighbors, and so on until every worm \ninstance in the swarm is aware of these messages. There are\ntwo classes of messages: data or information messages and\ncommands. The command messages are meant for an \nexternal user (a.k.a., hackers and/or crackers) to control the\nactions of the instances, and are currently not implemented.\nThe information messages are currently of three kinds: new\nmember, passwords and exploitable addresses (handoffs).\nThe new member messages are messages that a new instance\nsends to the neighbors on its (short) list of initial neighbors.\nThe neighbors then register these instances in their neighbor\nlist. These are messages that form the multi-connectivity of\nthe swarm, and without them, the topology will be a \ntreelike structure, where eliminating a single node would cause\nthe instances beneath it to be inaccessible. The passwords\nmessages inform instances of newly discovered passwords,\nand by informing all instances, the swarm as whole collects\nthis information, which allows it to infect new instances\nmore effectively. The handoffs messages inform instances\nof valid addresses that could not be compromised (fail at\nbreaking the password for the root account). Since the \naddress space is rather sparse, it takes a relatively long time\n(i.e. many trials) to discover a valid address. Therefore, by\nhanding off discovered valid addresses, the swarm is (a) \nconserving energy by not re-discovering the same addresses\n(b) attacking more effectively. In a way, this is a simple\ninstance of coordinated activity of a swarm.\n2.10.2 Coordination\nWhen a worm instance is born, it relays its existence\nto all neighbors on its list. The main thread then spawns\na few infection threads, and continues to handle incoming\nmessages (registering neighbors, adding new passwords, \nreceiving addresses and relaying these messages).\n2.10.3 Distributed Control\nControl in the ZachiK worm is distributed in the sense\nthat each instance of the worm performs a set of actions \nindependently of every other instance while at the same time\nbenefiting from the learning achieve by its immediate \nneighbors.\n2.11 Goal Based Actions\nThe first instantiation of the ZachiK worm has two basic\ngoals. These are: (1) propagate, and (2) discover and share\nwith members of th swarm new root passwords.\n3. EXPERIMENTAL DESIGN\nIn order to verify our hypothesis that Swarm Worms are\nmore capable, and therefore dangerous than other well known\n327\nworms, a network testbed was created, and a simulator,\ncapable of simulating large scale Internet-like topologies\n(IPV4 space), was developed. The network testbed \nconsisted of a local area network of 30 Linux based computers.\nThe simulator was written in C++\n. The simple swarm worm\ndescribed in section 2.6 was used to infect patient-zero, and\nthen the swarm worm was allowed to propagate via its own\nmechanisms of propagation, distributed control, and swarm\nbehaviors.\nIn the case of a simple local area network of 30 \ncomputers, six-(6) different root passwords out of a password space\nof 4 digits (10000 options) were selected. At the start of\nthe experiment a single known password is known, that of\npatient-zero. All shared passwords are distributed randomly\nacross all nodes. Similarly, in the case of the simulation, a\nnetwork topology of 10,000 hosts, whose addresses were \nselected randomly across the IPV4 space, was constructed.\nWithin that space, a total of 200 shared passwords were \nselected and distributed either randomly and/or targeted to\nspecific network topologies subnets. For example, in one of\nour simulation runs, the network topology consisted of 200\nsubnets each containing 50 hosts. In such a topology, shared\npasswords were distributed across subnets where a varying\npercentage of passwords were shared across subnets. The\npercentages of shared passwords used was reflective of early\nempirical studies, where up to 39.7% of common passwords\nwere found to be shared.\n4. RESULTS\nIn Figure 3, the results comparing Swarm Attack behavior\nversus that of a typical Malform Worm for a 30 node LAN\nare presented. In this set of empirical runs, six-(6) shared\npasswords were distributed at random across all nodes from\na possible of 10,000 unknown passwords. The data presented\nreflects the behaviors of a total of three-(3) distinct classes\nof worm or swarm worms. The class of worms presented are\nas follows:\n\u00e2\u20ac\u00a2 I-NS-NL:= Generic worm, independent (I), no \nlearning/memoryless (NL), and no sharing of information\nwith neighbors or offsprings (NS);\n\u00e2\u20ac\u00a2 S-L-SP:= Swarm Worm (S), learning (L), keeps list\nof learned passwords, and sharing of passwords (SP)\nacross nearest neighbors and offsprings; and\n\u00e2\u20ac\u00a2 S-L-SP&A:= Swarm Worm (S), learning (L), keeps list\nof learned passwords, and sharing of passwords and \nexistent addresses (SP&A) across nearest neighbors and\noffsprings.\nAs it is shown in Figure 3, the results validate our original\nhypothesis that swarm worms are significantly more efficient\nand dangerous than generic worms. In this set of \nexperiments, the sharing of passwords provides an order of \nmagnitude improvement over a memoryless random worm. \nSimilarly, a swarm worm that shares passwords and addresses is\napproximately two orders of magnitude more efficient than\nits generic counterpart.\nIn Figure 3, a series of discontinuities can be observed.\nThese discontinuities are an artifact of the small sample\nspace used for this experiment. Basically, as soon as a \npassword is broken, all nodes sharing that specific password are\ninfected within a few seconds. Note that it is trivial for a\nswarm worm to scan and discovered a small shared password\nspace.\nIn Figure 4, the simulation results comparing Swarm \nAttack Behavior versus that of a Generic Malform Worm are\npresented. In this set of simulation runs, a network \ntopology of 10,000 hosts, whose addresses were selected randomly\nacross the IPV4 space, was constructed. Within that space,\na total of 200 shared passwords were selected and distributed\neither randomly and/or targeted to specific network \ntopologies subnets. The data presented reflects the behaviors of\nthree-(3) distinct classes of worm or swarm worms and \ntwo(2) different target host selection scanning strategies \n(random scanning and local bias). The amount of local bias\nwas varied across multiple simulation runs. The results \npresented are aggregate behaviors. In general the following\nclass of Generic Worms and Swarm Worms were simulated.\nAddress Scanning:\n\u00e2\u20ac\u00a2 Random:= addresses are selected at random from a\nsubset of the IPV4 space, namely, a 224\naddress space;\nand\n\u00e2\u20ac\u00a2 Local Bias:= addresses are selected at random from\neither a local subnet (256 addresses) or from a subset\nof the IPV4 space, namely, a 224\naddress space. The\npercentage of local bias is varied across multiple runs.\nLearning, Communication & Distributed Control\n\u00e2\u20ac\u00a2 I-NL-NS: Generic worm, independent (I), no learning/\nmemoryless (NL), and no sharing of information with\nneighbors or offsprings (NS);\n\u00e2\u20ac\u00a2 I-L-OOS: Generic worm, independent (I), learning/\nmemoryless (L), and one time sharing of information\nwith offsprings only (OOS);\n\u00e2\u20ac\u00a2 S-L-SP:= Swarm Worm (S), learning (L), keeps list\nof learned passwords, and sharing of passwords (SP)\nacross nearest neighbors and offsprings;\n\u00e2\u20ac\u00a2 S-L-S&AOP:= Swarm Worm (S), learning (L), keeps\nlist of learned passwords, and sharing of addresses with\nneighbors and offsprings, shares passwords one time\nonly (at creation) with offsprings(SA&OP);\n\u00e2\u20ac\u00a2 S-L-SP&A:= Swarm Worm (S), learning (L), keeps list\nof learned passwords, and sharing of passwords and \nexistent addresses (SP&A) across nearest neighbors and\noffsprings.\nAs it is shown in Figure 4, the results are consistent with\nour set of empirical results. In addition, the following \nobservations can be made.\n1. Local preference is incredibly effective.\n2. Short address handoffs are more effective than long\nones. We varied the size of the list allowed in the\nsharing of addresses; the overhead associated with a\nlong address list is detrimental to the performance of\nthe swarm worm, as well as to its stealthiness;\n3. For the local bias case, sharing valid addresses of \nsusceptible host, S-L-S&AOP worm (recall, the S-L-S&AOP\nswarm shares passwords, one time only, with offsprings\n328\nat creation time) is more effective than sharing \npasswords in the case of the S-L-SP swarm. In this case,\nwe can think of the swarm as launching a \ndistributeddictionary attack: different segments of the swarm use\ndifferent passwords to try to break into susceptible \nuninfected host. In the local bias mode, early in the life\nof the swarm, address-sharing is more effective than\npassword-sharing, until most subnets are discovered.\nThen the targeting of local addresses assists in \ndiscovering the susceptible hosts, while the swarm members\nneed to waste time rediscovering passwords; and\n4. Infecting the last 0.5% of nodes takes a very long time\nin non-local bias mode. Basically, the shared password\nlist across subnets has been exhausted, and the swarm\nreverts to simply a random discovery of password \nalgorithm.\nFigure 3: Swarm Attack Behavior vs. Malform\nWorm: Empirical Results, 30node LAN\nFigure 4: Swarm Attack Behavior vs. Malform\nWorm: Simulation Results\n5. SUMMARY AND FUTURE WORK\nIn this manuscript, we have presented an abstract model,\nsimilar in some aspects to that of Weaver [5], that helps\nexplain the generic nature of worms. The model presented\nin section 2 was extended to incorporate a new class of \npotentially dangerous worms called Swarm Worms. Swarm\nWorms behave very much like biological swarms and exhibit\na high degree of learning, communication, and distributed\nintelligence. Such Swarm Worms are potentially more \nharmful than their generic counterparts.\nIn addition, the first instance, to our knowledge, of such a\nlearning worm was created, called ZachiK. ZachiK is a \nsimple password cracking swarm worm that incorporates \ndifferent learning and information sharing strategies. Such a\nswarm worm was deployed in both a local area network of\nthirty-(30) hosts, as well as simulated in a 10,000 node \ntopology. Preliminary results showed that such worms is capable\nof compromising hosts a rates up to 2 orders of magnitude\nfaster than its generic counterpart while retaining stealth\ncapabilities.\nThis work opens up a new area of interesting problems.\nSome of the most interesting and pressing problems to be\nconsider are as follows:\n\u00e2\u20ac\u00a2 Is it possible to apply some of learning concepts \ndeveloped over the last ten years in the areas of swarm\nintelligence, agent systems, and distributed control to\nthe design of sophisticated swarm worms in such a way\nthat true emergent behavior takes place?\n\u00e2\u20ac\u00a2 Are the current techniques being developed in the \ndesign of Intrusion Detection & CounterMeasure \nSystems and Survivable systems effective against this new\nclass of worms?; and\n\u00e2\u20ac\u00a2 What techniques, if any, can be developed to create\ndefenses against swarm worms?\n6. ACKNOWLEDGMENTS\nThis work was conducted as part of a larger effort in the\ndevelopment of next generation Intrusion Detection & \nCounterMeasure Systems at WSSRL. The work is conducted \nunder the auspices of Grant ACG-2004-06 by the Acumen \nConsulting Group, Inc., Marlboro, Massachusetts.\n7. REFERENCES\n[1] C.C. Zou, L. Gao, W. G., and Towsley, D.\nMonitoring and early warning for internet worms. In\n10th ACM Conference on Computer and\nCommunications Security, Washington, DC (October\n2003).\n[2] Liu, S., and Passino, K. Swarm intelligence:\nLiterature overview. In Dept. of Electrical Engineering,\nThe Ohio State University, 2015 Neil Ave., Columbus,\nOH 43210 (2000).\n[3] Moore, D., Paxson, V., Savage, S., Shannon, C.,\nStaniford, S., and Weaver, N. The spread of the\nsaphire/slammer worm. Tech. rep., A joint effort of\nCAIDA, ICSI, Silicon Defense, UC Berkeley EECS and\nUC San Diego CSE, 2003.\n[4] Weaver, N., Paxson, V., Staniford, S., and\nCunningham, R. A taxonomy of computer worms. In\nProceedings of the ACM Workshop on Rapid Malware\n(WORM) (2003).\n329\n": ["malware", "swarm worm", "emergent intelligence", "slammer worm", "local communication mechanism", "zachik", "prng method", "pre-generated target list", "distributed intelligence", "intrusion detection", "countermeasure system", "emergent behavior", "internet worm", "swarm intelligence", ""]}