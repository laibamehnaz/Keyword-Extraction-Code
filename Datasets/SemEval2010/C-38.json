{"A Framework for Architecting Peer-to-Peer Receiver-driven\nOverlays\nReza Rejaie\nDepartment of Computer Science\nUniversity of Oregon\nreza@cs.uoregon.edu\nShad Stafford\nDepartment of Computer Science\nUniversity of Oregon\nstaffors@cs.uoregon.edu\nABSTRACT\nThis paper presents a simple and scalable framework for \narchitecting peer-to-peer overlays called Peer-to-peer \nReceiverdriven Overlay (or PRO). PRO is designed for non-interactive\nstreaming applications and its primary design goal is to \nmaximize delivered bandwidth (and thus delivered quality) to\npeers with heterogeneous and asymmetric bandwidth. To\nachieve this goal, PRO adopts a receiver-driven approach\nwhere each receiver (or participating peer) (i) independently\ndiscovers other peers in the overlay through gossiping, and\n(ii) selfishly determines the best subset of parent peers through\nwhich to connect to the overlay to maximize its own \ndelivered bandwidth. Participating peers form an \nunstructured overlay which is inherently robust to high churn rate.\nFurthermore, each receiver leverages congestion controlled\nbandwidth from its parents as implicit signal to detect and\nreact to long-term changes in network or overlay condition\nwithout any explicit coordination with other participating\npeers. Independent parent selection by individual peers \ndynamically converge to an efficient overlay structure.\nCategories and Subject Descriptors: C.2.4 \n[ComputerCommunication Networks]: Distributed Systems\nGeneral Terms: Design, Measurement\n1. INTRODUCTION\nLimited deployment of IP multicast has motivated a new\ndistribution paradigm over the Internet based on overlay\nnetworks where a group of participating end-systems (or\npeers) form an overlay structure and actively participate in\ndistribution of content without any special support from the\nnetwork (e.g., [7]). Since overlay structures are layered over\nthe best-effort Internet, any approach for constructing \noverlay should address the following fundamental challenges: (i)\nScalability with the number of participating peers, (ii) \nRobustness to dynamics of peer participation, (iii) Adaptation\nto variations of network bandwidth, and (iv) \nAccommodating heterogeneity and asymmetry of bandwidth connectivity\namong participating peers[19]. Coping with bandwidth \nvariations, heterogeneity and asymmetry are particularly \nimportant in design of peer-to-peer overlay for streaming \napplications because delivered quality to each peer is directly\ndetermined by its bandwidth connectivity to (other peer(s)\non) the overlay.\nThis paper presents a simple framework for architecting\nPeer-to-peer Receiver-driven Overlay, called PRO. PRO can\naccommodate a spectrum of non-interactive streaming \napplications ranging from playback to lecture-mode live \nsessions. The main design philosophy in PRO is that each\npeer should be allowed to independently and selfishly \ndetermine the best way to connect to the overlay in order to\nmaximize its own delivered quality. Toward this end, each\npeer can connect to the overlay topology at multiple points\n(i.e., receive content through multiple parent peers). \nTherefore, participating peers form an unstructured overlay that\ncan gracefully cope with high churn rate[5]. Furthermore,\nhaving multiple parent peers accommodates bandwidth \nheterogeneity and asymmetry while improves resiliency against\ndynamics of peer participation.\nPRO consists of two key components: (i) Gossip-based\nPeer Discovery: Each peer periodically exchanges message\n(i.e., gossips) with other known peers to progressively learn\nabout a subset of participating peers in the overlay that\nare likely to be good parents. Gossiping provides a \nscalable and efficient approach to peer discovery in unstructured\npeer-to-peer networks that can be customized to guide \ndirection of discovery towards peers with desired properties\n(e.g., peers with shorter distance or higher bandwidth). (ii)\nReceiver-driven Parent Selection: Given the collected \ninformation about other participating peers by gossiping \nmechanism, each peer (or receiver) gradually improves its own\ndelivered quality by dynamically selecting a proper subset\nof parent peers that collectively maximize provided \nbandwidth to the receiver. Since the available bandwidth from\ndifferent participating peers to a receiver (and possible \ncorrelation among them) can be measured only at that receiver, a\nreceiver-driven approach is the natural solution to maximize\navailable bandwidth to heterogeneous peers. Furthermore,\nthe available bandwidth from parent peers serves as an \nimplicit signal for a receiver to detect and react to changes\nin network or overlay condition without any explicit \ncoordination with other participating peers. Independent parent\nselection by individual peers leads to an efficient overlay that\nmaximizes delivered quality to each peer. PRO incorporates\n42\nseveral damping functions to ensure stability of the overlay\ndespite uncoordinated actions by different peers.\nPRO is part of a larger architecture that we have \ndeveloped for peer-to-peer streaming. In our earlier work, we\ndeveloped a mechanism called PALS [18] that enables a \nreceiver to stream layered structured content from a given\nset of congestion controlled senders. Thus, PRO and PALS\nare both receiver-driven but complement each other. More\nspecifically, PRO determines a proper subset of parent peers\nthat collectively maximize delivered bandwidth to each \nreceiver whereas PALS coordinates in-time streaming of \ndifferent segments of multimedia content from these parents\ndespite unpredictable variations in their available bandwidth.\nThis division of functionality provides a great deal of \nflexibility because it decouples overlay construction from delivery\nmechanism. In this paper, we primarily focus on the overlay\nconstruction mechanism, or PRO.\nThe rest of this paper is organized as follows: In Section\n2, we revisit the problem of overlay construction for \npeerto-peer streaming and identify its two key components and\nexplore their design space. We illustrate the differences \nbetween PRO and previous solutions, and justify our design\nchoices. We present our proposed framework in Section 3.\nIn Sections 4 and 5, the key components of our framework\nare described in further detail. Finally, Section 6 concludes\nthe paper and presents our future plans.\n2. REVISITING THE PROBLEM\nConstructing a peer-to-peer overlay for streaming \napplications should not only accommodate global design goals such\nas scalability and resilience but also satisfy the local design\ngoal of maximizing delivered quality to individual peers 1\n.\nMore specifically, delivered quality of streaming content to\neach peer should be proportional to its incoming access link\nbandwidth. Achieving these goals is particularly challenging\nbecause participating peers often exhibit heterogeneity and\nasymmetry in their bandwidth connectivity.\nSolutions for constructing peer-to-peer overlays often \nrequire two key mechanisms to be implemented at each peer:\nPeer Discovery (PD) and Parent Selection (PS). The PD\nmechanism enables each peer to learn about other \nparticipating peers in the overlay. Information about other peers\nare used by the PS mechanism at each peer to determine\nproper parent peers through which it should connect to the\noverlay. The collective behavior of PD and PS mechanisms\nat all participating peers leads to an overlay structure that\nachieves the above design goals. There has been a wealth of\nprevious research that explored design space of the PD and\nPS mechanisms as follows:\nPeer Discovery: In structured peer-to-peer networks, the\nexisting structure enables each peer to find other \nparticipating peers in a scalable fashion (e.g., [4]). However,\nstructured peer-to-peer networks may not be robust against\nhigh churn rate [5]. In contrast, unstructured peer-to-peer\nnetworks can gracefully accommodate high churn rate [5]\nbut require a separate peer discovery mechanism. \nMeshfirst approaches (e.g., [7, 6]) that require each peer to know\nabout all other participating peers as well as centralized \napproaches (e.g., [16]) to peer discovery exhibit limited \nscalability. NICE [2] leverages a hierarchal structure to achieve\n1\nIt is worth clarifying that our design goal is different from\ncommon goals in building application-level multicast trees\n[7] (i.e., minimizing stretch and stress).\nscalability but each peer only knows about a group of \ncloseby peers who may not be good parents (i.e., may not provide\nsufficient bandwidth).\nParent Selection: We examine two key aspects of parent\nselections:\n(i) Selection Criteria: There are two main criteria for \nparent selections: relative delay and available bandwidth \nbetween two peers. Relative delay between any two peers can\nbe estimated in a scalable fashion with one of the existing\nlandmark-based solutions such as Global Network \nPositioning (GNP) [15]. However, estimating available bandwidth\nbetween two peers requires end-to-end measurement. \nUsing available bandwidth as criteria for parent selection does\nnot scale for two reasons: First, to cope with dynamics of\nbandwidth variations, each peer requires to periodically \nestimate the available bandwidth from all other peers through\nmeasurement (e.g., [6]). Second, the probability of \ninterference among different measurements grows with the number\nof peers in an overlay (similar to joint experiment in RLM\n[13]).\nMost of the previous solutions adopted the idea of \napplication level multicast and used delay as the main selection\ncriteria. Participating peers cooperatively run a distributed\nalgorithm to organize themselves into a source-rooted tree\nstructure in order to minimize either overall delay across\nall branches of the tree (e.g., [7]), or delay between source\nand each receiver peer (e.g., [20]). While these parent \nselection strategies minimize associated network load, they may\nnot provide sufficient bandwidth to individual peers because\ndelay is often not a good indicator for available bandwidth\nbetween two peers [12, 14]. The key issue is that minimizing\noverall delay (global design goal) and maximizing delivered\nbandwidth to each peer (local design goal) could easily be in\nconflict. More specifically, parent peers with longer relative\ndistance may provide higher bandwidth than close-by \nparents. This suggests that there might exist a tradeoff between\nmaximizing provided bandwidth to each peer and \nminimizing overall delay across the overlay.\n(ii) Single vs Multiple Parents: A single tree structure for\nthe overlay (where each peer has a single parent) is \ninherently unable to accommodate peers with heterogeneous\nand asymmetric bandwidth. A common approach to \naccommodating bandwidth heterogeneity is to use layer \nstructured content (either layered or multiple description \nencodings) and allow each receiver to have multiple parents. This\napproach could accommodate heterogeneity but it \nintroduces several new challenges. First, parent selection \nstrategy should be determined based on location of a bottleneck.\nIf the bottleneck is at the (outgoing) access links of parent\npeers 2\n, then a receiver should simply look for more parents.\nHowever, when the bottleneck is else where in the network,\na receiver should select parents with a diverse set of paths\n(i.e., utilize different network paths). In practice, a \ncombination of these cases might simultaneously exist among\nparticipating peers [1]. Second, streaming a single \ncontent from multiple senders is challenging for two reasons:\n1) This requires tight coordination among senders to \ndetermine overall delivered quality (e.g., number of layers) and\ndecide which sender is responsible for delivery of each \nsegment. 2) Delivered segments from different senders should\narrive before their playout times despite uncorrelated \nvari2\nif bottleneck is at the receiver\"s access link, then provided\nbandwidth to the receiver is already maximized.\n43\nations in (congestion controlled) bandwidth from different\nsenders. This also implies that those solutions that build\nmulti-parent overlay structure but do not explicitly ensure\nin-time delivery of individual segments (e.g., [3, 11]) may\nnot be able to support streaming applications.\nOne approach to build a multi-parent overlay is to \norganize participating peers into different trees where each layer\nof the stream is sent to a separate tree (e.g., [4, 16]). Each\npeer can maximize its quality by participating in a proper\nnumber of trees. This approach raises several issues: 1) the\nprovided bandwidth to peers in each tree is limited by \nminimum uplink bandwidth among upstream peers on that tree.\nIn the presence of bandwidth asymmetry, this could easily\nlimit delivered bandwidth on each tree below the required\nbandwidth for a single layer, 2) it is not feasible to build \nseparate trees that are all optimal for a single selection criteria\n(e.g., overall delay),. 3) connections across different trees are\nlikely to compete for available bandwidth on a single \nbottleneck3\n. We conclude that a practical solution for \npeer-topeer streaming applications should incorporate the following\ndesign properties: (i) it should use an unstructured, \nmultiparent peer-to-peer overlay, (ii) it should provide a scalable\npeer discovery mechanism that enables each peer to find its\ngood parents efficiently, (iii) it should detect (and possibly\navoid) any shared bottleneck among different connections in\nthe overlay, and (iv) it should deploy congestion controlled\nconnections but ensure in-time arrival of delivered segments\nto each receiver. In the next section, we explain how PRO\nincorporates all the above design properties.\n3. P2P RECEIVER-DRIVEN OVERLAY\nAssumptions: We assume that each peer can estimate\nthe relative distance between any two peers using the GNP\nmechanism [15]. Furthermore, each peer knows the \nincoming and outgoing bandwidth of its access link. Each peer\nuses the PALS mechanism to stream content from \nmultiple parent peers. All connections are congestion controlled\nby senders (e.g., [17]). To accommodate peer bandwidth\nheterogeneity, we assume that the content has a layered\nrepresentation. In other words, with proper adjustment,\nthe framework should work with both layered and \nmultipledescription encodings. Participating peers have \nheterogeneous and asymmetric bandwidth connectivity. \nFurthermore, peers may join and leave in an arbitrary fashion.\nOverview: In PRO, each peer (or receiver) progressively\nsearches for a subset of parents that collectively maximize\ndelivered bandwidth and minimize overall delay from all \nparents to the receiver. Such a subset of parents may change\nover time as some parents join (or leave) the overlay, or \navailable bandwidth from current parents significantly changes.\nNote that each peer can be both receiver and parent at\nthe same time 4\n. Each receiver periodically exchanges \nmessages (i.e., gossips) with other peers in the overlay to learn\nabout those participating peers that are potentially good\nparents. Potentially good parents for a receiver are \nidentified based on their relative utility for the receiver. The\nutility of a parent peer pi for a receiver pj is a function of\ntheir relative network distance (delij) and the outgoing \naccess link bandwidth of the parent (outbwi), (i.e., U(pi, pj)\n3\nThese multi-tree approaches often do not use congestion\ncontrol for each connection.\n4\nThroughout this paper we use receiver and parent as\nshort form for receiver peer and parent peer.\n= f(delij, outbwi)). Using parents\" access link bandwidth\ninstead of available bandwidth has several advantages: (i)\noutgoing bandwidth is an upper bound for available \nbandwidth from a parent. Therefore, it enables the receiver to\nroughly classify different parents. (ii) estimating available\nbandwidth requires end-to-end measurement and such a \nsolution does not scale with the number of peers, and more\nimportantly, (iii) given a utility function, this approach \nenables any peer in the overlay to estimate relative utility of\nany other two peers. Each receiver only maintains \ninformation about a fixed (and relatively small) number of promising\nparent peers in its local image. The local image at each \nreceiver is dynamically updated with new gossip messages as\nother peers join/leave the overlay. Each peer selects a new\nparent in a demand-driven fashion in order to minimize the\nnumber of end-to-end bandwidth measurements, and thus\nimprove scalability. When a receiver needs a new parent,\nits PS mechanism randomly selects a peer from its local \nimage where probability of selecting a peer directly depends on\nits utility. Then, the actual properties (i.e., available \nbandwidth and delay) of the selected parent are verified through\npassive measurement. Toward this end, the selected parent\nis added to the parent list which triggers PALS to request\ncontent from this parent. Figure 1 depicts the interactions\nbetween PD and PS mechanisms.\nIn PRO, each receiver leverages congestion controlled \nbandwidth from its parents as an implicit signal to detect two\nevents: (i) any measurable shared bottleneck among \nconnections from different parents, and (ii) any change in \nnetwork or overlay conditions (e.g., departure or arrival of other\nclose-by peers). Figure 2 shows part of an overlay to \nillustrate this feature. Each receiver continuously monitors \navailable bandwidth from all its parents. Receiver p0 initially has\nonly p1 as a parent. When p0 adds a new parent (p2), the\nreceiver examines the smoothed available bandwidth from\np1 and p2 and any measurable correlation between them. If\nthe available bandwidth from p1 decreases after p2 is added,\nthe receiver can conclude that these two parents are behind\nthe same bottleneck (i.e., link L0). We note that paths\nfrom two parents might have some overlap that does not\ninclude any bottleneck. Assume another receiver p3 selects\np1 as a parent and thus competes with receiver p0 for \navailable bandwidth on link L1. Suppose that L1 becomes a\nbottleneck and the connection between p1 to p3 obtains a\nsignificantly higher share of L1\"s bandwidth than connection\nbetween p1 to p0. This change in available bandwidth from\np1 serves as a signal for p0. Whenever a receiver detects such\na drop in bandwidth, it waits for a random period of time\n(proportional to the available bandwidth) and then drops\nSource\nPeer Disc.\nPeer Selec.\ngossip\nExam.\na New\nParent\nCriteriafor\nPeerDiscovery\nUpdate\nLocalImage\noftheOverlay\nUnknown peers in the overlay\nKnown peers in the overlay\nSelect\nInternal Components of Receiver Peer\nReceiver\nPeer\nFigure 1: Interactions between PD and PS \nmechanisms through local image\n44\nP1\nP3\nP0\nL0\nL1\nL3\nOverlay connection\nNetwork Path\nP2\nL2\nP1\nP3\nP0\nL0\nL1\nL3 P2\nL2\nInitial Overlay Reshaped Overlay\nFigure 2: Using congestion controlled bandwidth as\nsignal to reshape the overlay\nthe corresponding parent if its bandwidth remains low [8].\nTherefore, the receiver with a higher bandwidth \nconnectivity (p3) is more likely to keep p1 as parent whereas p0 may\nexamine other parents with higher bandwidth including p3.\nThe congestion controlled bandwidth signals the receiver to\nproperly reshape the overlay. We present a summary of key\nfeatures and limitations of PRO in the next two sections.\nTable 1 summarizes our notation throughout this paper.\nMain Features: Gossiping provides a scalable approach\nto peer discovery because each peer does not require global\nknowledge about all group members, and its generated \ntraffic can be controlled. The PD mechanism actively \nparticipates in peer selection by identifying peers for the \nlocal image which limits the possible choices of parents for\nthe PS mechanism. PRO constructs a multi-parent, \nunstructured overlay. But PRO does not have the same \nlimitations that exist in multi-tree approaches because it \nallows each receiver to independently micro-manage its \nparents to maximize its overall bandwidth based on local \ninformation. PRO conducts passive measurement not only to \ndetermine available bandwidth from a parent but also to detect\nany shared bottleneck between paths from different parents.\nFurthermore, by selecting a new parent from the local \nimage, PRO increases the probability of finding a good parent\nin each selection, and thus significantly decreases number of\nrequired measurements which in turn improves scalability.\nPRO can gracefully accommodate bandwidth heterogeneity\nand asymmetry among peers since PALS is able to manage\ndelivery of content from a group of parents with different\nbandwidth.\nLimitations and Challenges: The main hypothesis in our\nframework is that the best subset of parents for each receiver\nare likely to be part of its local image i.e., PD mechanism\ncan find the best parents. Whenever this condition is not\nsatisfied, either a receiver may not be able to maximize its\noverall bandwidth or resulting overlay may not be efficient.\nTable 1: Notation used throughout the paper\nSymbol Definition.\npi Peer i\ninbwi Incoming access link BW for pi\noutbwi Outgoing access link BW for pi\nmin nopi Min. No of parents for pi\nmax nopi Max. No of parents for pi\nnopi(t) No of active parents for pi at time t\nimg sz Size of local image at each peer\nsgm Size of gossip message\ndelij Estimated delay between pi and pj\nClearly, properties of the selected utility function as well as\naccuracy of estimated parameters (in particular using \noutgoing bandwidth instead of available bandwidth) determine\nproperties of the local image at each peer which in turn \naffects performance of the framework in some scenarios. In\nthese cases, the utility value may not effectively guide the\nsearch process in identifying good parents which increases\nthe average convergence time until each peer finds a good\nsubset of parents. Similar to many other adaptive \nmechanisms (e.g., [13]), the parent selection mechanism should \naddress the fundamental tradeoff between responsiveness and\nstability. Finally, the congestion controlled bandwidth from\nparent peers may not provide a measurable signal to \ndetect a shared bottleneck when level of multiplexing is high\nat the bottleneck link. However, this is not a major \nlimitation since the negative impact of a shared bottleneck in\nthese cases is minimal. All the above limitations are in part\ndue to the simplicity of our framework and would adversely\naffect its performance. However, we believe that this is a\nreasonable design tradeoff since simplicity is one of our key\ndesign goals. In the following sections, we describe the two\nkey components of our framework in further details.\n4. GOSSIP-BASED PEER DISCOVERY\nPeer discovery at each receiver is basically a search among\nall participating peers in the overlay for a certain number\n(img sz) of peers with the highest relative utility. PRO\nadopts a gossip-like [10] approach to peer discovery. \nGossiping (or rumor spreading) has been frequently used as a\nscalable alternative to flooding that gradually spreads \ninformation among a group of peers.However, we use gossiping as\na search mechanism [9] for finding promising parents since\nit has two appealing properties (i) the volume of exchanged\nmessages can be controlled, and (ii) the gossip-based \ninformation exchange can be customized to leverage relative\nutility values to improve search efficiency.\nThe gossip mechanism works as follow: each peer \nmaintains a local image that contains up to img sz records where\neach record represents the following information for a \npreviously discovered peer pi in the overlay: 1) IP address, 2)\nGNP coordinates, 3) number of received layers, 4) timestamp\nwhen the record was last generated by a peer, 5) outbwi and\n6) inbwi. To bootstrap the discovery process, a new \nreceiver needs to learn about a handful of other participating\npeers in the overlay. This information can be obtained from\nthe original server (or a well-known rendezvous point). The\nserver should implement a strategy for selecting the initial\npeers that are provided to each new receiver. We call this\nthe initial parent selection mechanism. Once the initial set\nof peers are known, each peer pi periodically invokes a target\nselection mechanism to determine a target peer (pj) from its\nlocal image for gossip. Given a utility function, peer pi uses\na content selection strategy to select sgm records (or smaller\nnumber when sgm records are not available) from its local\nimage that are most useful for pj and send those records to\npj. In response, pj follows the same steps and replies with\na gossip message that includes sgm records from its local\nimage that are most useful for pi, i.e., bidirectional \ngossip. When a gossip message arrives at each peer, an image\nmaintenance scheme integrates new records into the current\nlocal image and discards excess records such that certain\nproperty of the local image is improved (e.g., increase \noverall utility of peers in the image) Aggregate performance of\n45\na gossip mechanism can be presented by two average \nmetrics and their distribution among peers: (i) Average \nConvergence Time: average number of gossip messages until all\npeers in an overlay reach their final images, and (ii) Average\nEfficiency Ratio: average ratio of unique records to the total\nnumber of received records by each peer.\nWe have been exploring the design space of four key \ncomponents of the gossip mechanism. Frequency and size of\ngossip messages determine average freshness of local images.\nCurrently, the server randomly selects the initial parents\nfrom its local image for each new peer.\nTarget Selection: Target selection randomly picks a peer\nfrom the current image to evenly obtain information from\ndifferent areas of the overlay and speed up discovery.\nContent Selection: peer pk determines relative utility of all\nthe peers (pj) in its local image for target peer pi, and then\nrandomly selects sgm peers to prepare a gossip message for\npi. However, probability of selecting a peer directly depends\non its utility. This approach is biased towards peers with\nhigher utility but its randomness tend to reduce number of\nduplicate records in different gossip message from one peer\n(i.e., improves efficiency). A potential drawback of this \napproach is the increase in convergence time. We plan to \nexamine more efficient information sharing schemes such as\nbloom filters [3] in our future work. PRO uses joint-ranking\n[15] to determine relative utility of a parent for a receiver.\nGiven a collection of peers in a local image of pk, the \njointranking scheme ranks all the peers once based on their \noutgoing bandwidth, and then based on their estimated delay\nfrom a target peer pi. The utility of peer pj (U(pj, pi))\nis inversely proportional to the sum of pj\"s ranks in both\nrankings. Values for each property (i.e., bandwidth and \ndelay) of various peers are divided into multiple ranges (i.e.,\nbins) where all peers within each range are assumed to have\nthe same value for that property. This binning scheme\nminimizes the sensitivity to minor differences in delay or\nbandwidth among different peers.\nImage maintenance: Image maintenance mechanism evicts\nextra records (beyond img sz) that satisfy one of the \nfollowing conditions: (i) represent peers with the lower utility, (ii)\nrepresent peers that were already dropped by the PS \nmechanism due to poor performance and (iii) have a timestamp\nolder than a threshold. This approach attempts to balance\nimage quality (in terms of overall utility of existing peers)\nand its freshness.\nNote that the gossip mechanism can discover any peer\nin the overlay as long as reachability is provided through\noverlap among local images at different peers. The higher\nthe amount of overlap, the higher the efficiency of discovery,\nand the higher the robustness of the overlay to dynamics of\npeer participations. The amount of overlap among images\ndepends on both the size and shape of the local images at\neach peer. The shape of the local image is a function of\nthe deployed utility function. Joint-ranking utility gives the\nsame weight to delay and bandwidth. Delay tends to bias\nselection towards near-by peers whereas outgoing bandwidth\nintroduces some degree of randomness in location of selected\npeers. Therefore, the resulting local images should exhibit\na sufficient degree of overlap.\n5. PARENT SELECTION\nThe PS mechanism at each peer is essentially a \nprogressive search within the local image for a subset of parent\npeers such that the following design goals are achieved: (i)\nmaximizing delivered bandwidth 5\n, (ii) minimizing the total\ndelay from all parents to the receiver, and (iii) \nmaximizing diversity of paths from parents (whenever it is feasible).\nWhenever these goals are in conflict, a receiver optimizes\nthe goal with the highest priority. Currently, our framework\ndoes not directly consider diversity of paths from different\nparents as a criteria for parent selection. However, the \nindirect effect of shared path among parents is addressed \nbecause of its potential impact on available bandwidth from\na parent when two or more parents are behind the same\nbottleneck.\nThe number of active parents (nopi(t)) for each receiver\nshould be within a configured range [min nop, max nop].\nEach receiver tries to maximize its delivered bandwidth with\nthe minimum number of parents. If this goal can not be\nachieved after evaluation of a certain number of new \nparents, the receiver will gradually increase its number of \nparents. This flexibility is important in order to utilize \navailable bandwidth from low bandwidth parents, i.e., cope with\nbandwidth heterogeneity. min nop determines minimum\ndegree of resilience to parent departure, and minimum level\nof path diversity (whenever diverse paths are available). The\nnumber of children for each peer should not be limited. \nInstead, each peer only limits maximum outgoing bandwidth\nthat it is able (or willing) to provide to its children. This\nallows child peers to compete for congestion controlled \nbandwidth from a parent which motivates child peers with poor\nbandwidth connectivity to look for other parents (i.e., \nproperly reshape the overlay).\nDesign of a PS mechanism should address three main\nquestions as follows:\n1) When should a new parent be selected?\nThere is a fundamental tradeoff between responsiveness of\na receiver to changes in network conditions (or convergence\ntime after a change) and stability of the overlay. PRO adopts\na conservative approach where each peer selects a new \nparent in a demand-driven fashion. This should significantly\nreduce number of new parent selections, which in turn \nimproves scalability (by minimizing the interference caused by\nnew connections) and stability of the overlay structure. A\nnew parent is selected in the following scenarios: (i) Initial\nPhase: when a new peer joins the overlay, it periodically\nadds a new parent until it has min nop parents. (ii) \nReplacing a Poorly-Performing Parent: when available \nbandwidth from an existing parent is significantly reduced for a\nlong time or a parent leaves the session, the receiver can\nselect another peer after a random delay. Each receiver \nselects a random delay proportional to its available bandwidth\nfrom the parent peer [8]. This approach dampens potential\noscillation in the overlay while increasing the chance for \nreceivers with higher bandwidth connectivity to keep a parent\n(i.e., properly reshapes the overlay). (iii) Improvement in\nPerformance: when it is likely that a new parent would \nsignificantly improve a non-optimized aspect of performance\n(increase the bandwidth or decrease the delay). This \nstrategy allows gradual improvement of the parent subset as new\npeers are discovered (or joined) the overlay. The available\ninformation for each peer in the image is used as a heuristic\nto predict performance of a new peer. Such an improvement\nshould be examined infrequently. A hysteresis mechanism\n5\nThe target bandwidth is the lower value between maximum\nstream bandwidth and receiver\"s incoming bandwidth.\n46\nis implemented in scenario (ii) and (iii) to dampen any \npotential oscillation in the overlay.\n2) Which peer should be selected as a new parent?\nAt any point of time, peers in the local image are the best\nknown candidate peers to serve as parent. In PRO, each\nreceiver randomly selects a parent from its current image\nwhere the probability of selecting a parent is proportional\nto its utility. Deploying this selection strategy by all peers\nlead to proportional utilization of outgoing bandwidth of all\npeers without making the selection heavily biased towards\nhigh bandwidth peers. This approach (similar to [5]) \nleverages heterogeneity among peers since number of children for\neach peer is proportional to its outgoing bandwidth.\n3) How should a new parent be examined?\nEach receiver continuously monitors available bandwidth\nfrom all parents and potential correlation between \nbandwidth of two or more connections as signal for shared \nbottleneck. The degree of such correlation also reveals the level\nof multiplexing at the bottleneck link, and could serve as\nan indicator for separating remote bottlenecks from a local\none. Such a monitoring should use average bandwidth of\neach flow over a relatively long time scale (e.g., hundreds\nof RTT) to filter out any transient variations in bandwidth.\nTo avoid selecting a poorly-performing parent in the near\nfuture, the receiver associates a timer to each parent and\nexponentially backs off the timer after each failed \nexperience [13].\nAfter the initial phase, each receiver maintains a fixed\nnumber of parents at any point of time (nopi(t)). Thus, a\nnew parent should replace one of the active parents. \nHowever, to ensure monotonic improvement in overall \nperformance of active parents, a new parent is always added \nbefore one of the existing parents is dropped (i.e., a receiver\ncan temporarily have one extra parent). Given the \navailable bandwidth from all parents (including the new one)\nand possible correlation among them, a receiver can use one\nof the following criteria to drop a parent: (i) to maximize\nthe bandwidth, the receiver can drop the parent that \ncontributes minimum bandwidth, (ii) to maximize path \ndiversity among connections from parents, the receiver should\ndrop the parent that is located behind the same bottleneck\nwith the largest number of active parents and contributes\nminimum bandwidth among them. Finally, if the \naggregate bandwidth from all parents remains below the required\nbandwidth after examining certain number of new parents\n(and nopi(t) < max nop), the receiver can increase the total\nnumber of parents by one.\n6. CONCLUSIONS AND FUTURE WORK\nIn this paper, we presented a simple receiver-driven \nframework for architecting peer-to-pee overlay structures called\nPRO. PRO allows each peer to selfishly and independently\ndetermine the best way to connect to the overlay to \nmaximize its performance. Therefore, PRO should be able to\nmaximize delivered quality to peers with heterogeneous and\nasymmetric bandwidth connectivity. Both peer discovery\nand peer selection in this framework are scalable. \nFurthermore, PRO uses congestion controlled bandwidth as an\nimplicit signal to detect shared bottleneck among existing\nparents as well as changes in network or overlay conditions\nto properly reshape the structure. We described the basic\nframework and its key components, and sketched our \nstrawman solutions.\nThis is a starting point for our work on PRO. We are\ncurrently evaluating various aspects of this framework via\nsimulation, and exploring the design space of key \ncomponents. We are also prototyping this framework to conduct\nreal-world experiments on the Planet-Lab in a near future.\n7. REFERENCES\n[1] A. Akella, S. Seshan, and A. Shaikh. An empirical\nevaluation of wide-area internet bottlenecks. In\nInternet Measurement Conference, 2003.\n[2] S. Banerjee, B. Bhattacharjee, and C. Kommareddy.\nScalable application layer multicast. In ACM\nSIGCOMM, 2002.\n[3] J. Byers, J. Considine, M. Mitzenmacher, and S. Rost.\nInformed Content Delivery Across Adaptive Overlay\nNetworks. In ACM SIGCOMM, 2002.\n[4] M. Castro, P. Druschel, A.-M. Kermarrec, A. R.\nA. Nandi, and A. Singh. SplitStream: High-bandwidth\ncontent distribution in a cooperative environment. In\nACM SOSP, 2003.\n[5] Y. Chawathe, S. Ratnasamy, L. Breslau, N. Lanham,\nand S. Shenker. Making gnutella-like p2p systems\nscalable. In ACM SIGCOMM, 2003.\n[6] Y. Chu, S. G. Rao, S. Seshan, and H. Zhang. Enabling\nconferencing applications on the internet using an\noverlay multicast architecture. In ACM SIGCOMM,\n2001.\n[7] Y. Chu, S. G. Rao, and H. Zhang. A case for\nend-system multicast. In ACM SIGMETRICS, 2000.\n[8] S. Floyd, V. Jacobson, C. Liu, S. McCanne, and\nL. Zhang. Reliable Multicast Framework for\nLight-Weight Sessions and Application Level Framing.\nACM/IEEE Transactions on Networking, 1997.\n[9] M. Harchol-Balter, F. T. Leighton, and D. Lewin.\nResource discovery in distributed networks. In\nSymposium on Principles of Distributed Computing,\npages 229-237, 1999.\n[10] S. Hedetniemi, S. Hedetniemi, and A. Liestman. A\nSurvey of Gossiping and Broadcasting in\nCommunication Networks. In Networks, 1988.\n[11] D. Kostic, A. Rodriguez, J. Albrecht, and A. Vahdat.\nBullet: High bandwidth data dissemination using an\noverlay mesh. In SOSP, 2003.\n[12] K. Lakshminarayanan and V. N. Padmanabhan. Some\nfindings on the network performance of broadband\nhosts. In Internet Measurement Conference, 2003.\n[13] S. McCanne, V. Jacobson, and M. Vettereli.\nReceiver-driven layered multicast. In ACM\nSIGCOMM, 1996.\n[14] T. S. E. Ng, Y. Chu, S. G. Rao, K. Sripanidkulchai,\nand H. Zhang. Measurement-based optimization\ntechniques for bandwidth-demanding peer-to-peer\nsystems. In IEEE INFOCOM, 2003.\n[15] T. S. E. Ng and H. Zhang. Predicting internet\nnetwork distance with coordinates-based approaches.\nIn IEEE INFOCOM, 2002.\n[16] V. N. Padmanabhan, H. J. Wang, and P. A. Chou.\nResilient peer-to-peer streaming. In IEEE ICNP, 2003.\n[17] R. Rejaie, M. Handley, and D. Estrin. RAP: An\nend-to-end rate-based congestion control mechanism\nfor realtime streams in the internet. In IEEE\nINFOCOM, 1999.\n[18] R. Rejaie and A. Ortega. PALS: Peer-to-Peer\nAdaptive Layered Streaming. In NOSSDAV, 2003.\n[19] S. Saroiu, P. K. Gummadi, and S. D. Gribble.\nMeasurement study of peer-to-peer file system\nsharing. In SPIE MMCN, 2002.\n[20] D. A. Tran, K. A. Hua, and T. Do. Zigzag: An\nefficient peer-to-peer scheme for media streaming. In\nIEEE INFOCOM, 2003.\n47\n": ["peer-to-peer streaming", "congestion control", "receiver-driven approach", "receiver-driven overlay", "distributed system", "design", "measurement", "efficient overlay structure", "pro", "proper subset of parent peer", "gossip-based peer discovery", "receiver-driven parent selection", "peer-to-peer stream", ""]}